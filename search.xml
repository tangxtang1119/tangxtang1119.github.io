<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Samli一</title>
    <url>/2025/04/04/Samli/</url>
    <content><![CDATA[<p>参考：</p>
<p><a href="%5BSmali%E8%AF%AD%E8%A8%80%E8%AF%A6%E8%A7%A3-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/u012573920/article/details/44034397)">Smali和逆向分析</a></p>
<p>[Smali 语法解析](<a href="https://juejin.cn/post/6844903732774174734">Smali 语法解析——Hello World通过上一篇文章的学习，我们都知道了 Java 代码是如何执行的。Java - 掘金</a>)</p>
<p><a href="%5BSmali--Dalvik%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%87%E4%BB%A4%E8%AF%AD%E8%A8%80--%3E%E3%80%90android_smali%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E4%B8%80%E3%80%91_smali;-%3E-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/wdaming1986/article/details/8299996)">Smali–Dalvik虚拟机指令语言</a></p>
<p>学习视频：</p>
<p><a href="%E3%80%90smali%E8%AF%AD%E8%A8%80%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E3%80%91https://www.bilibili.com/video/BV1Vf4y1q7gh?vd_source=cbd0e7aa3299fa0fcc330c5ee16869bc">Smali语言从入门到精通</a></p>
<p>利器：</p>
<p><a href="http://liuzhichao.com/p/1476.html">Smali Sublime Text语法高亮插件</a></p>
<p><a href="https://code.google.com/p/dex2jar/">dex2jar，配合Smali事半功倍</a></p>
<h1 id="应用相关"><a href="#应用相关" class="headerlink" title="应用相关"></a>应用相关</h1><ol>
<li><p>.method和.end method</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">类似于Java中的大括号，包含了方法的实现代码段。</span><br></pre></td></tr></table></figure>
</li>
<li><p>.locals</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指明了这个方法用到的寄存器数量，当然寄存器可以重复利用，从“V0”起算</span><br><span class="line">使用这个指定表明方法中非参寄存器的总数，放在方法的第一行。</span><br></pre></td></tr></table></figure>
</li>
<li><p>.registers</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用这个指令指定方法中寄存器的总数</span><br></pre></td></tr></table></figure>
</li>
<li><p>v、p0、p1</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void int foo(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">  return (a+b)*(a-b);</span><br><span class="line">&#125;</span><br><span class="line">v命名法采用以小写字母v开头的方式表示函数中用到的局部变量与参数，所有的寄存器命名从v0开始，v0,v1用来表示函数的局部变量寄存器，v2表示传入的对象引用，v3，v4表示两个传入的整形参数</span><br><span class="line">p命名法，v0,v1用来表示函数的局部变量寄存器，p0表示传入的对象的引用，p1，p2分别表示传入的两个整形参数</span><br><span class="line">p0代表的是this，p1开始代表函数参数，静态函数没有this，所以从p0开始就代表参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>.prologue</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指定了代码开始处</span><br></pre></td></tr></table></figure>
</li>
<li><p>.line</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表明这是在java源码中的第几行，其实这个值无所谓是多少，可以任意修改，主要用于调试</span><br></pre></td></tr></table></figure>
</li>
<li><p>invoke-direct</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是对方法的调用，可以看到这里调用了是Android.app.Activity的init方法，这在java里是隐式调用的</span><br></pre></td></tr></table></figure>
</li>
<li><p>.parameter</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指明了参数名</span><br></pre></td></tr></table></figure>
</li>
<li><p>return-void</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回类型</span><br></pre></td></tr></table></figure>
</li>
<li><p>invoke-static</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用于调用static函数,invoke-static后面有一对大括号“&#123;&#125;”，其实是调用该方法的实例+参数列表</span><br><span class="line">invoke-static &#123;v3,v0&#125;, Landroid/util/log;-&gt;v(Ljava/lang/String;Ljava/lang/String;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>invoke-virtual</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用于调用protected或public函数，同样注意修改smali时不要错用invoke-direct或invoke-static</span><br><span class="line">invoke-virtual &#123;v1&#125;, Landroid/app/Activity;-&gt;getApplicationContext()Landroid/content/Context;</span><br></pre></td></tr></table></figure>
</li>
<li><p>invoke-direct</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用private函数</span><br><span class="line">invoke-direct &#123;v0, v4&#125;, Lcom/android/server/LightsService;-&gt;&lt;init&gt;(Landroid/content/Context;)V</span><br></pre></td></tr></table></figure>
</li>
<li><p>invoke-super</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用父类方法用的指令，一般用于调用onCreate、onDestroy等方法。</span><br><span class="line">invoke-super &#123;p0, p1&#125;, Landroid/preference/PreferenceActivity;-&gt;onCreate(Landroid/os/Bundle;)V    //p0：this，p1：Bundle</span><br><span class="line">invoke-super &#123;p0, p1, p2&#125;, Landroid/view/View;-&gt;onKeyUp(ILandroid/view/KeyEvent;)Z</span><br><span class="line">invoke-super &#123;p0, p1&#125;, Landroid/app/Activity;-&gt;onCreate(Landroid/os/Bundle;)V</span><br></pre></td></tr></table></figure>
</li>
<li><p>invokeinterface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用接口方法，调用的方法运行时确认实际调用，即会在运行时才确定一个实现此接口的对象。</span><br></pre></td></tr></table></figure>
</li>
<li><p>const</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const v0, 0x7f04001b  //将值0x7f04001b 放入寄存器v0</span><br><span class="line">const/4 v2, 0x1       //4字节常量   v2=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>new-instance</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新建一个实例</span><br><span class="line">new-instance v1, Lcom/droider/crackme0502/MainActivity$1; #新建一个MainActivity$1实例  </span><br><span class="line">invoke-direct &#123;v1, p0&#125;, Lcom/droider/crackme0502/MainActivity$1;-&gt;&lt;init&gt;(Lcom/droider/crackme0502/MainActivity;)V # 初始化MainActivity$1实例  </span><br></pre></td></tr></table></figure>
</li>
<li><p>iput-object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对象赋值</span><br><span class="line">iput-object v1, p0, Lcom/leachchen/testnixiang/MainActivity;-&gt;tree:Lcom/leachchen/testnixiang/Tree;  相当于tree = new Tree(); tree是类成员变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>iget-object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">调用对象</span><br><span class="line">iget-object v1, p0, Lcom/leachchen/testnixiang/MainActivity;-&gt;tree:Lcom/leachchen/testnixiang/Tree; 相当于获取到tree对象</span><br><span class="line">invoke-virtual &#123;v1&#125;, Lcom/leachchen/testnixiang/Tree;-&gt;go()V  相当于调用Tree类的go方法，tree.go();</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-eq vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA等于vB则跳转到:cond_</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-ne vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA不等于vB则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-lt vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA小于vB则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-ge vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA大于等于vB则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-gt vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA大于vB则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-le vA, vB, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA小于等于vB则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-eqz vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA等于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-nez vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA不等于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-ltz vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA小于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-gez vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA大于等于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-gtz vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA大于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-lez vA, :cond_</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果vA小于等于0则跳转到:cond_**</span><br></pre></td></tr></table></figure>
</li>
<li><p>sput-boolean</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Puts boolean value in vx into a static field.</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p>Smali 是 Android Dalvik 虚拟机（DEX 格式）的汇编语言（Smali是Dalvik的寄存器语言），它是对 <code>.dex</code> 文件的反编译结果。</p>
<p>Smali与Java的关系，简单理解就是汇编之于C。假如你对汇编有足够的驾驭能力，那你可以通过修改汇编代码来改变C&#x2F;C++代码的走向。当然，学过汇编的都清楚，汇编比BrainFuck还难学，更不用说去反编译修改了。</p>
<p>但是Smali有一点不一样，就是它很简单，只有一点点的语法，只要会java，了解Android的相关知识，那完全可以通过修改Smali代码来反向修改java代码，虽然绕了一点。</p>
<ul>
<li>samli是一种低级语言，用于描述Android应用程序的字节码</li>
<li>基于寄存器的架构，所有的操作都通过寄存器完成</li>
<li>寄存器命名规则：v0，v1，v3……或p0，p1，p2……（p通常表示方法参数）</li>
</ul>
<h1 id="Smali文件的产生"><a href="#Smali文件的产生" class="headerlink" title="Smali文件的产生"></a>Smali文件的产生</h1><p>​	Smali代码是安卓APK反编译而来的，所以Smali文件和Java文件一一对应。获取Smali文件，需要下载一个辅助工具：APKTool。APKTool这个命令行工具如果详细使用功能参数事比较多的，但是这里只需要用到最基础的两个功能。</p>
<p>一个是反编译decode：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apktool d xxxx.apk</span><br></pre></td></tr></table></figure>

<p>另一个是打包build：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apktool b</span><br></pre></td></tr></table></figure>

<p>这里要注意的是路径问题，记得将apktool添加到环境变量中去。</p>
<p>另一个是打包，如果指示简单的使用参数b，那要求是在反编译出来的项目目录下执行，而打包好的问价会保存在这个项目目录下的dist目录。</p>
<p>以<code>Hello.java</code> 为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">HELLO_WORLD</span> <span class="operator">=</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(HELLO_WORLD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>javac</code> 生成 <code>Hello.class</code> 文件，然后通过 Sdk 自带的 <code>dx</code> 工具生成 <code>Hello.dex</code> 文件，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dx --dex --output=Hello.dex  Hello.class</span><br></pre></td></tr></table></figure>

<p><code>dx</code> 工具位于 Sdk 的 <code>build-tools</code> 目录下，可添加至环境变量方便调用。<code>dx</code> 也支持多 Class 文件生成 dex。</p>
<p><code>dex</code> 转 <code>smali</code> 使用的工具是 <code>baksmali.jar</code> ，最新版本是 <code>2.2.5</code> ，<a href="https://link.juejin.cn/?target=https://bitbucket.org/JesusFreke/smali/downloads/">点击下载</a>，使用命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar baksmali-2.2.5.jar d hello.dex</span><br></pre></td></tr></table></figure>

<p>执行完成后，会在当前目录生成 <code>out</code> 文件夹，文件夹内包含生成的 <code>smali</code> 文件。</p>
<p>生成的 <code>Hello.smali</code> 文件内容：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHello;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;Hello.java&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># static fields</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span> HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> static</span><span class="keyword"> constructor</span> &lt;clinit&gt;()V</span><br><span class="line"><span class="keyword">    .registers</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 3</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> sput-object </span>v0, <span class="class">LHello;</span>-&gt;HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .registers</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 1</span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"><span class="keyword">    .registers</span> 3</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 6</span><br><span class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> sget-object </span>v1, <span class="class">LHello;</span>-&gt;HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 7</span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>dalvik字节码有两种类型，原始类型和引用类型。对象和数组是引用类型，其它都是原始类型。</p>
<p>smali数据类型都是用一个字母表示，如果你熟悉Java的数据类型，你会发现表示smali数据类型的字母其实是Java基本数据类型首字母的大写，除boolean类型外，在smail中用大写的”Z”表示boolean类型。</p>
<table>
<thead>
<tr>
<th>Smali</th>
<th>Java</th>
</tr>
</thead>
<tbody><tr>
<td>V</td>
<td>void，只能用于返回值类型</td>
</tr>
<tr>
<td>Z</td>
<td>boolean</td>
</tr>
<tr>
<td>B</td>
<td>byte</td>
</tr>
<tr>
<td>S</td>
<td>short</td>
</tr>
<tr>
<td>C</td>
<td>char</td>
</tr>
<tr>
<td>I</td>
<td>int</td>
</tr>
<tr>
<td>J</td>
<td>long (64 bits)</td>
</tr>
<tr>
<td>F</td>
<td>float</td>
</tr>
<tr>
<td>D</td>
<td>double (64 bits)</td>
</tr>
<tr>
<td>[</td>
<td>数组</td>
</tr>
<tr>
<td>L+全类名路径用&#x2F;分割;结尾</td>
<td>object</td>
</tr>
</tbody></table>
<p><strong>对象的表示形式</strong></p>
<p>对于基本类型和 Void 类型，都是用一个大写字母表示。对于引用类型，<u>使用字母 <code>L</code> 加上对象类型的全限定名来表示</u>。</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="class">Lpackage/name/ObjectName;</span></span><br><span class="line"><span class="comment">#L表示这是一个对象类型</span></span><br><span class="line"><span class="comment">#package/name/是该对象所在的包</span></span><br><span class="line"><span class="comment">#ObjectName是对象的名字</span></span><br><span class="line"><span class="comment">#“;”表示对象名称的结束</span></span><br></pre></td></tr></table></figure>

<p>相当于java中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>.name.ObjectName</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment">#smali</span></span><br><span class="line"><span class="class">Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#java:</span><br><span class="line">java.lang.String</span><br></pre></td></tr></table></figure>

<p><strong>数组的表现形式</strong></p>
<p>[ 表示一个整型一维数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[I</span><br><span class="line">#相当于java中的int[]</span><br></pre></td></tr></table></figure>

<p>对于多维数组，只要增加[就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[I</span><br><span class="line">#相当于java中的int[][]</span><br><span class="line">[[[I</span><br><span class="line">#相当于java中的int[][][]</span><br></pre></td></tr></table></figure>

<p>注意每一维的最多255个</p>
<p><strong>对象数组的表现形式</strong></p>
<p>表示一个String对象数组</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">[<span class="class">Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法通常必须详细的指定方法类型、方法名、参数类型、返回类型，所有这些信息都是为虚拟机是能够找到正确的方法并执行。</p>
<p><strong>方法的表示形式</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="class">Lpackage/name/ObjectName;</span>-&gt;MethodName(III)Z</span><br><span class="line"><span class="comment">#Lpackage/name/ObjectName;表示类型</span></span><br><span class="line"><span class="comment">#MethodName是方法名</span></span><br><span class="line"><span class="comment">#III为参数（在此是3个整型参数）</span></span><br><span class="line"><span class="comment">#Z是返回类型（bool型）</span></span><br></pre></td></tr></table></figure>

<p>方法的参数是一个接一个的，中间没有隔开</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method(I[[IILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</span><br><span class="line">#在java中则为：String method(int, int[][], int, String, Object[])</span><br></pre></td></tr></table></figure>

<p>一个比较全面的例子：</p>
<ul>
<li>“.method”和“.end method”类似于Java中的大括号，包含了方法的实现代码段。</li>
</ul>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> interface<span class="keyword"> abstract</span> <span class="class">Lcom/kit/network/CachableImage;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;SourceFile&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># virtual methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> getIsLarge()Z<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> getUrl()<span class="class">Ljava/lang/String;</span><span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> getViewContext()<span class="class">Landroid/content/Context;</span><span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> setBitmap(<span class="class">Landroid/graphics/Bitmap;</span>Z)V<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> setIsLarge(Z)V<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> abstract</span> setUrl(<span class="class">Ljava/lang/String;</span>)V<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<p>上面的smali代码还原后的java代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#注：在实际代码中我们还必须引入相关的包</span></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CachableImage</span> &#123;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">getIsLarge</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getUrl</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Context <span class="title function_">getViewContext</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setBitmap</span><span class="params">(Bitmap bitmap)</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setIsLarge</span><span class="params">(<span class="type">boolean</span> islarge)</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以最开始的<code>Hello.smali</code> 为例，其中包含了三个方法，<code>clinit</code> , <code>init</code> 和 <code>main</code> 方法。<code>main</code> 方法是我们自己编写的，而 <code>clinit</code> 和 <code>init</code> 方法则是 javac 编译时生成的。下面进行逐一分析:</p>
<h2 id="clinit"><a href="#clinit" class="headerlink" title="clinit"></a>clinit</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> static</span><span class="keyword"> constructor</span> &lt;clinit&gt;()V</span><br><span class="line"><span class="keyword">    .registers</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 3</span><br><span class="line">   <span class="built_in"> const-string </span>v0, <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> sput-object </span>v0, <span class="class">LHello;</span>-&gt;HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<p><code>clinit</code> 方法会进行静态变量的初始化，静态代码块的执行等操作，该方法在类被加载的时候调用。逐行分析该方法的执行逻辑：</p>
<ul>
<li><code>.registers 1 :</code> 该方法需要使用的寄存器数量。之前已经提到，DalviK VM 是基于寄存器的，字节码可以使用的虚拟寄存器个数可达 65536 个，每个寄存器 32 位，64 位的数据使用相邻两个寄存器表示。最终，所有的虚拟寄存器都会被映射到真实的物理寄存器上。一般情况下，我们使用字母 <code>v</code> 表示局部变量使用的寄存器，使用字母 <code>p</code> 表示参数所使用的寄存器，且局部变量使用的寄存器排列在前，参数使用的寄存器排列在后。这里就表示 <code>clinit</code> 方法仅使用了一个寄存器。</li>
<li><code>const-string v0, &quot;Hello World!&quot;</code> : 将字符串 <code>Hello World！</code> 的引用移到寄存器 <code>v0</code> 中。</li>
<li><code>sput-object v0, LHello;-&gt;HELLO_WORLD:Ljava/lang/String;</code> : 前缀 <code>s</code> 的 <code>sput</code> 和 <code>sget</code> 指令用于静态字段的读写操作。将寄存器 <code>v0</code> 存储的字符串引用赋值给 <code>HELLO_WORLD</code> 字段，结合上一句字节码，这里完成了静态变量 <code>HELLO_WORLD</code> 的赋值工作，也验证了 <code>clinit</code> 方法的确进行了静态变量的初始化。</li>
</ul>
<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</span><br><span class="line"><span class="keyword">    .registers</span> 1</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 1</span><br><span class="line">    <span class="comment">#invoke-direct 用于调用非 static 直接方法（也就是说，本质上不可覆盖的实例方法，即 private 实例方法或构造函数）。显然，这里调用的是默认构造函数。</span></span><br><span class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"><span class="keyword">    .registers</span> 3</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .prologue</span></span><br><span class="line"><span class="keyword">    .line</span> 6</span><br><span class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> sget-object </span>v1, <span class="class">LHello;</span>-&gt;HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"></span><br><span class="line"><span class="keyword">    .line</span> 7</span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<p>最后是 <code>main</code> 方法，从上述 smali 代码我们可以看到 <code>main</code> 方法使用了 3 个寄存器，无返回值（那是肯定的），执行的具体代码是下面三行:</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sget-object v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">sget-object </span>v1, <span class="class">LHello;</span>-&gt;HELLO_WORLD:<span class="class">Ljava/lang/String;</span></span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</span><br></pre></td></tr></table></figure>

<p><code>sget</code> 的用法在 <code>clinit</code> 方法中解释过，表示静态字段的读取。</p>
<p>第一句代码，获取类 <code>System</code> 的静态字段 <code>out</code>，其类型是 <code>Ljava/io/PrintStream</code>，并将其引用赋给寄存器 <code>v0</code>。</p>
<p>第二句代码获取在 <code>clinit</code> 方法中已经初始化的静态字段 <code>HELLO_WORLD</code>，并将其引用赋给寄存器 <code>v1</code>。第三句中使用了 <code>invoke-virtual</code> 指令，<code>invoke-virtual</code> 调用正常的虚方法（该方法不是 private、static 或 final，也不是构造函数），之后通常会跟上 <code>&#123;&#125;</code>，<code>&#123;&#125;</code>之中的第一个寄存器通常是指向当前实例对象，如 <code>v0</code> 就是指向 <code>System.out</code> 对象，后面的内容才是该方法真正的参数，如 <code>v1</code>。<code>&#123;&#125;,</code> 之后就是要执行的方法的描述，如 <code>Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V</code> ,指的就是 <code>PrintStream</code> 对象的 <code>println</code> 方法。</p>
<p>综上，这三句字节码执行的就是 <code>System.out.println(HELLO_WORLD);</code>。</p>
<p>到这里，<code>Hello.smali</code> 文件就解析完了。</p>
<hr>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#我是注释</span><br></pre></td></tr></table></figure>

<h1 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h1><p>基本格式</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span>+权限修饰符+类名;</span><br></pre></td></tr></table></figure>

<p>如下java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用smali代码表示为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#声明类（必须）</span><br><span class="line">.class public LTest;</span><br><span class="line">#声明父类 默认继承Object（必须）如果有明确的继承 将Object替换</span><br><span class="line">.super Ljava/lang/Object;</span><br><span class="line">#如果实现了接口 则必须添加接口代码</span><br><span class="line">.implements Ljava/lang/CharSequence;</span><br><span class="line">#源码文件名（非必填）如果有混淆就会没有这行代码</span><br><span class="line">.source &quot;Test.java&quot;</span><br></pre></td></tr></table></figure>

<p><strong>关于分号：</strong></p>
<p><u>凡是L开头全包名路径结尾都需要加分号</u></p>
<h1 id="字段声明-成员-全局变量"><a href="#字段声明-成员-全局变量" class="headerlink" title="字段声明(成员&#x2F;全局变量)"></a>字段声明(成员&#x2F;全局变量)</h1><p>基本格式：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.field</span> 权限修饰符+静态修饰符+变量名;变量全类名路径;</span><br></pre></td></tr></table></figure>

<p>如下java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用smali代码表示：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LTest;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;Test.java&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果是非静态的 只需要将static去掉即可</span></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span> a:<span class="class">Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span> _requestLayout:Z</span><br><span class="line"> </span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> isLarge:Z</span><br><span class="line"> </span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> resize:Z</span><br><span class="line"> </span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> thumbnailSize:I</span><br><span class="line"> </span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> public</span> url:<span class="class">Ljava/lang/String;</span></span><br></pre></td></tr></table></figure>

<p>还原后的java代码为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> _requestLayout;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> isLarge;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> resize;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> thumbnailSize;</span><br><span class="line"><span class="keyword">public</span> String url;</span><br></pre></td></tr></table></figure>

<p>以一个默认的HelloWorld的应用程序进行解释。新建一个HelloWorld安卓项目，在MainActivity中只保留onCreate函数。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.fusijie.helloworld;</span><br><span class="line">  <span class="keyword">import</span> android.app.Activity;</span><br><span class="line">  <span class="keyword">import</span> android.os.Bundle;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>反编译后的Smali文件如下：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lcom/fusijie/helloworld/MainActivity;</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Landroid/app/Activity;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;MainActivity.java&quot;</span></span><br><span class="line"><span class="comment"># direct methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> ()V</span><br><span class="line">	<span class="comment">#“.locals”指明了这个方法用到的寄存器数量，当然寄存器可以重复利用，从“V0”起算</span></span><br><span class="line"><span class="keyword">  .locals</span> 0</span><br><span class="line">  <span class="comment">#“.prologue”指定了代码开始处。</span></span><br><span class="line"><span class="keyword">  .prologue</span></span><br><span class="line">  <span class="comment">#“.line”表明这是在java源码中的第几行，其实这个值无所谓是多少，可以任意修改，主要用于调试</span></span><br><span class="line"><span class="keyword">  .line</span> 14</span><br><span class="line">  <span class="comment">#“invoke-direct”这是对方法的调用，这里调用了是Android.app.Activity的init方法，这在java里是隐式调用的</span></span><br><span class="line"> <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Landroid/app/Activity;</span>-&gt;()V</span><br><span class="line">  <span class="comment">#“return-void”表明了返回类型，这和java不一样，即使没有返回值，也需要这样写</span></span><br><span class="line"> <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># virtual methods</span></span><br><span class="line"><span class="keyword">.method</span><span class="keyword"> protected</span> onCreate(<span class="class">Landroid/os/Bundle;</span>)V</span><br><span class="line"><span class="keyword">  .locals</span> 1</span><br><span class="line">  <span class="comment">#“.parameter”指明了参数名，但是一般没有用</span></span><br><span class="line"><span class="keyword">  .parameter</span> <span class="string">&quot;savedInstanceState&quot;</span></span><br><span class="line"><span class="keyword">  .prologue</span></span><br><span class="line"><span class="keyword">  .line</span> 18</span><br><span class="line">  <span class="comment">#需要注意的是p0代表的是this，p1开始代表函数参数，静态函数没有this，所以从p0开始就代表参数</span></span><br><span class="line"> <span class="built_in"> invoke-super </span>&#123;p0, p1&#125;, <span class="class">Landroid/app/Activity;</span>-&gt;onCreate(<span class="class">Landroid/os/Bundle;</span>)V</span><br><span class="line"><span class="keyword">  .line</span> 19</span><br><span class="line"> <span class="built_in"> const/high16 </span>v0, 0x7f03</span><br><span class="line"> <span class="built_in"> invoke-virtual </span>&#123;p0, v0&#125;, <span class="class">Lcom/fusijie/helloworld/MainActivity;</span>-&gt;setContentView(I)V</span><br><span class="line"><span class="keyword">  .line</span> 20</span><br><span class="line"> <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在实现里先是调用了父类的方法，然后再调用setContentView，注意这里给了一个传参。整形的传参，这个值是先赋给寄存器v0，然后再调用的使用传递进去的。smali中都是这么使用，所有的值必须通过寄存器来中转。这点和汇编很像。</li>
</ul>
<p><strong>文件头</strong></p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment">#类名为MainActivity</span></span><br><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lcom/fusijie/helloworld/MainActivity;</span>	</span><br><span class="line"><span class="comment">#父类名为Activity</span></span><br><span class="line"><span class="keyword">.super</span> <span class="class">Landroid/app/Activity;</span></span><br><span class="line"><span class="comment">#源文件名称为MainActivity</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;MainActivity.java&quot;</span></span><br></pre></td></tr></table></figure>

<p>对比了Java代码和Smali代码，可以很清楚的看到，原本只有几行的代码到了Smali，内容被大大扩充了。Smali还原了Java隐藏的东西，同时显式地指定了很多细节。这还只是个最基本的HelloWorld的onCreate函数，如果有内部类，还会分文件显示。</p>
<h1 id="常量声明"><a href="#常量声明" class="headerlink" title="常量声明"></a>常量声明</h1><p>基本格式</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.field</span> 权限修饰符+静态修饰符+final+变量名;变量全类名路径;=常量值</span><br></pre></td></tr></table></figure>

<p>如下java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String a=<span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用smali代码表示：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LTest;</span></span><br><span class="line">,super <span class="class">Ljava/lang/Object;</span></span><br><span class="line"><span class="keyword">.source</span> <span class="string">&quot;Test.java&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span><span class="keyword"> final</span> a:<span class="class">Ljava/lang/String;</span> = <span class="string">&quot;Hello&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> testMethod(Lcom/lang/String)V<span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure>



<h1 id="字段取值赋值"><a href="#字段取值赋值" class="headerlink" title="字段取值赋值"></a>字段取值赋值</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">iget<span class="built_in"> iput </span>sget<span class="built_in"> sput </span>instance<span class="keyword"> static</span></span><br></pre></td></tr></table></figure>

<h1 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">invoke</span><br></pre></td></tr></table></figure>

<h1 id="方法取值"><a href="#方法取值" class="headerlink" title="方法取值"></a>方法取值</h1><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一步：调用方法	invoke--</span></span><br><span class="line"><span class="comment">#第二步：返回值的接收 move-result-object v0</span></span><br></pre></td></tr></table></figure>



<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul>
<li><p>一定要使用混淆。不单单是第三方SDK，你的代码也是。破解游戏很重要一点就是要抓住游戏的逻辑。代码混淆后，Smali更加晦涩难懂，逻辑也更难掌握。</p>
</li>
<li><p>回到开头的话，解读汇编比解读Smali难度大的多得多。所以重要的逻辑可以放到C&#x2F;C++层去处理就不要放在Java层上去处理。</p>
</li>
<li><p>多用连续调用的方式。这样出来的效果是Java只有一行，Smali可能有好几十行，看着都蛋疼。当然这对熟练的破解老手无效～</p>
</li>
<li><p>在一些关键的点上，比如支付，多绕一下。而不是像《消灭小星星》这样，直接在Java内用中文显示“支付成功”，同时去调用JNI方法。用dex2jar看一眼就暴露了。</p>
</li>
<li><p><code>java</code> 转 <code>smali</code> 的快捷方式，在 <code>IDEA</code> 或者 <code>Android Studo</code> 中安装插件 <code>java2smali</code>，在 <code>Build</code> 菜单栏下会出现 <code>Compile to smali</code>选项，可以迅速将 java 代码转化成 smali 代码。在学习 smali 的过程中，碰到不确定的内容，可以先写好 java 代码，再转成 smali 代码进行对照学习。</p>
</li>
<li><p>Android 官网也对 Dalvik 字节码的指令集进行了归纳，地址是 [Dalvik 字节码格式](<a href="https://source.android.google.cn/docs/core/runtime/dalvik-bytecode?hl=zh-cn">Dalvik 字节码格式  | Android Open Source Project</a>)。在阅读过程中遇到不熟悉的指令，都可以在这个页面进行查找。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓逆向</title>
    <url>/2025/04/04/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="一、创建一个新的项目"><a href="#一、创建一个新的项目" class="headerlink" title="一、创建一个新的项目"></a>一、<strong>创建一个新的项目</strong></h2><ol>
<li><strong>打开 Android Studio：</strong><ul>
<li>启动 Android Studio，你会看到欢迎界面。</li>
</ul>
</li>
<li><strong>选择创建新项目</strong>：<ul>
<li>点击 **”New Project”**（新建项目）。</li>
</ul>
</li>
<li><strong>选择项目模板</strong>：<ul>
<li>在弹出的窗口中，选择 **”Empty Views Activity”**（空活动），然后点击 **”Next”**。</li>
</ul>
</li>
<li><strong>配置项目信息</strong>：<ul>
<li><strong>Name</strong>: 输入你的项目名称，例如 <code>HelloWorld</code>。</li>
<li><strong>Package Name</strong>: 自动填充，通常是 <code>com.example.helloworld</code>。</li>
<li><strong>Save Location</strong>: 选择项目的保存位置。</li>
<li><strong>Language</strong>: 选择 <strong>Java</strong>。</li>
<li><strong>Minimum SDK</strong>: 选择 API 21 或更高版本（建议选择默认值）。</li>
<li>点击 **”Finish”**。</li>
</ul>
</li>
<li><strong>等待项目加载</strong>：<ul>
<li>Android Studio 会自动为你生成一个初始项目，可能需要几分钟时间。</li>
</ul>
</li>
</ol>
<h2 id="二、项目目录"><a href="#二、项目目录" class="headerlink" title="二、项目目录"></a>二、项目目录</h2><p><strong><code>app</code></strong></p>
<ul>
<li><strong><code>manifests</code></strong><ul>
<li><code>AndroidManifest.xml</code></li>
</ul>
</li>
<li><strong><code>java</code></strong><ul>
<li><strong><code>com.example.helloworld</code></strong><ul>
<li><code>MainActivity</code></li>
</ul>
</li>
<li><strong><code>com.example.helloworld(androidTest)</code></strong><ul>
<li><code>ExampleInstrumentedTest</code></li>
</ul>
</li>
<li><strong><code>com.example.helloworld(test)</code></strong><ul>
<li><code>ExampleUnitTest</code></li>
</ul>
</li>
<li><strong><code>java(generated)</code></strong></li>
</ul>
</li>
<li><strong><code>res</code></strong><ul>
<li><strong><code>drawable</code></strong><ul>
<li><code>ic_launcher_background.xml </code></li>
<li><code>ic_launcher_background.xml(v24)</code></li>
</ul>
</li>
<li><strong><code>layout</code></strong><ul>
<li><code>activity_main.xml</code></li>
</ul>
</li>
<li>**<code>mipmap**</code><ul>
<li>**<code>ic_launcher**</code><ul>
<li><code>ic_launcher.webp(hdpi)</code></li>
<li><code>ic_launcher.webp(mdpi)</code></li>
<li><code>ic_launcher.webp(xhdpi)</code></li>
<li><code>ic_launcher.webp(xxhdpi)</code></li>
<li><code>ic_launcher.webp(xxxhdpi)</code></li>
<li><code>ic_launcher.xml(anydpi-v26)</code></li>
</ul>
</li>
<li><strong><code>ic_launcher_round</code></strong><ul>
<li><code>ic_launcher_round.webp(hdpi)</code></li>
<li><code>ic_launcher_round.webpp(mdpi)</code></li>
<li><code>ic_launcher_round.webp(xhdpi)</code></li>
<li><code>ic_launcher_round.webp(xxhdpi)</code></li>
<li><code>ic_launcher_round.webp(xxxhdpi)</code></li>
<li><code>c_launcher_round.xml(anydpi-v26)</code></li>
</ul>
</li>
</ul>
</li>
<li><strong><code>values</code></strong><ul>
<li><code>colors.xml</code></li>
<li><code>strings.xml</code></li>
<li><strong><code>themes</code></strong><ul>
<li><code>themes.xml</code></li>
<li><code>themes.xml(night)</code></li>
</ul>
</li>
</ul>
</li>
<li><strong><code>xml</code></strong><ul>
<li><code>backup_rules.xml</code></li>
<li><code>data_extraction_rules.xml</code></li>
</ul>
</li>
</ul>
</li>
<li><strong><code>res(generated)</code></strong></li>
</ul>
<p><strong><code>Gradle Scripts</code></strong></p>
<ul>
<li><code>build.gradle.kts(Project:helloworld)</code></li>
<li><code>build.gradle.kts(Module:app)</code></li>
<li><code>proguard-ruls.pro(ProGuard Rules for “:app”)</code></li>
<li><code>gradle.properties(Project Properties)</code></li>
<li><code>gradle-wrapper.properties(Gradle Version)</code></li>
<li><code>libs.version.toml(Version Catalog)</code></li>
<li><code>local.properties(SDK Location)</code></li>
<li><code>settings.gradle.kts(Project Settings)</code></li>
</ul>
<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h3><h4 id="app模块根目录"><a href="#app模块根目录" class="headerlink" title="app模块根目录"></a><strong><code>app</code>模块根目录</strong></h4><p>这是 Android 应用的主模块，包含所有代码和资源。</p>
<hr>
<h4 id="manifests目录"><a href="#manifests目录" class="headerlink" title="manifests目录"></a><strong><code>manifests</code>目录</strong></h4><ul>
<li><p><code>AndroidManifest.xml</code></p>
<ul>
<li>作用：应用的全局配置文件，定义包名、四大组件（Activity&#x2F;Service等）、权限、最低 SDK 版本等核心信息。</li>
<li>示例内容：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.helloworld&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="java-目录"><a href="#java-目录" class="headerlink" title="java 目录"></a><strong><code>java</code> 目录</strong></h4><ul>
<li><strong><code>com.example.helloworld</code></strong><ul>
<li><strong>作用</strong>：主代码包，存放 Java&#x2F;Kotlin 源代码。</li>
<li>**<code>MainActivity</code>**：默认的入口 Activity，对应应用启动时的界面逻辑。</li>
</ul>
</li>
<li><strong><code>com.example.helloworld (androidTest)</code></strong><ul>
<li><strong>作用</strong>：仪器化测试代码（需在真机或模拟器上运行），如 UI 测试。</li>
<li>**<code>ExampleInstrumentedTest</code>**：示例测试类，验证 Android 框架相关功能。</li>
</ul>
</li>
<li><strong><code>com.example.helloworld (test)</code></strong><ul>
<li><strong>作用</strong>：本地单元测试代码（无需设备，可在 JVM 运行），如逻辑层测试。</li>
<li>**<code>ExampleUnitTest</code>**：示例测试类，验证纯 Java&#x2F;Kotlin 逻辑。</li>
</ul>
</li>
<li><strong><code>java (generated)</code></strong><ul>
<li><strong>作用</strong>：自动生成的代码（如 R 文件、DataBinding 类等），<strong>不要手动修改</strong>。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="res-资源目录"><a href="#res-资源目录" class="headerlink" title="res 资源目录"></a><strong><code>res</code> 资源目录</strong></h4><ul>
<li><strong><code>drawable</code></strong><ul>
<li><strong>作用</strong>：存放图片或 XML 绘制的图形资源。</li>
<li>**<code>ic_launcher_background.xml</code>**：应用图标的背景图层（矢量图形）。</li>
<li>**<code>ic_launcher_foreground.xml (v24)</code>**：应用图标的前景图层（适配 API 24+）。</li>
</ul>
</li>
<li><strong><code>layout</code></strong><ul>
<li><strong>作用</strong>：存放 XML 布局文件。</li>
<li>**<code>activity_main.xml</code>**：主 Activity 的界面布局。</li>
</ul>
</li>
<li><strong><code>mipmap</code></strong><ul>
<li><strong>作用</strong>：存放应用图标（不同分辨率适配）。</li>
<li><strong><code>ic_launcher</code> 和 <code>ic_launcher_round</code></strong><ul>
<li><code>.webp</code> 文件：不同屏幕密度（hdpi&#x2F;mdpi&#x2F;xhdpi等）的方形&#x2F;圆形图标。</li>
<li><code>.xml</code> 文件（anydpi-v26）：适配 Android 8.0+ 的自适应图标配置。</li>
</ul>
</li>
</ul>
</li>
<li><strong><code>values</code></strong><ul>
<li>**<code>colors.xml</code>**：定义颜色常量（如主题色、文字颜色）。</li>
<li>**<code>strings.xml</code>**：定义字符串资源（如应用名称、按钮文字）。</li>
<li>**<code>themes.xml</code>**：定义应用主题（日间&#x2F;夜间模式）。</li>
</ul>
</li>
<li><strong><code>xml</code></strong><ul>
<li><strong>作用</strong>：存放其他 XML 配置文件。</li>
<li>**<code>backup_rules.xml</code>**：定义自动备份规则。</li>
<li>**<code>data_extraction_rules.xml</code>**：定义应用数据提取规则。</li>
</ul>
</li>
</ul>
<h2 id="三、第一个程序"><a href="#三、第一个程序" class="headerlink" title="三、第一个程序"></a><strong>三、第一个程序</strong></h2><h3 id="MainActivity类文件"><a href="#MainActivity类文件" class="headerlink" title="MainActivity类文件"></a><strong>MainActivity类文件</strong></h3><ul>
<li>在左侧的 <strong>Project</strong> 面板中，展开目录，找到 <code>app/src/main/java/com/example/helloworld/MainActivity</code> 文件。</li>
</ul>
<p><strong>编辑MainActivity类文件</strong></p>
<ul>
<li>添加“用户名”和“注册码”输入框。编写MainActivity类文件。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.helloworld;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_userName;</span><br><span class="line">    <span class="keyword">private</span> EditText edit_sn;</span><br><span class="line">    <span class="keyword">private</span> Button btn_register;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字节数组转换为十六进制字符串</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toHexString</span><span class="params">(<span class="type">byte</span>[] bytes, String separator)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> Integer.toHexString(<span class="number">0xFF</span> &amp; b);</span><br><span class="line">            <span class="keyword">if</span> (hex.length() == <span class="number">1</span>) &#123;</span><br><span class="line">                hexString.append(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexString.append(hex);</span><br><span class="line">            <span class="keyword">if</span> (separator != <span class="literal">null</span> &amp;&amp; !separator.isEmpty()) &#123;</span><br><span class="line">                hexString.append(separator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexString.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法主要用于计算用户名与注册码是否匹配 。</span></span><br><span class="line">    <span class="comment">//首先，使用MD5算法计算用户名字符串的散列值，将计算结果转换成长度为32位的十六进制字符串。</span></span><br><span class="line">    <span class="comment">//然后，将字符串中的所有奇数位重新组合，生成新的字符串，这个字符串就是最终的注册码。</span></span><br><span class="line">    <span class="comment">//最后，将这个字符串与传人的注册码进行比较。如果二者相同，表示注册码是正确的；如果二者不同，表示注册码是错误的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">checkSN</span><span class="params">(String userName, String sn)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>((userName == <span class="literal">null</span>)||(userName.length()==<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> ((sn == <span class="literal">null</span>)||(sn.length()!=<span class="number">16</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">MessageDigest</span> <span class="variable">digest</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">            digest.reset();</span><br><span class="line">            digest.update(userName.getBytes());</span><br><span class="line">            <span class="type">byte</span>[] bytes = digest.digest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">hexstr</span> <span class="operator">=</span> toHexString(bytes,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; hexstr.length();i+=<span class="number">2</span>)&#123;</span><br><span class="line">                sb.append(hexstr.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">userSN</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">            <span class="keyword">if</span> (!userSN.equalsIgnoreCase(sn))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NoSuchAlgorithmException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加注册按钮点击事件的监听器。</span></span><br><span class="line">    <span class="comment">// 如果用户名与注册码匹配，就弹出注册成功的提示；</span></span><br><span class="line">    <span class="comment">// 如果用户名与注册码不匹配， 则弹出用户名或注册码无效的提示</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        setTitle(R.string.unregistered);</span><br><span class="line"></span><br><span class="line">        edit_userName = findViewById(R.id.edit_username);</span><br><span class="line">        edit_sn = findViewById(R.id.edit_sn);</span><br><span class="line">        btn_register = findViewById(R.id.button_register);</span><br><span class="line"></span><br><span class="line">        btn_register.setOnClickListener(v -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (!checkSN(</span><br><span class="line">                    edit_userName.getText().toString().trim(),</span><br><span class="line">                    edit_sn.getText().toString().trim()</span><br><span class="line">            )) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,</span><br><span class="line">                        R.string.unsuccessful, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="built_in">this</span>,</span><br><span class="line">                        R.string.successful, Toast.LENGTH_SHORT).show();</span><br><span class="line">                btn_register.setEnabled(<span class="literal">false</span>);</span><br><span class="line">                setTitle(R.string.registered);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串资源文件"><a href="#字符串资源文件" class="headerlink" title="字符串资源文件"></a><strong>字符串资源文件</strong></h3><ul>
<li>在左侧的 <strong>Project</strong> 面板中，展开目录，找到 <code>app/src/main/res/layout/activity_main.xml</code> 文件。</li>
</ul>
<p><strong>编辑字符串资源文件</strong></p>
<ul>
<li><p>完善字符串的定义</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>HelloWorldApp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unregistered&quot;</span>&gt;</span>未注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;registered&quot;</span>&gt;</span>已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unsuccessful&quot;</span>&gt;</span>用户名或注册码无效<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;successful&quot;</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="界面布局文件"><a href="#界面布局文件" class="headerlink" title="界面布局文件"></a><strong>界面布局文件</strong></h3><ul>
<li>在左侧的 <strong>Project</strong> 面板中，展开目录，找到 <code>app/src/main/res/layout/activity_main.xml</code> 文件。</li>
</ul>
<p><strong>编辑界面布局文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;请输入用户名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_marginHorizontal</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_marginTop</span>=<span class="string">&quot;16dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_sn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:hint</span>=<span class="string">&quot;请输入注册码&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/edit_username&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_marginHorizontal</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:layout_marginTop</span>=<span class="string">&quot;8dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/button_register&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;0dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:minHeight</span>=<span class="string">&quot;48dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;注册&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">&quot;@+id/edit_sn&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_marginHorizontal</span>=<span class="string">&quot;16dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_marginTop</span>=<span class="string">&quot;16dp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="切换到设计视图"><a href="#切换到设计视图" class="headerlink" title="切换到设计视图"></a><strong>切换到设计视图</strong></h3><ul>
<li>如果想通过拖放控件来设计界面，可以切换到 <strong>Design</strong> 视图，在屏幕中央放置一个 <code>TextView</code>，并设置文本。如果没有报错，可以看到如下图。<img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250401133921303.png"></li>
</ul>
<h2 id="四、生成-APK-文件"><a href="#四、生成-APK-文件" class="headerlink" title="四、生成 APK 文件"></a><strong>四、生成 APK 文件</strong></h2><h3 id="打开-Build-菜单："><a href="#打开-Build-菜单：" class="headerlink" title="打开 Build 菜单："></a><strong>打开 Build 菜单</strong>：</h3><ul>
<li>在顶部菜单栏中，点击 <strong>Build</strong> &gt; <strong>Build Bundle(s) &#x2F; APK(s)</strong> &gt; **Build APK(s)**。<img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%94%9F%E6%88%90APK%E6%96%87%E4%BB%B6.png"></li>
</ul>
<p>！ERROR: F:\AndroidProject\helloworld\app\src\main\res\layout\activity_main.xml:20: AAPT: error: attribute layout_marginTop (aka com.example.helloworld:layout_marginTop) not found.&#96;</p>
<p><strong>错误原因：</strong></p>
<p><strong><code>margin</code> 相关的属性必须用 <code>android:</code> 命名空间</strong>，不能用 <code>app:</code>。</p>
<p><code>app:</code> 是给 <strong>自定义属性</strong> 或 <strong>第三方库属性</strong> 用的。一般只用于 <strong>ConstraintLayout 的约束属性</strong>（比如 <code>app:layout_constraintXXX</code>）。</p>
<p><code>android:</code> 是 Android 系统自带的属性（比如 <code>margin</code>、<code>padding</code>、<code>textSize</code> 等）</p>
<p>修改后运行，模拟器中会显示如下图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E6%B3%A8%E5%86%8C%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%8B%9F.png"></p>
<h3 id="等待构建完成"><a href="#等待构建完成" class="headerlink" title="等待构建完成"></a><strong>等待构建完成</strong></h3><ul>
<li>构建完成后，Android Studio 会弹出一个通知，提示你 APK 文件已经生成。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E6%9E%84%E5%BB%BA%E5%AE%8C%E6%88%90%E9%80%9A%E7%9F%A5.png"></p>
<h3 id="找到-APK-文件"><a href="#找到-APK-文件" class="headerlink" title="找到 APK 文件"></a><strong>找到 APK 文件</strong></h3><ul>
<li><p>点击通知中的 <strong>“locate”</strong> 链接，系统会打开 APK 文件所在的文件夹。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/locate.png"></p>
</li>
</ul>
<h2 id="五、破解程序"><a href="#五、破解程序" class="headerlink" title="五、破解程序"></a>五、破解程序</h2><h3 id="破解入手"><a href="#破解入手" class="headerlink" title="破解入手"></a><strong>破解入手</strong></h3><ul>
<li>破解Android程序的方法通常是：<ul>
<li>使用ApkTool反编译APK文件，生成 smali格式的反汇编 代码；</li>
<li>通过阅读smali文件的代码来理解程序的运行机制，找到突破口，并对代码进行修改；</li>
<li>使用 ApkTool重新编译生成APK文件并对其进行签名；</li>
<li>运行测试一一如此循环，直至程序被破解。</li>
</ul>
</li>
<li>实际分析中，还可以使用IDAPro直接分析APK文件，使用dex2jar与jd-gui配合进行Java 源码级的分析等。</li>
</ul>
<h3 id="反编译APK文件"><a href="#反编译APK文件" class="headerlink" title="反编译APK文件"></a>反编译APK文件</h3><ul>
<li>ApkTool是一款常用的跨平台APK文件反编译工具</li>
</ul>
<p>访问<a href="https://github.corn/ibotpeaches/">https://github.corn/ibotpeaches/</a> Apktool，即可下载新版本 ApkTool的jar包。针对 不同的系统，还需要下载相关的运行时包装脚本，具体如下。</p>
<ul>
<li>Windows版本：<a href="https://github.corn/iBotPeaches/Apktool/tree/master/scripts/windows/apktool.bat">https://github.corn/iBotPeaches/Apktool/tree/master/scripts/windows/apktool.bat</a></li>
</ul>
<p>将下载的jar和脚本放到同一个目录下，</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/apktool%E7%9B%AE%E5%BD%95.png"></p>
<p>然后将该路径添加到系统的PATH环境变量中，</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/apktoolde%E9%85%8D%E7%BD%AEPATH.png"></p>
<p>就完成了ApkTool的安装。检查可以通过终端Win+R，输入<code>apktool -version</code>查看版本。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/apktool%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC.png" alt="i"></p>
<p>进入终端，执行如下命令<code>apktool d./app-debug.apk -o outdir</code>，对APK文件进行反编译。会在当前的 outdir目录下生成反编译文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%8F%8D%E6%B1%87%E7%BC%962.png"></p>
<p>反编译文件包含一系列目录和文件， <strong>smali目录中存放了程序的所有反汇编代码，res目录中存放的则是程序中所有的资源文件</strong>，这些目录的子目录和文件的组织结构与开发时源码目录的组织结构是一致的。</p>
<h3 id="分析APK文件"><a href="#分析APK文件" class="headerlink" title="分析APK文件"></a>分析APK文件</h3><p><u>如何寻找突破口是分析一个程序的关键。</u></p>
<p>对大部分Android程序来说，错误提示信息是指引找到关键代码的明灯。</p>
<p>错误提示代码附近通常就是程序的核心验证代码，需要通过阅读这些代码来理解软件的注册流程。</p>
<p><u>错误提示属于Android程序中的字符串资源。</u></p>
<p>在开发Android程序时，这些字符串可能会被硬编码到源码中，也可能引用自res\values目录下的strings.xml文件。</p>
<p>APK文件在打包时，strings.xml 中的字符串被加密存储为resources.arsc文件并保存到APK程序包中；如果APK文件被成功反编 译，这个文件就被解密了。</p>
<p>res&#x2F;values&#x2F;string.xml文件的内容如下，除了系统默认生成的一系列以“abc ” 开头的字符串，都是heeloworld程序使用的字符串。可以通过终端命令<code>cat oudir/res/values/strings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_home_description&quot;</span>&gt;</span>Navigate home<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_up_description&quot;</span>&gt;</span>Navigate up<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_menu_overflow_description&quot;</span>&gt;</span>More options<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_mode_done&quot;</span>&gt;</span>Done<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_activity_chooser_view_see_all&quot;</span>&gt;</span>See all<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_activitychooserview_choose_application&quot;</span>&gt;</span>Choose an app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_capital_off&quot;</span>&gt;</span>OFF<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_capital_on&quot;</span>&gt;</span>ON<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_alt_shortcut_label&quot;</span>&gt;</span>Alt+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_ctrl_shortcut_label&quot;</span>&gt;</span>Ctrl+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_delete_shortcut_label&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_enter_shortcut_label&quot;</span>&gt;</span>enter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_function_shortcut_label&quot;</span>&gt;</span>Function+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_meta_shortcut_label&quot;</span>&gt;</span>Meta+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_shift_shortcut_label&quot;</span>&gt;</span>Shift+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_space_shortcut_label&quot;</span>&gt;</span>space<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_sym_shortcut_label&quot;</span>&gt;</span>Sym+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_prepend_shortcut_label&quot;</span>&gt;</span>Menu+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_search_hint&quot;</span>&gt;</span>Search…<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_searchview_description_clear&quot;</span>&gt;</span>Clear query<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_searchview_description_query&quot;</span>&gt;</span>Search query<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_searchview_description_search&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_searchview_description_submit&quot;</span>&gt;</span>Submit query<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_searchview_description_voice&quot;</span>&gt;</span>Voice search<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_shareactionprovider_share_with&quot;</span>&gt;</span>Share with<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_shareactionprovider_share_with_application&quot;</span>&gt;</span>Share with %s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_toolbar_collapse_description&quot;</span>&gt;</span>Collapse<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;androidx_startup&quot;</span>&gt;</span>androidx.startup<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>HelloWorldApp<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;appbar_scrolling_view_behavior&quot;</span>&gt;</span>com.google.android.material.appbar.AppBarLayout$ScrollingViewBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottom_sheet_behavior&quot;</span>&gt;</span>com.google.android.material.bottomsheet.BottomSheetBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottomsheet_action_collapse&quot;</span>&gt;</span>Collapse the bottom sheet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottomsheet_action_expand&quot;</span>&gt;</span>Expand the bottom sheet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottomsheet_action_expand_halfway&quot;</span>&gt;</span>Expand halfway<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottomsheet_drag_handle_clicked&quot;</span>&gt;</span>Drag handle double-tapped<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;bottomsheet_drag_handle_content_description&quot;</span>&gt;</span>Drag handle<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;character_counter_content_description&quot;</span>&gt;</span>Characters entered %1$d of %2$d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;character_counter_overflowed_content_description&quot;</span>&gt;</span>Character limit exceeded %1$d of %2$d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;character_counter_pattern&quot;</span>&gt;</span>%1$d/%2$d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;clear_text_end_icon_content_description&quot;</span>&gt;</span>Clear text<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;error_a11y_label&quot;</span>&gt;</span>Error: invalid<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;error_icon_content_description&quot;</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;exposed_dropdown_menu_content_description&quot;</span>&gt;</span>Show dropdown menu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;fab_transformation_scrim_behavior&quot;</span>&gt;</span>com.google.android.material.transformation.FabTransformationScrimBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;fab_transformation_sheet_behavior&quot;</span>&gt;</span>com.google.android.material.transformation.FabTransformationSheetBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;hide_bottom_view_on_scroll_behavior&quot;</span>&gt;</span>com.google.android.material.behavior.HideBottomViewOnScrollBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;icon_content_description&quot;</span>&gt;</span>Dialog Icon<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;item_view_role_description&quot;</span>&gt;</span>Tab<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_exceed_max_badge_text_suffix&quot;</span>&gt;</span>%1$s%2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_ref_typeface_brand_medium&quot;</span>&gt;</span>sans-serif-medium<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_ref_typeface_brand_regular&quot;</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_ref_typeface_plain_medium&quot;</span>&gt;</span>sans-serif-medium<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_ref_typeface_plain_regular&quot;</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_emphasized&quot;</span>&gt;</span>path(M 0,0 C 0.05, 0, 0.133333, 0.06, 0.166666, 0.4 C 0.208333, 0.82, 0.25, 1, 1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_emphasized_accelerate&quot;</span>&gt;</span>cubic-bezier(0.3, 0, 0.8, 0.2)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_emphasized_decelerate&quot;</span>&gt;</span>cubic-bezier(0.1, 0.7, 0.1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_emphasized_path_data&quot;</span>&gt;</span>M 0,0 C 0.05, 0, 0.133333, 0.06, 0.166666, 0.4 C 0.208333, 0.82, 0.25, 1, 1, 1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_legacy&quot;</span>&gt;</span>cubic-bezier(0.4, 0, 0.2, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_legacy_accelerate&quot;</span>&gt;</span>cubic-bezier(0.4, 0, 1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_legacy_decelerate&quot;</span>&gt;</span>cubic-bezier(0, 0, 0.2, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_linear&quot;</span>&gt;</span>cubic-bezier(0, 0, 1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_standard&quot;</span>&gt;</span>cubic-bezier(0.2, 0, 0, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_standard_accelerate&quot;</span>&gt;</span>cubic-bezier(0.3, 0, 1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;m3_sys_motion_easing_standard_decelerate&quot;</span>&gt;</span>cubic-bezier(0, 0, 0, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_clock_display_divider&quot;</span>&gt;</span>:<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_clock_toggle_content_description&quot;</span>&gt;</span>Select AM or PM<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_hour_24h_suffix&quot;</span>&gt;</span>%1$s hours<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_hour_selection&quot;</span>&gt;</span>Select hour<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_hour_suffix&quot;</span>&gt;</span>&quot;%1$s o&#x27;clock&quot;<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_minute_selection&quot;</span>&gt;</span>Select minutes<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_minute_suffix&quot;</span>&gt;</span>%1$s minutes<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_motion_easing_accelerated&quot;</span>&gt;</span>cubic-bezier(0.4, 0.0, 1.0, 1.0)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_motion_easing_decelerated&quot;</span>&gt;</span>cubic-bezier(0.0, 0.0, 0.2, 1.0)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_motion_easing_emphasized&quot;</span>&gt;</span>path(M 0,0 C 0.05, 0, 0.133333, 0.06, 0.166666, 0.4 C 0.208333, 0.82, 0.25, 1, 1, 1)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_motion_easing_linear&quot;</span>&gt;</span>cubic-bezier(0.0, 0.0, 1.0, 1.0)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_motion_easing_standard&quot;</span>&gt;</span>cubic-bezier(0.4, 0.0, 0.2, 1.0)<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_slider_range_end&quot;</span>&gt;</span>Range end<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_slider_range_start&quot;</span>&gt;</span>Range start<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_slider_value&quot;</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_am&quot;</span>&gt;</span>AM<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_clock_mode_description&quot;</span>&gt;</span>Switch to clock mode for the time input.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_hour&quot;</span>&gt;</span>Hour<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_minute&quot;</span>&gt;</span>Minute<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_pm&quot;</span>&gt;</span>PM<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_select_time&quot;</span>&gt;</span>Select time<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;material_timepicker_text_input_mode_description&quot;</span>&gt;</span>Switch to text input mode for the time input.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_badge_numberless_content_description&quot;</span>&gt;</span>New notification<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_icon_path_checked&quot;</span>&gt;</span>M14,18.2 11.4,15.6 10,17 14,21 22,13 20.6,11.6z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_icon_path_group_name&quot;</span>&gt;</span>icon<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_icon_path_indeterminate&quot;</span>&gt;</span>M13.4,15 11,15 11,17 13.4,17 21,17 21,15z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_icon_path_name&quot;</span>&gt;</span>icon path<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_path_checked&quot;</span>&gt;</span>M23,7H9C7.9,7,7,7.9,7,9v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V9C25,7.9,24.1,7,23,7z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_path_group_name&quot;</span>&gt;</span>button<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_path_name&quot;</span>&gt;</span>button path<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_button_path_unchecked&quot;</span>&gt;</span>M23,7H9C7.9,7,7,7.9,7,9v14c0,1.1,0.9,2,2,2h14c1.1,0,2-0.9,2-2V9C25,7.9,24.1,7,23,7z M23,23H9V9h14V23z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_state_description_checked&quot;</span>&gt;</span>Checked<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_state_description_indeterminate&quot;</span>&gt;</span>Partially checked<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_checkbox_state_description_unchecked&quot;</span>&gt;</span>Not checked<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_chip_close_icon_content_description&quot;</span>&gt;</span>Remove %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_exceed_max_badge_number_content_description&quot;</span>&gt;</span>More than %1$d new notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_exceed_max_badge_number_suffix&quot;</span>&gt;</span>%1$d%2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_a11y_next_month&quot;</span>&gt;</span>Change to next month<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_a11y_prev_month&quot;</span>&gt;</span>Change to previous month<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_announce_current_range_selection&quot;</span>&gt;</span>Start date selection: %1$s – End date selection: %2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_announce_current_selection&quot;</span>&gt;</span>Current selection: %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_announce_current_selection_none&quot;</span>&gt;</span>none<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_cancel&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_confirm&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_date_header_selected&quot;</span>&gt;</span>%1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_date_header_title&quot;</span>&gt;</span>Select Date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_date_header_unselected&quot;</span>&gt;</span>Selected date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_day_of_week_column_header&quot;</span>&gt;</span>Column of days: %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_end_date_description&quot;</span>&gt;</span>End date %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_invalid_format&quot;</span>&gt;</span>Invalid format.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_invalid_format_example&quot;</span>&gt;</span>Example: %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_invalid_format_use&quot;</span>&gt;</span>Use: %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_invalid_range&quot;</span>&gt;</span>Invalid range.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_navigate_to_current_year_description&quot;</span>&gt;</span>Navigate to current year %1$d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_navigate_to_year_description&quot;</span>&gt;</span>Navigate to year %1$d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_out_of_range&quot;</span>&gt;</span>Out of range: %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_range_header_only_end_selected&quot;</span>&gt;</span>Start date – %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_range_header_only_start_selected&quot;</span>&gt;</span>%1$s – End date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_range_header_selected&quot;</span>&gt;</span>%1$s – %2$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_range_header_title&quot;</span>&gt;</span>Select Range<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_range_header_unselected&quot;</span>&gt;</span>Start date – End date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_save&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_start_date_description&quot;</span>&gt;</span>Start date %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_date_hint&quot;</span>&gt;</span>Date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_date_range_end_hint&quot;</span>&gt;</span>End date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_date_range_start_hint&quot;</span>&gt;</span>Start date<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_day_abbr&quot;</span>&gt;</span>d<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_month_abbr&quot;</span>&gt;</span>m<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_text_input_year_abbr&quot;</span>&gt;</span>y<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_today_description&quot;</span>&gt;</span>Today %1$s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_toggle_to_calendar_input_mode&quot;</span>&gt;</span>Switch to calendar input mode<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_toggle_to_day_selection&quot;</span>&gt;</span>Tap to switch to Calendar view<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_toggle_to_text_input_mode&quot;</span>&gt;</span>Switch to text input mode<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_picker_toggle_to_year_selection&quot;</span>&gt;</span>Tap to switch to year view<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_group_name&quot;</span>&gt;</span>circle_group<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_path_checked&quot;</span>&gt;</span>M4,16 A12,12 0 0,1 16,4 H16 A12,12 0 0,1 16,28 H16 A12,12 0 0,1 4,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_path_morphing&quot;</span>&gt;</span>M0,16 A11,11 0 0,1 11,5 H21 A11,11 0 0,1 21,27 H11 A11,11 0 0,1 0,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_path_name&quot;</span>&gt;</span>circle<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_path_pressed&quot;</span>&gt;</span>M2,16 A14,14 0 0,1 16,2 H16 A14,14 0 0,1 16,30 H16 A14,14 0 0,1 2,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_thumb_path_unchecked&quot;</span>&gt;</span>M8,16 A8,8 0 0,1 16,8 H16 A8,8 0 0,1 16,24 H16 A8,8 0 0,1 8,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_track_decoration_path&quot;</span>&gt;</span>M1,16 A15,15 0 0,1 16,1 H36 A15,15 0 0,1 36,31 H16 A15,15 0 0,1 1,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_switch_track_path&quot;</span>&gt;</span>M0,16 A16,16 0 0,1 16,0 H36 A16,16 0 0,1 36,32 H16 A16,16 0 0,1 0,16<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_timepicker_cancel&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;mtrl_timepicker_confirm&quot;</span>&gt;</span>OK<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;password_toggle_content_description&quot;</span>&gt;</span>Show password<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;path_password_eye&quot;</span>&gt;</span>M12,4.5C7,4.5 2.73,7.61 1,12c1.73,4.39 6,7.5 11,7.5s9.27,-3.11 11,-7.5c-1.73,-4.39 -6,-7.5 -11,-7.5zM12,17c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5zM12,9c-1.66,0 -3,1.34 -3,3s1.34,3 3,3 3,-1.34 3,-3 -1.34,-3 -3,-3z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;path_password_eye_mask_strike_through&quot;</span>&gt;</span>M2,4.27 L19.73,22 L22.27,19.46 L4.54,1.73 L4.54,1 L23,1 L23,23 L1,23 L1,4.27 Z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;path_password_eye_mask_visible&quot;</span>&gt;</span>M2,4.27 L2,4.27 L4.54,1.73 L4.54,1.73 L4.54,1 L23,1 L23,23 L1,23 L1,4.27 Z<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;path_password_strike_through&quot;</span>&gt;</span>M3.27,4.27 L19.74,20.74<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;registered&quot;</span>&gt;</span>已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;search_menu_title&quot;</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;searchbar_scrolling_view_behavior&quot;</span>&gt;</span>com.google.android.material.search.SearchBar$ScrollingViewBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;searchview_clear_text_content_description&quot;</span>&gt;</span>Clear text<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;searchview_navigation_content_description&quot;</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;side_sheet_accessibility_pane_title&quot;</span>&gt;</span>Side Sheet<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;side_sheet_behavior&quot;</span>&gt;</span>com.google.android.material.sidesheet.SideSheetBehavior<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;status_bar_notification_info_overflow&quot;</span>&gt;</span>999+<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;successful&quot;</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unregistered&quot;</span>&gt;</span>未注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unsuccessful&quot;</span>&gt;</span>用户名或注册码无效<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>基础解读string.xml文件</strong></p>
<p>这个文件是Android应用中的<strong>字符串资源文件</strong>（通常位于<code>res/values/strings.xml</code>），它包含了应用中使用的所有文本内容。</p>
<ul>
<li><p>文本基本结构</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span>  <span class="comment">&lt;!-- XML文件声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span>  <span class="comment">&lt;!-- 所有字符串的容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;键名&quot;</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  <span class="comment">&lt;!-- 每个&lt;string&gt;标签定义一个文本 --&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主要组成部分</p>
<ul>
<li><p>系统默认字符串</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_home_description&quot;</span>&gt;</span>Navigate home<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_up_description&quot;</span>&gt;</span>Navigate up<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这些是Android系统自动生成的默认字符串，主要用于Material Design组件（如<code>abc_</code>开头的），通常不需要修改它们。</p>
</li>
<li><p>应用自定义字符串</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>HelloWorldApp<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  <span class="comment">&lt;!-- 应用名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;registered&quot;</span>&gt;</span>已注册<span class="tag">&lt;/<span class="name">string</span>&gt;</span>      <span class="comment">&lt;!-- 中文状态文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;successful&quot;</span>&gt;</span>注册成功<span class="tag">&lt;/<span class="name">string</span>&gt;</span>    <span class="comment">&lt;!-- 成功提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;unsuccessful&quot;</span>&gt;</span>用户名或注册码无效<span class="tag">&lt;/<span class="name">string</span>&gt;</span>  <span class="comment">&lt;!-- 错误提示 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>这些是开发时添加的特定于应用的文本内容</p>
</li>
</ul>
</li>
</ul>
<p>在开发Android程序时，string.xml文件中的所有 字符串资源都在gen&#x2F;&#x2F;R.java文件的String类 中标识，每个字符串都有唯一的int类型的索引值。</p>
<p> 使用ApkTool反编译APK文件后， 所有的索引值都保存在与string.xml文件处于同一目录的public.xml文件中。 在以上代码中，“用户名或注册码无效” 的字符串名称为“unsuccessful” 。</p>
<p>打开public.xml文件，其内容如下。可以通过终端命令<code>cat oudir/res/values/string.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;anim&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_fade_in&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f010000&quot;</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_home_description&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_bar_up_description&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0001&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_menu_overflow_description&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0002&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_action_mode_done&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0003&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_activity_chooser_view_see_all&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0004&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_activitychooserview_choose_application&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0005&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_capital_off&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0006&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_capital_on&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0007&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_alt_shortcut_label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0008&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc_menu_ctrl_shortcut_label&quot;</span> <span class="attr">id</span>=<span class="string">&quot;0x7f0f0009&quot;</span> /&gt;</span></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<p> 在反汇编输出信息中没有程序真正的反汇编代码。</p>
<p>调整分析思路，接下来我们需要生成 Release版本的 APK文件。 </p>
<p>单击 Android Studio菜单项 “Build” → “Generate Signed APK” ，这个弹窗是 用于生成签名的 App Bundle 或 APK 的对话框。它提供了两种选择：</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/GenerateSignedAPK.png"></p>
<ol>
<li><p><strong>Android App Bundle</strong>:</p>
<ul>
<li><p>描述</p>
<p>生成一个签名的 App Bundle，用于上传到应用商店。App Bundle 提供了以下好处：</p>
<ul>
<li>更小的下载大小：通过按需下载功能和资源模块化，用户可以只下载他们需要的部分。</li>
<li>按需应用功能：允许用户在需要时下载额外的功能模块。</li>
<li>资源模块：仅包含资源（如图片、字符串等）的模块，可以根据设备需求动态加载。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>APK</strong>:</p>
<ul>
<li><strong>描述</strong>: 生成一个签名的 APK 文件，可以直接部署到设备上。这是传统的打包方式，适用于本地测试或直接分发给用户。</li>
</ul>
</li>
</ol>
<p><strong>总结：</strong></p>
<ul>
<li><strong>Android App Bundle</strong> 适合用于发布到应用商店，提供更好的用户体验和灵活性。</li>
<li><strong>APK</strong> 适合用于本地测试或直接分发给用户。</li>
</ul>
<p>选择“APK”，点击“下一步”，继续配置签名信息和其他设置。</p>
<p>以下是各个字段的详细说明：</p>
<ol>
<li>Module</li>
</ol>
<ul>
<li>描述: 显示当前选择的模块。</li>
<li>用途: 确保正在为正确的模块生成签名文件。</li>
</ul>
<ol start="2">
<li>Key store path</li>
</ol>
<ul>
<li><p>描述: 输入或选择密钥库文件的路径。</p>
</li>
<li><p>用途: 密钥库文件包含用于签名应用的私钥和证书。</p>
</li>
<li><p>选项</p>
<ul>
<li><p>Create new…: 创建一个新的密钥库文件。<img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%88%9B%E5%BB%BA%E6%96%B0%E5%AF%86%E9%92%A5%E5%BA%93.png"></p>
<ol>
<li><strong>Key store path</strong></li>
</ol>
</li>
<li><p><strong>描述</strong>: 输入或选择密钥库文件的路径。</p>
<ul>
<li><strong>用途</strong>: 指定密钥库文件存储的位置。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>Password</strong></li>
</ol>
<ul>
<li><strong>描述</strong>: 输入密钥库的密码，并确认密码。<ul>
<li><strong>用途</strong>: 用于保护密钥库文件的安全性。</li>
</ul>
</li>
</ul>
<ol start="3">
<li><strong>Alias</strong></li>
</ol>
<ul>
<li><strong>描述</strong>: 输入密钥别名，默认为 <code>key0</code>。<ul>
<li><strong>用途</strong>: 指定密钥库中特定密钥的名称。</li>
</ul>
</li>
</ul>
<ol start="4">
<li><strong>Password (for Key)</strong></li>
</ol>
<ul>
<li><strong>描述</strong>: 输入密钥的密码，并确认密码。<ul>
<li><strong>用途</strong>: 用于保护密钥的安全性。</li>
</ul>
</li>
</ul>
<ol start="5">
<li><strong>Validity (years)</strong></li>
</ol>
<ul>
<li><strong>描述</strong>: 设置密钥的有效期（以年为单位），默认为 25 年。<ul>
<li><strong>用途</strong>: 确定密钥的有效时间范围。</li>
</ul>
</li>
</ul>
<ol start="6">
<li><strong>Certificate</strong></li>
</ol>
<ul>
<li><strong>描述</strong>: 输入证书的相关信息。<ul>
<li><strong>用途</strong>: 用于验证应用的来源和安全性。</li>
</ul>
</li>
</ul>
<p><strong>Certificate 字段:</strong></p>
<ul>
<li><strong>First and Last Name</strong>: 输入你的全名。</li>
<li><strong>Organizational Unit</strong>: 输入你所在的组织单位。</li>
<li><strong>Organization</strong>: 输入你所在的组织名称。</li>
<li><strong>City or Locality</strong>: 输入你所在的城市或地区。</li>
<li><strong>State or Province</strong>: 输入你所在的州或省份。</li>
<li><strong>Country Code</strong>: 输入你所在的国家代码（例如，CN 表示中国）。</li>
</ul>
<p><strong>首次生成签名密钥可以使用命令</strong></p>
<p><code>keytool -genkeypair -v -keystore my-key.keystore -alias my-key -keyalg RSA -keysize 2048 -validity 10000</code></p>
<ul>
<li>按提示输入信息（密码、姓名等），生成 <code>my-key.keystore</code> 文件。 <ul>
<li><code>keytool</code>: 这是Java自带的一个命令行工具，用于管理密钥库以及密钥和证书条目。</li>
<li><code>-genkeypair</code> 或 <code>-genkey</code>（旧版本中的别名）：这是告诉<code>keytool</code>要生成一个新的密钥对。</li>
<li><code>-v</code>: 表示详细模式，它会使<code>keytool</code>在执行过程中打印出更多的信息。</li>
<li><code>-keystore my-key.keystore</code>: 指定生成的密钥库文件的名字为<code>my-key.keystore</code>。如果该文件不存在，则会创建一个新的文件；如果已经存在，则会在其中添加新的密钥条目。</li>
<li><code>-alias my-key</code>: 给生成的密钥指定一个别名<code>my-key</code>。在密钥库中，每个密钥都有一个唯一的别名，这样可以通过别名来引用具体的密钥。</li>
<li><code>-keyalg RSA</code>: 指定使用RSA算法来生成密钥对。RSA是一种常用的非对称加密算法。</li>
<li><code>-keysize 2048</code>: 设置密钥大小为2048位。一般来说，密钥长度越长，安全性越高，但同时也会增加计算负担。</li>
<li><code>-validity 10000</code>: 指定新生成的密钥的有效期为10000天。这意味着，在这之后，除非更新或重新生成密钥，否则密钥将不再有效。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Choose existing…: 选择一个现有的密钥库文件。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%AF%86%E9%92%A5%E5%BA%930.png"></p>
</li>
</ul>
<p><strong>选择输出目录</strong></p>
<ul>
<li>默认路径：<code>F:\AndroidProject\helloworld\app</code>（可手动修改存放位置）。</li>
</ul>
<p><strong>选择构建变体（Build Variants）</strong></p>
<ul>
<li><strong>debug</strong>：调试版本（未签名，用于开发测试）。</li>
<li><strong>release</strong>：发布版本（需签名，用于上架应用商店）。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E9%80%89%E6%8B%A9%E7%AD%BE%E5%90%8D%E6%9E%84%E5%BB%BA%E5%8F%98%E4%BD%93.png"></p>
<p>选择“release”，然后创建。</p>
<p>输出APK文件于路径<code>F:\AndroidProject\helloworld\app\release\app-release</code></p>
<p>使用ApkTool对app-release.apk进行反编译， 操作方法与对app-debug.apk的一样， 只不过要 将输出目录设置为outdir_rel。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/rel%E7%BC%96%E8%AF%91.png"></p>
<h3 id="修改smali文件的代码"><a href="#修改smali文件的代码" class="headerlink" title="修改smali文件的代码"></a>修改smali文件的代码</h3><ol>
<li><p><strong>用文本编辑器</strong>（如 VS Code、Notepad++）打开文件：<br><code>output_dir/res/values/strings.xml</code></p>
</li>
<li><p><strong>找到并修改</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>xxxx<span class="tag">&lt;/<span class="name">string</span>&gt;</span> → <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;app_name&quot;</span>&gt;</span>yyyyy<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="重新打包APK"><a href="#重新打包APK" class="headerlink" title="重新打包APK"></a>重新打包APK</h3><ol>
<li><p><strong>在终端执行</strong>：</p>
<p><code>apktool b output_dir -o modified.apk</code></p>
<ul>
<li><strong>作用</strong>：将修改后的资源重新打包为APK（未签名，无法直接安装）。</li>
</ul>
</li>
<li><p><strong>签名APK</strong>：</p>
</li>
</ol>
<p>​	<code>jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore F:\KeyStore\my_key.jks modified.apk key0</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%88%E7%AB%AF%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D.png"></p>
<p>……</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%88%E7%AB%AF%E7%AD%BE%E5%90%8D.png"></p>
<p>​	<strong>参数解析</strong></p>
<ol>
<li>**<code>jarsigner</code>**：<ul>
<li>这是 Java 提供的一个命令行工具，用于对 JAR 文件或 APK 文件进行签名。</li>
<li>它的主要作用是验证文件的完整性，并通过私钥生成数字签名。</li>
</ul>
</li>
<li>**<code>-verbose</code>**：<ul>
<li>表示以详细模式运行命令。</li>
<li>在签名过程中，<code>jarsigner</code> 会输出详细的日志信息，包括每个文件的处理状态、签名进度等。</li>
</ul>
</li>
<li>**<code>-sigalg SHA256withRSA</code>**：<ul>
<li>指定签名算法为 <code>SHA256withRSA</code>。</li>
<li>这意味着使用 RSA 算法结合 SHA-256 哈希函数来生成数字签名。</li>
<li><code>SHA256withRSA</code> 是一种安全性较高的签名算法，适合现代应用。</li>
</ul>
</li>
<li>**<code>-digestalg SHA-256</code>**：<ul>
<li>指定摘要算法为 <code>SHA-256</code>。</li>
<li>这是用来计算文件内容哈希值的算法。</li>
<li>摘要算法的作用是生成文件的唯一指纹（哈希值），以便在签名时验证文件是否被篡改。</li>
</ul>
</li>
<li>**<code>-keystore my-key.keystore</code>**：<ul>
<li>指定密钥库文件为 <code>my-key.keystore</code>。</li>
<li>密钥库文件是一个包含私钥和证书的容器。</li>
<li>在签名过程中，<code>jarsigner</code> 会从这个密钥库中读取私钥和证书。</li>
</ul>
</li>
<li>**<code>modified.apk</code>**：<ul>
<li>这是要签名的目标 APK 文件。</li>
<li>在签名之前，APK 文件通常已经通过 <code>apktool</code> 或其他工具重新打包完成。</li>
</ul>
</li>
<li>**<code>my-key</code>**：<ul>
<li>指定密钥库中的密钥别名。</li>
<li>在创建密钥库时，你为每个密钥对指定了一个别名（如 <code>my-key</code>）。</li>
<li><code>jarsigner</code> 会使用这个别名找到对应的私钥和证书。</li>
</ul>
</li>
</ol>
<h3 id="用Jadx查看APK代码-检查资源-ID-的方法"><a href="#用Jadx查看APK代码-检查资源-ID-的方法" class="headerlink" title="用Jadx查看APK代码(检查资源 ID 的方法)"></a>用Jadx查看APK代码(<strong>检查资源 ID 的方法</strong>)</h3><ol>
<li><strong>下载并启动Jadx</strong></li>
</ol>
<p>​	从 <a href="https://github.com/skylot/jadx">Jadx GitHub</a> 下载最新版，解压后运行 （Windows：<code>jadx-gui.bat</code>）。</p>
<ol start="2">
<li><p><strong>拖入APK分析</strong></p>
<p>打开jadx，将apk文件拖入窗口。</p>
<p>使用 Jadx 打开 <code>modified.apk</code> 并检查资源 ID 是否变化，可以通过以下步骤完成。</p>
<ul>
<li><u>资源 ID 是 Android 应用中用于引用资源（如字符串、图片、布局等）的唯一标识符，通常由编译器自动生成。如果资源结构未被破坏，资源 ID 一般不会发生变化。</u></li>
</ul>
<p><strong>资源 ID 通常在以下文件中定义或引用：</strong></p>
<ul>
<li><strong><code>R.java</code> 文件</strong>：这是 Android 编译器生成的资源映射文件，包含所有资源的 ID。</li>
<li><strong>代码中的资源引用</strong>：检查代码中是否仍然正确引用了资源。</li>
<li><strong><code>resources.arsc</code> 文件</strong>：这是 APK 中的二进制资源表，存储了资源 ID 和其对应的值。</li>
</ul>
</li>
</ol>
<p><strong>步骤 1：检查代码中的资源引用</strong></p>
<p>展开目录找到主逻辑文件，查看MainActivity.java。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* JADX INFO: Access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle bundle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(bundle);</span><br><span class="line">        EdgeToEdge.enable(<span class="built_in">this</span>);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), <span class="keyword">new</span> <span class="title class_">OnApplyWindowInsetsListener</span>() &#123; <span class="comment">// from class: com.example.test01.MainActivity$$ExternalSyntheticLambda0</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="comment">// androidx.core.view.OnApplyWindowInsetsListener</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">final</span> WindowInsetsCompat <span class="title function_">onApplyWindowInsets</span><span class="params">(View view, WindowInsetsCompat windowInsetsCompat)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> MainActivity.lambda$onCreate$<span class="number">0</span>(view, windowInsetsCompat);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关键点</strong>：<code>onCreate</code> 是Activity入口，<code>setContentView</code> 加载布局文件。</li>
<li>对比两个 APK 文件中的代码：<ul>
<li>如果代码中引用的资源 ID（如 <code>R.string.app_name</code>）一致，则说明资源引用正常。</li>
<li>如果引用发生了变化，可能需要进一步检查资源表或重新打包过程。</li>
</ul>
</li>
</ul>
<p><strong>步骤 2：查看 <code>R.java</code> 文件</strong>:</p>
<p>从文件数中导航到应用包中，找到R文件，查看其中的资源ID定义，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">black</span> <span class="operator">=</span> <span class="number">0x7f050021</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">white</span> <span class="operator">=</span> <span class="number">0x7f0502e6</span>;</span><br><span class="line"><span class="comment">/* JADX INFO: Added by JADX */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">abc_background_cache_hint_selector_material_dark</span> <span class="operator">=</span> <span class="number">0x7f050000</span>;</span><br><span class="line"><span class="comment">/* JADX INFO: Added by JADX */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">abc_background_cache_hint_selector_material_light</span> <span class="operator">=</span> <span class="number">0x7f050001</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对比两个 APK 文件的 <code>R.java</code> 文件：</p>
<ul>
<li><p>如果资源 ID（如 <code>0x7f0e0001</code>）保持一致，则说明资源 ID 未发生变化。</p>
</li>
<li><p>如果资源 ID 发生变化，则可能是因为资源结构被破坏或重新编译时生成了新的 ID。</p>
</li>
</ul>
<p><strong>步骤 3：查看 <code>resources.arsc</code> 文件</strong></p>
<p>打开<code> resources.arsc</code> 文件，查看其中的资源表。Jadx 会解析出资源名称和对应的 ID。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Resource ID: <span class="number">0x7f0e0001</span></span><br><span class="line">Resource Name: app_name</span><br><span class="line">Resource Value: Hello World</span><br></pre></td></tr></table></figure>

<p>对比两个 APK 文件的<code>resources.arsc</code>文件：</p>
<ul>
<li>如果资源 ID 和资源名称一致，则说明资源表未被破坏。</li>
<li>如果资源 ID 或名称发生变化，则可能是资源结构被破坏。</li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li><strong>资源 ID 的生成规则</strong>：<ul>
<li>资源 ID 是由 AAPT（Android Asset Packaging Tool）根据资源类型、包名和资源顺序生成的。</li>
<li>如果解包和重新打包过程中没有改变资源的顺序或类型，资源 ID 通常不会变化。</li>
</ul>
</li>
<li><strong>可能导致资源 ID 变化的情况</strong>：<ul>
<li>修改了资源文件（如新增、删除或重命名资源）。</li>
<li>使用了不同的编译工具或版本。</li>
<li>解包和重新打包过程中资源表被重新生成。</li>
</ul>
</li>
<li><strong>验证资源的完整性</strong>：<ul>
<li>如果资源 ID 发生变化，但功能正常，可以认为是正常的重新编译结果。</li>
<li>如果资源 ID 发生变化且功能异常，则需要检查资源文件是否被破坏。</li>
</ul>
</li>
</ol>
<h2 id="六、关键原理总结"><a href="#六、关键原理总结" class="headerlink" title="六、关键原理总结"></a>六、关键原理总结</h2><table>
<thead>
<tr>
<th>步骤</th>
<th>作用</th>
<th>工具链依赖</th>
</tr>
</thead>
<tbody><tr>
<td>解包APK</td>
<td>将二进制APK转为可编辑的资源&#x2F;Smali代码</td>
<td>Apktool、JDK</td>
</tr>
<tr>
<td>修改字符串</td>
<td>直接编辑XML资源文件，无需编译代码</td>
<td>文本编辑器</td>
</tr>
<tr>
<td>重新打包</td>
<td>将修改后的资源重新编译为APK（未签名）</td>
<td>Apktool</td>
</tr>
<tr>
<td>签名APK</td>
<td>确保APK来源可信，Android系统要求所有APK必须签名</td>
<td>keytool、jarsigner</td>
</tr>
<tr>
<td>Jadx反编译</td>
<td>将DEX字节码转为可读的Java代码，便于分析逻辑</td>
<td>Jadx</td>
</tr>
</tbody></table>
<h1 id="逆向工程流程"><a href="#逆向工程流程" class="headerlink" title="逆向工程流程"></a>逆向工程流程</h1><ol>
<li><strong>获取APK文件</strong><ul>
<li>通过应用市场或其他渠道下载APK文件。</li>
</ul>
</li>
<li><strong>反编译APK</strong><ul>
<li>使用APKTool将APK反编译，提取出资源和Manifest文件。</li>
<li>使用jadx或JD-GUI查看和分析Java代码。</li>
</ul>
</li>
<li><strong>分析代码和资源</strong><ul>
<li>查找关键功能、API调用和敏感数据处理。</li>
<li>了解应用逻辑，识别潜在的安全漏洞。</li>
</ul>
</li>
<li><strong>动态分析</strong><ul>
<li>使用Frida或Xposed对应用进行动态调试，观察运行时行为。</li>
<li>可以用来修改函数返回值或输入参数，以测试应用的安全性。</li>
</ul>
</li>
<li><strong>修改和重编译</strong><ul>
<li>如果需要，可以对代码或资源进行修改。</li>
<li>使用APKTool重编译APK，并进行签名。</li>
</ul>
</li>
<li><strong>测试修改后的APK</strong><ul>
<li>在模拟器或真实设备上安装并测试修改后的APK，确保功能正常。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>安卓逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>my plan</title>
    <url>/2025/03/26/my-plan/</url>
    <content><![CDATA[<h3 id="第一阶段：快速入门（1-2周）"><a href="#第一阶段：快速入门（1-2周）" class="headerlink" title="第一阶段：快速入门（1-2周）"></a><strong>第一阶段：快速入门（1-2周）</strong></h3><h4 id="目标：能修改简单APK，理解Smali基础。"><a href="#目标：能修改简单APK，理解Smali基础。" class="headerlink" title="目标：能修改简单APK，理解Smali基础。"></a><strong>目标</strong>：能修改简单APK，理解Smali基础。</h4><hr>
<ol>
<li><strong>Day 1-3：环境搭建与工具入门</strong>（已完成）<ul>
<li>安装工具：Android Studio（用于调试）、Jadx、Apktool、Frida、雷电模拟器。</li>
<li>任务：解包一个“Hello World”APK，修改字符串资源（如将“Hello”改为“Hi”），重新打包运行。</li>
<li>补基础：Java基础语法（变量、if-else、循环）。</li>
</ul>
</li>
<li><strong>Day 4-7：Smali语法速成</strong><ul>
<li>学习Smali核心语法：寄存器（v0, p0）、方法调用（invoke-virtual）、跳转指令（if-eqz）。</li>
<li>任务：用Apktool解包APK，修改Smali代码，实现按钮点击跳过广告。</li>
<li>补基础：Java类与对象、方法定义。</li>
</ul>
</li>
<li><strong>Day 8-14：逆向实战1——破解简单验证</strong><ul>
<li>目标：破解一个“会员验证”的Demo App（自己写或GitHub找）。</li>
<li>步骤：<ol>
<li>用Jadx找到验证逻辑（如<code>if (isVip())</code>）。</li>
<li>修改Smali代码中的条件判断（<code>if-eqz</code> → <code>if-nez</code>）。</li>
</ol>
</li>
<li>补基础：Java中的条件语句、方法调用。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="第二阶段：进阶逆向（3-4周）"><a href="#第二阶段：进阶逆向（3-4周）" class="headerlink" title="第二阶段：进阶逆向（3-4周）"></a><strong>第二阶段：进阶逆向（3-4周）</strong></h3><h4 id="目标：掌握动态调试，Hook基础，理解加密算法。"><a href="#目标：掌握动态调试，Hook基础，理解加密算法。" class="headerlink" title="目标：掌握动态调试，Hook基础，理解加密算法。"></a><strong>目标</strong>：掌握动态调试，Hook基础，理解加密算法。</h4><hr>
<ol>
<li><strong>Week 3：Frida动态Hook</strong><ul>
<li>学习Frida基础：Hook Java方法、修改返回值。</li>
<li>任务：Hook一个计算器App的加法函数，使其结果+1。</li>
<li>补基础：Java方法参数与返回值。</li>
</ul>
</li>
<li><strong>Week 4：逆向实战2——拦截网络请求</strong><ul>
<li>目标：分析一个带网络请求的App（如天气App），拦截API参数。</li>
<li>步骤：<ol>
<li>用Jadx搜索关键词（如“HttpURLConnection”）。</li>
<li>用Frida Hook加密函数，打印输入输出。</li>
</ol>
</li>
<li>补基础：Java网络请求基础、JSON解析。</li>
</ul>
</li>
<li><strong>Week 5：Native层逆向（ARM汇编入门）</strong><ul>
<li>学习IDA Pro基础：反编译so文件，阅读ARM汇编指令。</li>
<li>任务：分析一个简单的JNI函数（如<code>nativeAdd(int a, int b)</code>），修改汇编逻辑。</li>
<li>补基础：C语言函数与指针、ARM寄存器（R0-R3）。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="第三阶段：高级实战（5-8周）"><a href="#第三阶段：高级实战（5-8周）" class="headerlink" title="第三阶段：高级实战（5-8周）"></a><strong>第三阶段：高级实战（5-8周）</strong></h3><h4 id="目标：独立分析商业级App，处理混淆和加固。"><a href="#目标：独立分析商业级App，处理混淆和加固。" class="headerlink" title="目标：独立分析商业级App，处理混淆和加固。"></a><strong>目标</strong>：独立分析商业级App，处理混淆和加固。</h4><hr>
<ol>
<li><strong>Week 6-7：对抗混淆与加固</strong><ul>
<li>学习工具：<ul>
<li>脱壳工具（FDex2、DumpDex）处理加固。</li>
<li>反混淆工具（Deobfuscator）处理代码混淆。</li>
</ul>
</li>
<li>任务：脱壳某加固的App，找到关键逻辑入口。</li>
</ul>
</li>
<li><strong>Week 8：逆向实战3——完整破解案例</strong><ul>
<li>目标：选择一个中等难度App（如游戏修改或VIP解锁）。</li>
<li>步骤：<ol>
<li>静态分析找关键点（字符串搜索、交叉引用）。</li>
<li>动态调试验证逻辑。</li>
<li>修改Smali或Hook实现破解。</li>
</ol>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="第四阶段：查漏补缺（持续）"><a href="#第四阶段：查漏补缺（持续）" class="headerlink" title="第四阶段：查漏补缺（持续）"></a><strong>第四阶段：查漏补缺（持续）</strong></h3><h4 id="目标：系统化补足编程基础，提升代码审计能力。"><a href="#目标：系统化补足编程基础，提升代码审计能力。" class="headerlink" title="目标：系统化补足编程基础，提升代码审计能力。"></a><strong>目标</strong>：系统化补足编程基础，提升代码审计能力。</h4><hr>
<ol>
<li><strong>Java核心补漏</strong><ul>
<li>多线程：理解<code>Runnable</code>和<code>Handler</code>（逆向中常见异步逻辑）。</li>
<li>反射机制：<code>Class.forName()</code>、<code>Method.invoke()</code>（用于Hook复杂类）。</li>
</ul>
</li>
<li><strong>安卓系统原理</strong><ul>
<li>Binder机制：理解跨进程通信（逆向系统服务必备）。</li>
<li>组件生命周期：Activity启动流程（分析恶意App常用）。</li>
</ul>
</li>
<li><strong>密码学基础</strong><ul>
<li>常见算法：AES、RSA、MD5（逆向中识别加密逻辑）。</li>
<li>任务：用Frida Hook一个App的AES加密函数，输出明文密钥。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="学习资源与工具包"><a href="#学习资源与工具包" class="headerlink" title="学习资源与工具包"></a><strong>学习资源与工具包</strong></h3><h4 id="1-逆向工具包"><a href="#1-逆向工具包" class="headerlink" title="1. 逆向工具包"></a><strong>1. 逆向工具包</strong></h4><ul>
<li>工具合集：<a href="https://github.com/rednaga/APKiD">https://github.com/rednaga/APKiD</a></li>
<li>练习APK：GitHub搜索“android reverse engineering practice”。</li>
</ul>
<h4 id="2-书籍推荐"><a href="#2-书籍推荐" class="headerlink" title="2. 书籍推荐"></a><strong>2. 书籍推荐</strong></h4><ul>
<li>《Android软件安全权威指南》</li>
<li>《Frida Android SO逆向深入实践》</li>
</ul>
<h4 id="3-问答社区"><a href="#3-问答社区" class="headerlink" title="3. 问答社区"></a><strong>3. 问答社区</strong></h4><ul>
<li>看雪论坛（<a href="https://www.kanxue.com/">https://www.kanxue.com）</a>&#x2F;)</li>
<li>Stack Overflow（标签：android-reverse-engineering）</li>
</ul>
]]></content>
      <categories>
        <category>计划</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>安卓逆向工程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java编程语言</title>
    <url>/2025/03/23/Java/</url>
    <content><![CDATA[<h1 id="第一章-入门基础"><a href="#第一章-入门基础" class="headerlink" title="第一章 入门基础"></a><strong>第一章 入门基础</strong></h1><h2 id="1-1Java重要特点"><a href="#1-1Java重要特点" class="headerlink" title="1.1Java重要特点"></a><strong>1.1Java重要特点</strong></h2><ol>
<li>java语言是面向对象的（oop）</li>
<li>Java语言是健壮的。Java的强制型机制、异常处理、垃圾的自动手机等是Java程序健壮性的重要保证。</li>
<li>Java语言跨平台性的（一个java文件在编译后的class文件可以在多个不同操作系统上运行）</li>
<li>Java语言是解释性的</li>
</ol>
<p>解释性语言：Javascript，PHP，java ，编译语言：C&#x2F;C++</p>
<p>区别是：解释性语言，编译后的代码，不能直接被机器执行，需要解释器来执行；</p>
<p>编译性语言，编译后的代码，可以直接被机器执行</p>
<h2 id="1-2Java的开发工具"><a href="#1-2Java的开发工具" class="headerlink" title="1.2Java的开发工具"></a><strong>1.2Java的开发工具</strong></h2><ol>
<li>editplus、notepad++</li>
<li>Sublime Text</li>
<li>IDEA</li>
<li>eclipes</li>
</ol>
<p>前期使用文本编辑器本，不太智能的工具（在面试和考试是一般都是手写代码），在一定了解后在使用IDEA和Eclipse开发工具</p>
<h2 id="1-3快速入门"><a href="#1-3快速入门" class="headerlink" title="1.3快速入门"></a><strong>1.3快速入门</strong></h2><p>需求说明：开发一个Hello.java程序，可以输出“hello，world~”</p>
<ol>
<li>开发步骤</li>
</ol>
<p>1）将Java代码编写在扩展名为.java的文件中</p>
<p>&#x2F;&#x2F;创建一个公有类，称为hello</p>
<p>&#x2F;&#x2F;{}大括号表示了一个类的开始和结束</p>
<p>public class hello{</p>
<p>&#x2F;&#x2F;主方法，程序的入口</p>
<p>public static void mian(String[] args){</p>
<p>&#x2F;&#x2F;输出“hello,world~”到屏幕上</p>
<p>&#x2F;&#x2F;注意不要忘记分号，表示语句结束</p>
<p>System.out.printIn(“hello,world~”)；</p>
<p>}</p>
<p>}</p>
<p>2）通过javac命令对该java文件进行编译，生成.class文件</p>
<p>在cmd终端中输入javac hello.java 运行</p>
<p>编译出hello.class文件（又称字节码文件）</p>
<p>3）通过java命令对.class文件进行运行</p>
<h2 id="1-4开发注意事项和细节说明"><a href="#1-4开发注意事项和细节说明" class="headerlink" title="1.4开发注意事项和细节说明"></a><strong>1.4开发注意事项和细节说明</strong></h2><ol>
<li>Java源文件以.java为扩展名。源文件的基本组成部分是类(class)</li>
<li>Java应用程序的执行入口是mian()方法，固定的书写模式：</li>
</ol>
<p>public static void mian(String[] args){…}</p>
<ol start="3">
<li>严格区分大小写</li>
<li>Java方法由一条条语句构成，每个语句的结束都是“;”</li>
<li>大括号都是成对出现，缺一不可，养成习惯先写{}，再写代码</li>
<li>一个源文件最多只能有一个public类。其他类的个数不限</li>
</ol>
<p>每一个类编译后都会生成对应的字节码文件</p>
<ol start="7">
<li>如果源文件中包含了public类，则文件名必须以该类名命名</li>
<li>可以将main()方法写在非public类中，然后指定运行非public类，这样入口方法就是非public类的main方法</li>
</ol>
<h2 id="1-5转义字符"><a href="#1-5转义字符" class="headerlink" title="1.5转义字符"></a><strong>1.5转义字符</strong></h2><ol>
<li>\t：一个制表位，实现对齐功能</li>
<li>\n：换行符</li>
<li>\：一个\</li>
<li>\”：一个”</li>
<li>\’：一个’</li>
<li>\r：一个回车 System.out.println(“你好，再见~”);</li>
</ol>
<p>回车后光标到最前面，\r后面的内容会将前面的覆盖</p>
<h2 id="1-6注释（comment）"><a href="#1-6注释（comment）" class="headerlink" title="1.6注释（comment）"></a><strong>1.6注释（comment）</strong></h2><p>养成习惯使用注释解释代码含义，快捷键ctrl+&#x2F;</p>
<ol>
<li>单行注释：</li>
</ol>
<p>格式  &#x2F;&#x2F;注释文字</p>
<ol start="2">
<li>多行注释</li>
</ol>
<p>格式  &#x2F;<em>注释文字</em>&#x2F;</p>
<p>Ø 使用细节</p>
<p>1）被注释的文字，不会被JVM（java虚拟机）解释执行</p>
<p>2）多行注释里面不允许由多行注释嵌套</p>
<ol start="3">
<li>文档注释</li>
</ol>
<p>注释内容会被JDK提供的工具javadoc所解析，生成一套以网页形式体现的该程序文档说明，一般写在类。</p>
<p>格式  &#x2F;**</p>
<p>*@author 唐小唐</p>
<p>*@version 1.0</p>
<p>*&#x2F;</p>
<ol start="4">
<li>终端命令：</li>
</ol>
<p>javadoc -d文件夹名 -xx -yy Demo3.java</p>
<ol start="5">
<li>javadoc的标签</li>
</ol>
<table>
<thead>
<tr>
<th><em><strong>*标签*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*标签类型*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>@author</td>
<td>作者标识</td>
<td>包、 类、接口</td>
</tr>
<tr>
<td>@deprecated</td>
<td>标识当前API已经过期，仅为了保证兼容性依然存在，以此告之开发者不应再用这个API</td>
<td>包、类、接口、值域、构造函数、 方法</td>
</tr>
<tr>
<td></td>
<td>指明当前文档根目录的路径</td>
<td></td>
</tr>
<tr>
<td>@exception</td>
<td>标志一个类抛出的异常</td>
<td>构造函数、 方法</td>
</tr>
<tr>
<td></td>
<td>从直接父类继承的注释</td>
<td></td>
</tr>
<tr>
<td></td>
<td>链接到某个特定的成员对应的文档中</td>
<td>包、类、接口、值域、构造函数、 方法</td>
</tr>
<tr>
<td></td>
<td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td>
<td>包、类、接口、值域、构造函数、 方法</td>
</tr>
<tr>
<td>@param</td>
<td>方法的入参名及描述信息，如入参有特别要求，可在此注释</td>
<td>构造函数、方法</td>
</tr>
<tr>
<td>@return</td>
<td>对函数返回值的注释</td>
<td>方法</td>
</tr>
<tr>
<td>@see</td>
<td>引用,查看相关内容，如类、方法、变量等</td>
<td>包、类、接口、值域、构造函数、 方法</td>
</tr>
<tr>
<td>@serial</td>
<td>说明一个序列化属性</td>
<td></td>
</tr>
<tr>
<td>@serialData</td>
<td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td>
<td></td>
</tr>
<tr>
<td>@serialField</td>
<td>说明一个ObjectStreamField组件</td>
<td>@</td>
</tr>
<tr>
<td>@since</td>
<td>描述文本,API在什么程序的什么版本后开发支持</td>
<td>包、类、接口、值域、构造函数、 方法</td>
</tr>
<tr>
<td>@throws</td>
<td>构造函数或方法所会抛出的异常</td>
<td>构造函数、 方法</td>
</tr>
<tr>
<td></td>
<td>显示常量的值，该常量必须是static属性</td>
<td>静态值域</td>
</tr>
<tr>
<td>@version</td>
<td>版本号</td>
<td>包、 类、接口</td>
</tr>
</tbody></table>
<h2 id="1-7DOS（磁盘操作系统）命令"><a href="#1-7DOS（磁盘操作系统）命令" class="headerlink" title="1.7DOS（磁盘操作系统）命令"></a><strong>1.7DOS（磁盘操作系统）命令</strong></h2><ol>
<li>查看当前目录有什么</li>
</ol>
<p>dir dir d:\abc2\test200</p>
<ol start="2">
<li>切换到其他盘下：盘符号cd</li>
</ol>
<p>切换到c盘 cd &#x2F;D c:</p>
<ol start="3">
<li>切换到当前盘的其他目录下（使用相对路径和绝对路径）</li>
</ol>
<p>cd d:\abc2\test200  cd....\abc2\test200</p>
<ol start="4">
<li>切换到上一级：cd..</li>
<li>切换到根目录:cd\</li>
<li>查看指定目录下索引的子级目录：tree</li>
<li>清屏 cls</li>
<li>退出DOS exit</li>
<li>了解：md,rd,copy,del,echo,type,move</li>
</ol>
<h1 id="第二章-变量原理"><a href="#第二章-变量原理" class="headerlink" title="第二章 变量原理"></a><strong>第二章 变量原理</strong></h1><h2 id="2-1变量"><a href="#2-1变量" class="headerlink" title="2.1变量"></a><strong>2.1变量</strong></h2><p>概念：</p>
<p> 变量相当于内存中一个数据存储空间的表示，通过变量名访问到变量（值）。不论是使用哪种高级程序语言编写程序，变量都是其程序的基本组成单位。三个基本要素：类型+名称+值，例：int a&#x3D;1119;</p>
<p>Ø 使用注意事项：</p>
<ol>
<li>变量表示内存中的一个存储区域，不同变量，类型不同，占用的空间大小不同</li>
<li>该区域一定由子集的名称[变量名]和类型[数据类型]</li>
<li>变量必须先声明，后使用，即有顺序</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li>变量在同意作业域内不能重名</li>
<li>变量&#x3D;变量名+值+数据类型</li>
</ol>
<h2 id="2-2程序中-号的使用"><a href="#2-2程序中-号的使用" class="headerlink" title="2.2程序中+号的使用"></a><strong>2.2程序中+号的使用</strong></h2><ol>
<li>左右两边为数值型时，做加法运算</li>
<li>左右两边有一方为字符串时，做拼接运算</li>
<li>运算顺序，从左到右</li>
</ol>
<h2 id="2-3数据类型"><a href="#2-3数据类型" class="headerlink" title="2.3数据类型"></a><strong>2.3数据类型</strong></h2><ol>
<li>基本数据类型</li>
</ol>
<p>1）数值型：</p>
<p>a. 整数类型 存放整数：byte[1],short[2],int[4],long[8]（背）</p>
<p>Ø 使用细节：</p>
<p>a）java的整数类型有固定的范围和字段长度，不受具体OS[操作系统]的影响，以保证java程序的可移植性；</p>
<p>b）java整数常量（具体值）默认为int型，声明long型常量须后加‘l’或者‘L’</p>
<p>c）java程序中变量常声明为int型，除非不足以表示大数，才使用long</p>
<p>d）bit：计算机中最小的存储单位。byte计算机中基本存储单位元，1byte&#x3D;8bit</p>
<p>b. 浮点（小数）类型 float[4],double[8]（背）</p>
<p>Ø 使用细节：</p>
<p>a）java的浮点类型有固定的范围和字段长度，不受具体OS[操作系统]的影响，以保证java程序的可移植性；</p>
<p>b）java的浮点型常量（具体值）默认为double型，声明float型常量，须后加‘f’或者‘F’</p>
<p>c）有两种表示形式</p>
<p>十进制数形式：如 5.12  512.0f</p>
<p>科学计数法形式：如 5.12e2[]  5.12E-2[]</p>
<p>d）通常情况下使用double型，比float更精确</p>
<p>2）字符类型</p>
<p>a. 字符型char[2],double[8]存放单个字符（背）</p>
<p>Ø 使用细节：</p>
<p>a）字符常量使用但因阿红（‘’）括起来的单个字符</p>
<p>b）其中允许使用转义字符</p>
<p>c）char本质是一个整数，在输出时，是unicode码对应的字符</p>
<p>d）可以直接给char赋一个整数，输出时，会按照对应的unicode字符输出</p>
<p>e）char类型可以进行运算</p>
<p>b. 本质探讨</p>
<p>a）字符型存储在计算机中，需要将字符对应的码值（整数）找出来</p>
<p>存储：‘a’&#x3D;&gt;码值97  &#x3D;&gt;二进制（1100001）&#x3D;&gt;存储</p>
<p>读取：二进制（1100001）&#x3D;&gt;97  &#x3D;&gt;‘a’&#x3D;&gt;显示</p>
<p>b）字符和码值的对应关系是通过字符编码表决定的（规定好的）</p>
<p>ASCLII编码表，一个字节可以表示256个字符，只用了128个字符，不能表示所有字符</p>
<p>Unicode编码表，固定大小的编码使用两个字节来表示字符，字母和汉字统一都是占用两个字节，浪费空间</p>
<p>utf-8编码表，大小可变的编码，字母使用1个字节，汉字使用3个字节</p>
<p>GBK，可以表示汉字，而且范围广，字母使用1个字节，汉字使用2个字节</p>
<p>GB2312，可以表示汉字，GB2312&lt;GBK</p>
<p>big5码，繁体中文，台湾，香港</p>
<p>3）布尔型</p>
<p>a. boolean[1],存放true，false（背）</p>
<ol start="2">
<li>引用数据类型</li>
</ol>
<p>1）类（class）</p>
<p>2）接口（interface）</p>
<p>3）数组（[]）</p>
<ol start="3">
<li>java API文档</li>
</ol>
<p>应用程序编程接口，是java提供的基本编程接口（提供的类还有相关方法）。</p>
<p>中文在线文档：<a href="https://www.matools.com/">https://www.matools.com</a></p>
<ol start="4">
<li>基本数据自动类型转换</li>
</ol>
<p>精度小的类型自动转换为精度大的数据类型</p>
<p>数据类型按照精度（容量）大小排序（背）：</p>
<p>char &#x3D;&gt; int &#x3D;&gt; long &#x3D;&gt; float &#x3D;&gt; double </p>
<p>byte &#x3D;&gt; short &#x3D;&gt; int &#x3D;&gt; long &#x3D;&gt; float &#x3D;&gt; double </p>
<p>Ø 使用细节：</p>
<p>a）（byte，short）和char之间不会相互自动转换</p>
<p>b）byte，short，char三者之间计算时首先会转换为int类型</p>
<p>c）boolean不参与转换</p>
<p>d）自动提升原则：表达式结果的类型自动提升为操作数中给最大的类型</p>
<ol start="5">
<li>强制类型转换</li>
</ol>
<p>自动类型转换的逆过程，将容量大的数据转换为容量小的数据类型，使用时需要加上强制转换符（），但可能造成精度降低或溢出，需格外注意。</p>
<p>例：int i &#x3D; (int)1.9;</p>
<p>System.out.println(i);&#x2F;&#x2F;1</p>
<p>Ø 使用细节：</p>
<p>a）强转符号只针对于最近的擦欧总数有效，往往使用小括号提升优先级</p>
<p>b）char类型可以保存int的常量值，但不能保存int的变量值，需要强转</p>
<p>c）byte和short在运算时，当作int类型处理</p>
<ol start="6">
<li>基本数据类型和String类型的转换</li>
</ol>
<p>1）基本类型转String类型</p>
<p>将基本类型的值+“”即可</p>
<p>2）String类型转基本类型</p>
<p>通过基本类型的包装类调用parseXX方法即可</p>
<h1 id="第三章运算符"><a href="#第三章运算符" class="headerlink" title="第三章运算符"></a>第三章运算符</h1><h2 id="3-1基本介绍"><a href="#3-1基本介绍" class="headerlink" title="3.1基本介绍"></a><strong>3.1基本介绍</strong></h2><h3 id="3-1-1算术运算符"><a href="#3-1-1算术运算符" class="headerlink" title="3.1.1算术运算符"></a><strong>3.1.1算术运算符</strong></h3><table>
<thead>
<tr>
<th><em><strong>*操作符*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*例子*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法 - 相加运算符两侧的值</td>
<td>A + B 等于 30</td>
</tr>
<tr>
<td>-</td>
<td>减法 - 左操作数减去右操作数</td>
<td>A – B 等于 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘法 - 相乘操作符两侧的值</td>
<td>A * B等于200</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法 - 左操作数除以右操作数</td>
<td>B &#x2F; A等于2</td>
</tr>
<tr>
<td>％</td>
<td>取余 - 左操作数除以右操作数的余数</td>
<td>B%A等于0</td>
</tr>
<tr>
<td>++</td>
<td>自增: 操作数的值增加1</td>
<td>B++ 或 ++B 等于 21（区别详见下文）</td>
</tr>
<tr>
<td>–</td>
<td>自减: 操作数的值减少1</td>
<td>B– 或 –B 等于 19（区别详见下文）</td>
</tr>
</tbody></table>
<p>经典面试题</p>
<p>public class t1{</p>
<p>public void main(String[] args){</p>
<p>int i &#x3D; 1;</p>
<p>i &#x3D; i++;&#x2F;&#x2F;等同于temp &#x3D; i;temp &#x3D; i; i &#x3D; i + 1;</p>
<p>System.out.println(i);&#x2F;&#x2F;1</p>
<p>int i &#x3D;1;</p>
<p>i &#x3D; ++i&#x2F;&#x2F;等同于i &#x3D; i+1;temp &#x3D; i;i &#x3D; temp;</p>
<p>System.out.println(i)&#x2F;&#x2F;2</p>
<p>}</p>
<p>}</p>
<h3 id="3-1-2关系运算符"><a href="#3-1-2关系运算符" class="headerlink" title="3.1.2关系运算符"></a><strong>3.1.2关系运算符</strong></h3><p>关系运算符的结果都是boolean型，也就是要么为真（true），要么为假（false）</p>
<table>
<thead>
<tr>
<th><em><strong>*运算符*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*例子*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td>（A &#x3D;&#x3D; B）为假。</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td>(A !&#x3D; B) 为真。</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; B）为假。</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;B）为真。</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; &#x3D; B）为假。</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;&#x3D; B）为真。</td>
</tr>
</tbody></table>
<h3 id="3-1-3逻辑运算符"><a href="#3-1-3逻辑运算符" class="headerlink" title="3.1.3逻辑运算符"></a><strong>3.1.3逻辑运算符</strong></h3><p>假设布尔变量A为真，变量B为假</p>
<table>
<thead>
<tr>
<th><em><strong>*操作符*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*例子*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>称为逻辑与操作符。当且仅当两个操作数都为真，条件才为真。</td>
<td>（A&amp;B）为假</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>称为短路与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td>（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td>|</td>
<td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td>（A|B）为真</td>
</tr>
<tr>
<td>| |</td>
<td>称为短路或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td>（A | | B）为真。</td>
</tr>
<tr>
<td>^</td>
<td>称为逻辑异或操作符。如果热河两个操作数不相同，条件为真。</td>
<td>（A^B）为真</td>
</tr>
<tr>
<td>！</td>
<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td>！（A &amp;&amp; B）为真。</td>
</tr>
</tbody></table>
<p>区分&amp;&amp;和&amp;</p>
<ol>
<li>&amp;&amp;短路与：如果第一个条件为false，第二个条件不会判断，最终结果为false，效率高</li>
<li>&amp;逻辑与：如果第一个条件为false，第二个条件还是会继续判断，效率低</li>
<li>开发中，建议使用短路与&amp;&amp;，效率高</li>
</ol>
<p>区分||和|</p>
<ol>
<li>||短路或：如果第一个条件为true，第二个条件不会判断，最终结果为true，效率高</li>
<li>|逻辑或：不管第一个条件是否为true，第二个条件都会判断，效率低</li>
<li>开发中，建议使用短路或||，效率高</li>
</ol>
<p>例：</p>
<p>boolean x &#x3D; true;</p>
<p>boolean y &#x3D;false;</p>
<p>short z &#x3D; 46;</p>
<p>&#x2F;&#x2F;先比较，z&#x3D;&#x3D;46;为真，再自加，此时z&#x3D;47;</p>
<p>&#x2F;&#x2F;再y赋值为true，为真</p>
<p>&#x2F;&#x2F;短路与，都为真，于是执行z++，此时z&#x3D;48</p>
<p>if(( z++&#x3D;&#x3D;46)&amp;&amp;(y&#x3D;true)) z++;</p>
<p>&#x2F;&#x2F;赋值给x为false，为假</p>
<p>&#x2F;&#x2F;先自加，此时z&#x3D;49，为真</p>
<p>&#x2F;&#x2F;短路或，一假一真为真，于是执行z++，此时z&#x3D;50</p>
<p>if((x&#x3D;false)||(++z&#x3D;&#x3D;49)) z++;</p>
<p>&#x2F;&#x2F;最后输出z为50</p>
<p>System.out.println(“z&#x3D;”+z);</p>
<h3 id="3-1-4位运算符"><a href="#3-1-4位运算符" class="headerlink" title="3.1.4位运算符"></a><strong>3.1.4位运算符</strong></h3><table>
<thead>
<tr>
<th><em><strong>*操作符*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*例子*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>＆</td>
<td>如果相对应位都是1，则结果为1，否则为0</td>
<td>（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
<td>（A | B）得到61，即 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>如果相对应位值相同，则结果为0，否则为1</td>
<td>（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td>〜</td>
<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td>（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td>A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td>A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td>A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody></table>
<h3 id="3-1-5赋值运算符"><a href="#3-1-5赋值运算符" class="headerlink" title="3.1.5赋值运算符"></a><strong>3.1.5赋值运算符</strong></h3><table>
<thead>
<tr>
<th><em><strong>*操作符*</strong></em></th>
<th><em><strong>*描述*</strong></em></th>
<th><em><strong>*例子*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td>C &#x3D; A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td>+ &#x3D;</td>
<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td>C + &#x3D; A等价于C &#x3D; C + A</td>
</tr>
<tr>
<td>- &#x3D;</td>
<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td>C - &#x3D; A等价于C &#x3D; C - A</td>
</tr>
<tr>
<td>* &#x3D;</td>
<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td>C * &#x3D; A等价于C &#x3D; C * A</td>
</tr>
<tr>
<td>&#x2F; &#x3D;</td>
<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td>C &#x2F; &#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td>
</tr>
<tr>
<td>（％）&#x3D;</td>
<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td>C％&#x3D; A等价于C &#x3D; C％A</td>
</tr>
<tr>
<td>&lt;&lt; &#x3D;</td>
<td>左移位赋值运算符</td>
<td>C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td>
</tr>
<tr>
<td>&gt;&gt; &#x3D;</td>
<td>右移位赋值运算符</td>
<td>C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td>
</tr>
<tr>
<td>＆&#x3D;</td>
<td>按位与赋值运算符</td>
<td>C＆&#x3D; 2等价于C &#x3D; C＆2</td>
</tr>
<tr>
<td>^ &#x3D;</td>
<td>按位异或赋值操作符</td>
<td>C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td>
</tr>
<tr>
<td>| &#x3D;</td>
<td>按位或赋值操作符</td>
<td>C | &#x3D; 2等价于C &#x3D; C | 2</td>
</tr>
</tbody></table>
<h3 id="3-1-6三元运算符"><a href="#3-1-6三元运算符" class="headerlink" title="3.1.6三元运算符"></a><strong>3.1.6三元运算符</strong></h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>条件表达式？表达式1:表达式2;</p>
<p>运算规则</p>
<ol>
<li>如果条件表达式为true，运算后的结果是表达式1；</li>
<li>如果条件表达式为false，运算后的结果是表达式2；</li>
</ol>
<h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><p>a. 表达式1和表达式2要为可以赋给接收变量的类型（或可以自动转换）</p>
<p>b. 三元运算符可以转为if–else语句</p>
<h3 id="3-1-7运算符的优先级"><a href="#3-1-7运算符的优先级" class="headerlink" title="3.1.7运算符的优先级"></a><strong>3.1.7运算符的优先级</strong></h3><table>
<thead>
<tr>
<th><em><strong>*类别*</strong></em></th>
<th><em><strong>*操作符*</strong></em></th>
<th><em><strong>*关联性*</strong></em></th>
</tr>
</thead>
<tbody><tr>
<td>后缀</td>
<td>() [] . (点操作符)</td>
<td>左到右</td>
</tr>
<tr>
<td>一元</td>
<td>expr++ expr–</td>
<td>从左到右</td>
</tr>
<tr>
<td>一元</td>
<td>++expr –expr + - ～ ！</td>
<td>从右到左</td>
</tr>
<tr>
<td>乘性</td>
<td>* &#x2F;％</td>
<td>左到右</td>
</tr>
<tr>
<td>加性</td>
<td>+ -</td>
<td>左到右</td>
</tr>
<tr>
<td>移位</td>
<td>&gt;&gt; &gt;&gt;&gt; &lt;&lt;</td>
<td>左到右</td>
</tr>
<tr>
<td>关系</td>
<td>&gt; &gt;&#x3D; &lt; &lt;&#x3D;</td>
<td>左到右</td>
</tr>
<tr>
<td>相等</td>
<td>&#x3D;&#x3D; !&#x3D;</td>
<td>左到右</td>
</tr>
<tr>
<td>按位与</td>
<td>＆</td>
<td>左到右</td>
</tr>
<tr>
<td>按位异或</td>
<td>^</td>
<td>左到右</td>
</tr>
<tr>
<td>按位或</td>
<td>|</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑与</td>
<td>&amp;&amp;</td>
<td>左到右</td>
</tr>
<tr>
<td>逻辑或</td>
<td>| |</td>
<td>左到右</td>
</tr>
<tr>
<td>条件</td>
<td>？：</td>
<td>从右到左</td>
</tr>
<tr>
<td>赋值</td>
<td>&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td>
<td>从右到左</td>
</tr>
<tr>
<td>逗号</td>
<td>，</td>
<td>左到右</td>
</tr>
</tbody></table>
<p>小结：</p>
<p>括号&gt;单目运行&gt;算术运算符&gt;位移运算符&gt;比较运算符&gt;逻辑运算符&gt;三元运算符&gt;赋值运算符</p>
<h2 id="3-2-标识符的命名规则和规范"><a href="#3-2-标识符的命名规则和规范" class="headerlink" title="3.2 标识符的命名规则和规范"></a><strong>3.2 标识符的命名规则和规范</strong></h2><ol>
<li>命名规则（必须遵守）：</li>
</ol>
<p>a. 由26个英文字母大小写，0-9，或$组成</p>
<p>b. 不可以数字开头</p>
<p>c. 不可以使用关键字和保留字，但可以包含关键字和保留字</p>
<p>d. Java中严格区分大小写，长度无限制</p>
<p>e. 标识符不能包含空格</p>
<ol start="2">
<li>命名规范</li>
</ol>
<p>a. 包名：多单词组成时单词都小写</p>
<p>b. 类名、接口名：多单词组成时，所有单词首字母大写</p>
<p>c. 变量名、方法名：多单词组成时，第一个单词首字母小写，后面的每个单词的首字母大写</p>
<p>d. 常量名：所有字母都大写。多单词时每个单词用下划线连接</p>
<h2 id="3-3-键盘输入语句"><a href="#3-3-键盘输入语句" class="headerlink" title="3.3 键盘输入语句"></a><strong>3.3 键盘输入语句</strong></h2><p>用于接收用户输入的数据，需要java.util包中的一个扫描器（对象），就是Scanner</p>
<p>步骤：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.引入Scanner类所在的包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">input</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建Scanner对象，new创建一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//提示用户输入</span></span><br><span class="line"></span><br><span class="line">System.out.println(“请输入名称：”);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.接受用户输入，使用相关方法</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Scanner.next();<span class="comment">//接收用户输入字符串</span></span><br><span class="line"></span><br><span class="line">System.out.println(“请输入年龄：”);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Scanner.nextInt();<span class="comment">//接收用户输入int</span></span><br><span class="line"></span><br><span class="line">System.out.println(“请输入薪水：”);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">sal</span> <span class="operator">=</span> Scanner.nextDouble();<span class="comment">//接收用户输入double</span></span><br><span class="line"></span><br><span class="line">System.out.println(“姓名：” + name + “年龄：” + age + “薪水” + sal);</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-4-进制"><a href="#3-4-进制" class="headerlink" title="3.4 进制"></a><strong>3.4 进制</strong></h2><ol>
<li>进制介绍：</li>
</ol>
<p>a. 二进制：0,1，满2进1，以0b或0B开头</p>
<p>b. 十进制：0-9，满10进1</p>
<p>c. 八进制：0-7，满8进1，以数字0开头表示</p>
<p>d. 十六进制：0-9及A(10)-F(15)，满16进1，以0x或0X开头表示。此处A-F不区分大小写</p>
<ol start="2">
<li>进制的转换</li>
</ol>
<p>a. 第一组（其他进制转十进制）</p>
<p>规则：从最低位（右边）开始，将每个位上的数提出来，乘以x（x进制）的（位数-1）次方，然后求和。</p>
<p>a) 二进制转十进制</p>
<p>0b1110&#x3D;0<em>2^0+1</em>2^1+1<em>2^2+1</em>2^3&#x3D;16</p>
<p>b) 八进制转十进制</p>
<p>0126&#x3D;6<em>8^0+2</em>8^1+1*8^2&#x3D;86</p>
<p>c) 十六进制转十进制</p>
<p>0x19&#x3D;9<em>16^0+1</em>16^1&#x3D;25</p>
<p>b. 第二组</p>
<p>规则：将该数不断除以x（x进制）直到商为0为止，然后将每步得到的余数倒过来，就是对应的 x进制。</p>
<p>a) 十进制转二进制（注意前面用0填充补位，一个字节是八位）</p>
<p>34&#x3D;0b00100010</p>
<p>b) 十进制转八进制</p>
<p>131&#x3D;0203</p>
<p>c) 十进制转十六进制</p>
<p>237&#x3D;0xED</p>
<p>c. 第三组</p>
<p>规则：从低位开始，及那个二进制数每（八进制是三位，十六进制是四位）为一组，转成对应的x进制数即可。</p>
<p>a) 二进制转八进制</p>
<p>0b1(1)111(7)110(6)&#x3D;176</p>
<p>b) 二进制转十六进制</p>
<p>0b11(3)1111(15)1001(9)&#x3D;0x3F9</p>
<p>d. 第四组</p>
<p>规则：将每一位数转成对应的一个（八进制是三位，十六进制是四位）的二进制数即可。</p>
<p>a) 八进制转二进制</p>
<p>025&#x3D;0b010101</p>
<p>b) 十六进制转二进制</p>
<p>0x25&#x3D;0b00100101</p>
<h2 id="3-5-原码、反码、补码"><a href="#3-5-原码、反码、补码" class="headerlink" title="3.5 原码、反码、补码"></a><strong>3.5 原码、反码、补码</strong></h2><p>理解：</p>
<p>对于有符号的而言：</p>
<ol>
<li>二进制的最高位（最左边）是符号位：0是正数，1是负数</li>
<li>正数的原码、反码、补码都一样</li>
<li>负数的反码 &#x3D; 它的原码符号不变，其他位取反（0-&gt;1,1-&gt;0）</li>
<li>负数的补码 &#x3D; 它的反码+1，负数的反码 &#x3D; 负数的补码 - 1</li>
<li>0的反码、补码都是0</li>
<li>java没有无符号数，换言之，java中的数都是有符号的</li>
<li>在计算机运算的时候，都是以补码的方式来运算的</li>
<li>当我们要看运算结果的时候，要看他的原码</li>
</ol>
<h1 id="第四章-控制结构"><a href="#第四章-控制结构" class="headerlink" title="第四章 控制结构"></a><strong>第四章 控制结构</strong></h1><h2 id="4-1顺序控制"><a href="#4-1顺序控制" class="headerlink" title="4.1顺序控制"></a><strong>4.1顺序控制</strong></h2><p>程序默认控制顺序，从上往下，中间没有任何判断和跳转</p>
<p>java中定义变量是采用合法的向前引用。</p>
<h2 id="4-2-分支控制（if-else-switch）"><a href="#4-2-分支控制（if-else-switch）" class="headerlink" title="4.2 分支控制（if-else,switch）"></a><strong>4.2 分支控制（if-else,switch）</strong></h2><h3 id="4-2-1-if-else"><a href="#4-2-1-if-else" class="headerlink" title="4.2.1 if-else"></a><strong>4.2.1 if-else</strong></h3><p>让程序有选择的执行，分为三种：单分支、双分支、多分支。</p>
<h4 id="4-2-1-1-单分支if"><a href="#4-2-1-1-单分支if" class="headerlink" title="4.2.1.1 单分支if"></a><strong>4.2.1.1 单分支if</strong></h4><h5 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h5><p>if(条件表达式){</p>
<p>执行代码块；(可以多条语句)</p>
<p>}</p>
<p>说明：当条件表达式为true是，就会执行{}的代码。如果是false就不会执行。</p>
<p>特别说明，如果{}中只有一条语句，可以不用写{}，但是建议写上。</p>
<h4 id="4-2-1-2-双分支if-else"><a href="#4-2-1-2-双分支if-else" class="headerlink" title="4.2.1.2 双分支if-else"></a><strong>4.2.1.2 双分支if-else</strong></h4><h5 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h5><p>if(条件表达式){</p>
<p>执行代码块1；</p>
<p>}</p>
<p>else{</p>
<p>执行代码块2;</p>
<p>}</p>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>当条件表达式成立，即执行代码块1，否则执行代码块2。</p>
<p>特别说明，如果{}中只有一条语句，可以不用写{}，但是建议写上。</p>
<h5 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h5><p>编写程序，声明2个double型变量并赋值。判断第一个数大于10.0，且第二个数小于20.0，打印两数之和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.println(“please input num1:”);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line"></span><br><span class="line">System.out.println(“please input num2:”);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> sanner.nextDouble();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num1&gt;<span class="number">10.0</span> &amp;&amp; num2&lt;<span class="number">20.0</span>)&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(“num1+num2=”+(num1+num2));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scanner.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-1-3-多分支if-else"><a href="#4-2-1-3-多分支if-else" class="headerlink" title="4.2.1.3 多分支if-else"></a><strong>4.2.1.3 多分支if-else</strong></h4><h5 id="v-基本语法"><a href="#v-基本语法" class="headerlink" title="v 基本语法"></a>v 基本语法</h5><p>if(条件表达式){</p>
<p>执行代码块1；</p>
<p>}</p>
<p>else{</p>
<p>执行代码块2;</p>
<p>}</p>
<p>……</p>
<p>else{</p>
<p>执行代码块n;</p>
<p>}</p>
<h5 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h5><p>输入用户的信用分：</p>
<p>如果：</p>
<ol>
<li>信用分为100分时，输出信用极好；</li>
<li>信用分为（80,99]，输出信用一般；</li>
<li>信用分为[60,80]时，输出信用一般；</li>
<li>其他情况，输出信用不及格</li>
<li>请从键盘输入用户 的信用分，并加以判断。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;please input your num:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> scanner.nextInt();  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(num&gt;<span class="number">0</span> &amp;&amp; num&lt;=<span class="number">100</span> )&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>( num==<span class="number">100</span>)&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">&quot;your num is&quot;</span>+ num + <span class="string">&quot;信用极好&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;=<span class="number">99</span> &amp;&amp; num&gt;<span class="number">80</span>)&#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;your num is&quot;</span>+ num + <span class="string">&quot;xinyongyouxiu&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num&lt;=<span class="number">80</span> &amp;&amp; num&gt;=<span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​     System.out.println(<span class="string">&quot;your num is&quot;</span>+ num + <span class="string">&quot;xinyongyiban&quot;</span>);</span><br><span class="line"></span><br><span class="line">​     &#125;<span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;your num is&quot;</span>+ num + <span class="string">&quot;xinyongbujige&quot;</span>);&#125;</span><br><span class="line"></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">   System.out.println(<span class="string">&quot;please input num in 0-100,try again:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-1-4-嵌套分支if-else"><a href="#4-2-1-4-嵌套分支if-else" class="headerlink" title="4.2.1.4 嵌套分支if-else"></a><strong>4.2.1.4 嵌套分支if-else</strong></h4><p>在一个分支结构中有完整的嵌套了另一个完整的分支结构，里面的分支的结构成为内层分支，外层的分支结构称为外层分支。建议：不要超过三层，可读性不好。</p>
<h5 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h5><p>if(){</p>
<p>if(){</p>
<p>&#x2F;&#x2F;if-else</p>
<p>}else{</p>
<p>&#x2F;&#x2F;if-else</p>
<p>}</p>
<p>}</p>
<h5 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h5><p>出票系统：根据淡旺季的月份和游客的年龄，打印票价</p>
<p>4-10月旺季：成人（18-60）60元 儿童（&lt;18）半价 老人（&gt;60）1&#x2F;3</p>
<p>淡季：成人40元 其他20元</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入当前月份 &quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">mouth</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入当前年龄 &quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myScanner.nextInt();    </span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(mouth&gt;<span class="number">4</span> &amp;&amp; mouth &lt;<span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="comment">// System.out.println(&quot;当前为旺季&quot;)</span></span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span>(age&lt;<span class="number">18</span>)&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;儿童的票价是30元。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&gt;<span class="number">18</span> &amp;&amp; age&lt;<span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;成年人的票价是60元。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;老年人的票价是20元。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(age&gt;<span class="number">18</span> &amp;&amp; age&lt;<span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;成年人的票价是40元。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;其他人员的票价是20元。&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-1-5-switch分支结构"><a href="#4-2-1-5-switch分支结构" class="headerlink" title="4.2.1.5 switch分支结构"></a>4.2.1.5 switch分支结构</h4><h5 id="基本语法-4"><a href="#基本语法-4" class="headerlink" title="基本语法"></a>基本语法</h5><p>switch（表达式）{</p>
<p>case常量1:&#x2F;&#x2F;当……</p>
<p>语句块1;</p>
<p>break;&#x2F;&#x2F;跳出switch循环，不是结束程序</p>
<p>……</p>
<p>case常量n:</p>
<p>break;</p>
<p>default;</p>
<p>default语句块;</p>
<p>break;</p>
<p>}</p>
<h5 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h5><p>1、switch关键字，表示switch分支</p>
<p>2、表达式对应一个值</p>
<p>3、case常量1:当表达式的值等于常量1，就执行语句块1</p>
<p>4、break:表示退出switch</p>
<p>5、如果和case常量1匹配，就执行语句块1，如果没有匹配，就继续匹配case常量2</p>
<p>6、default子句是可选的，如果一个都没匹配上，就执行default</p>
<p>7、如果case常量1 执行完语句块1后没有break会不取匹配case常量2直接去执行语句块2，会顺序执行到switch结尾</p>
<p>8、表达式数据类型，应和case后的常量类型一致，或者可以自动转成相互比较的类型，比如输入的是字符，而常量是int</p>
<p>9、switch（表达式）的返回值必须是：（byte、short、int、char、enum、String）</p>
<p>10、case子句中的值必须是常量，而不能是变量</p>
<p>例题</p>
<p>1、编写一个程序，接受第一个字符比如a，b，……，其中a表示星期一，b表示星期二……，根据用户的输入显示相依的信息，要求使用switch语句完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入字符&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">char</span> <span class="variable">character</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">switch</span>(character)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周一&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周二&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周三&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周四&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周五&quot;</span>);  </span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周六&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;周七&quot;</span>);        </span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p>PS E:\myself\Java&gt; javac t1.java</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入字符</p>
<p>f</p>
<p>周六</p>
<p>周七</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入字符</p>
<p>a</p>
<p>周一</p>
<p>2、使用switch把小写类型的char型转为大写（键盘输入）。只转换a，b，c，其他的输出“other”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入需要转换的字母：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">char</span> <span class="variable">character</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">switch</span>(character)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;other&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p>PS E:\myself\Java&gt; javac t1.java</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入需要转换的字母：</p>
<p>a</p>
<p>A</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入需要转换的字母：</p>
<p>b</p>
<p>B</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入需要转换的字母：</p>
<p>t</p>
<p>other</p>
<p>3、根据用于指定月份，打印该月份所属的季节。3、4、5春季，6、7、8夏季，9、10、11秋季，12、1、2冬季（提示使用穿透）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入当前的月份：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">mouth</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">switch</span>(mouth)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;你输入的月份不对，请输入1-12月份&quot;</span>);        </span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p>PS E:\myself\Java&gt; javac t1.java</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入当前的月份：</p>
<p>13</p>
<p>你输入的月份不对，请输入1-12月份</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>请输入当前的月份：</p>
<p>1</p>
<p>冬季</p>
<h4 id="4-2-1-6-switch和if的比较"><a href="#4-2-1-6-switch和if的比较" class="headerlink" title="4.2.1.6 switch和if的比较"></a><strong>4.2.1.6 switch和if的比较</strong></h4><p>1、如果判断的具体数值不多，并且符合返回值按类型是：（byte、short、int、char、enum[美枚举]、String），建议使用switch；</p>
<p>2、其他情况：对区间判断，对结果为boolean类型判断，使用if，if的使用范围更广。</p>
<h2 id="4-3-循环控制（for-while-do-while-多重循环）"><a href="#4-3-循环控制（for-while-do-while-多重循环）" class="headerlink" title="4.3 循环控制（for,while,do-while,多重循环）"></a><strong>4.3 循环控制（for,while,do-while,多重循环）</strong></h2><h3 id="4-3-1-for循环控制"><a href="#4-3-1-for循环控制" class="headerlink" title="4.3.1 for循环控制"></a><strong>4.3.1 for循环控制</strong></h3><h4 id="基本语法-5"><a href="#基本语法-5" class="headerlink" title="基本语法"></a>基本语法</h4><p>for（循环变量初始化;循环判断条件;循环变量迭代）{</p>
<p>循环操作（可以多条语句）;</p>
<p>}</p>
<h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>1、for关键字，表示循环控制</p>
<p>2、四要素：循环变量初始化，循环判断条件，循环操作，循环变量迭代</p>
<p>3、基础操作，这里可以多条语句，也就是循环执行的代码</p>
<p>4、如果，循环操作（语句）只有一句语句，可以省略{}符号，建议不省略</p>
<p>5、循环判断条件时的返回的一个布尔值的表达式</p>
<p>6、for（;循环判断条件;）中的初始化和变量迭代可以写在其他地方，但是条件的两边的分号不能省略</p>
<p>7、循环初始值可以是多条初始化语句，但是要求类型一样，并且中间用逗号隔开，循环变量迭代也可以有多条变量迭代语句，中间用都好隔开</p>
<p>8、使用内存分析法，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>( ①&lt;u&gt;<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = <span class="number">0</span>&lt;/u&gt;;  ② &lt;u&gt;i &lt; count&lt;/u&gt;;  ④ &lt;u&gt;i++,j+=<span class="number">2</span>&lt;/u&gt;)&#123;</span><br><span class="line"></span><br><span class="line">​      ③&lt;u&gt;System.out.println(<span class="string">&quot;i=&quot;</span> + i + <span class="string">&quot;j=&quot;</span>+ j)&lt;/u&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意执行顺序</span></span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p>PS E:\myself\Java&gt; javac t1.java</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>i&#x3D;0j&#x3D;0</p>
<p>i&#x3D;1j&#x3D;2</p>
<p>i&#x3D;2j&#x3D;4</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;你好&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p>PS E:\myself\Java&gt; javac t1.java</p>
<p>PS E:\myself\Java&gt; java t1.java</p>
<p>你好0</p>
<p>你好1 </p>
<p>你好2 </p>
<p>你好3 </p>
<p>你好4 </p>
<p>你好5 </p>
<p>你好6 </p>
<p>你好7 </p>
<p>你好8 </p>
<p>你好9 </p>
<p>你好10</p>
<p>练习：</p>
<p>1、打印自定义范围之间所有的能被某整除的数，统计个数及总和。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//从用户端接收范围</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入范围开始的数：&quot;</span>);    </span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入范围结束的数：&quot;</span>);  </span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//被几整除</span></span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入整除数：&quot;</span>);  </span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span>(i % t == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;i = &quot;</span>+i);</span><br><span class="line"></span><br><span class="line">​        count += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​        sum += i;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;count = &quot;</span>+count);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;sum = &quot;</span>+sum);</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、完成下面的表达式的输出（自定义字符）</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250224200929404.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] agrs)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入操作字符：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="comment">// for(int i = 0; i &lt;= num; i++)&#123;</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">//  System.out.println(i+&quot;+&quot;+(num-i)+&quot;=&quot;+num);</span></span><br><span class="line"></span><br><span class="line">​    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> num, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++)&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(i+<span class="string">&quot;+&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i+j));</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-2-while循环"><a href="#4-3-2-while循环" class="headerlink" title="4.3.2 while循环"></a><strong>4.3.2 while循环</strong></h3><h4 id="v-基本语法-1"><a href="#v-基本语法-1" class="headerlink" title="v 基本语法"></a>v 基本语法</h4><p>循环初始化;</p>
<p>while(循环条件){</p>
<p>循环体（语句）;</p>
<p>循环变量迭代;</p>
<p>}</p>
<h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>1、while循环也有四要素</p>
<p>2、四要素的放置位置与for的不一样</p>
<p>3、返回值是布尔值的表达式</p>
<p>4、注意区分，while是<u>先判断再循环</u></p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>打印自定义范围之间所有能被自定义数字整除的数（使用while）</p>
<figure class="highlight plaintext"><figcaption><span>java.util.Scanner;</span></figcaption><table><tr><td class="code"><pre><span class="line">java:import java.util.Scanner;</span><br><span class="line">public class t1&#123;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">​    Scanner myScanner = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(&quot;请输入范围开始指：&quot;);</span><br><span class="line"></span><br><span class="line">​    int start = myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(&quot;请输入范围结束值：&quot;);</span><br><span class="line"></span><br><span class="line">​    int end = myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(&quot;请输入整除数：&quot;);</span><br><span class="line"></span><br><span class="line">​    int num = myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    while(start &lt;= end)&#123;</span><br><span class="line"></span><br><span class="line">​      if (start % num == 0)  &#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(&quot;n=&quot;+ start);</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​      start++;//位置在哪儿很重要</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    System.out.println(&quot;结束&quot;);</span><br><span class="line"></span><br><span class="line">​    myScanner.close();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-3-3-do…while循环控制"><a href="#4-3-3-do…while循环控制" class="headerlink" title="4.3.3  do…while循环控制"></a><strong>4.3.3  do…while循环控制</strong></h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p>循环变量初始化;</p>
<p>do{</p>
<p>循环体（语句）;</p>
<p>循环变量迭代;</p>
<p>}while(循环条件);</p>
<h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>1、do while是关键字</p>
<p>2、也有四要素但是放置位置不一样</p>
<p>3、先执行、再判断，也就是说，一定会执行一次</p>
<p>4、最后有一个分号;</p>
<p>5、注意do…while和while的区别</p>
<h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><p>1、打印自定义范围之间所有的能被某整除但不能被某整除的个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入范围开始指：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入范围结束值：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入能被整除数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">yesnum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入不能被整除数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">nonum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (start % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; start % <span class="number">3</span> != <span class="number">0</span> ) &#123;</span><br><span class="line"></span><br><span class="line">​        System.out.println(<span class="string">&quot;n=&quot;</span>+start);</span><br><span class="line"></span><br><span class="line">​        count++;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​      start++;</span><br><span class="line"></span><br><span class="line">​    &#125;<span class="keyword">while</span>(start &lt;= end);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;count=&quot;</span>+count);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1、如果t1不说n，则t0将一直说你好，直到t1说n为止</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;以下问题请回答y/n&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">char</span> <span class="variable">yn</span> <span class="operator">=</span><span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      yn = myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;你好&quot;</span>);      </span><br><span class="line"></span><br><span class="line">​    &#125;<span class="keyword">while</span>(yn == <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;再见&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="4-3-4-多重循环"><a href="#4-3-4-多重循环" class="headerlink" title="4.3.4 多重循环"></a><strong>4.3.4 多重循环</strong></h3><p>介绍：</p>
<p>1、讲一个循环放在另一个循环体内，就形成了嵌套循环。其中，for，while，do…while均可作为外层循环体和内层循环。（建议一般使用两层，最多不超过3层，否则，代码的可读性会很差）</p>
<p>2、实质上，嵌套循环就是把内层循环当成外层循环的循环体。当只有内层循环的循环条件为false时，才会完全跳出内层循环，才可以结束外层循环的当次循环，开始下一次的循环</p>
<p>3、设外层循环次数为m次，内层为n层，则内层循环体实际上需要执行m*n次</p>
<p>for(int i &#x3D; 1; i &lt;&#x3D; 7; i++){</p>
<p>for(int j &#x3D; 1; j &lt;&#x3D; 2; j++){</p>
<p>System.out.println(“ok~~~”);&#x2F;&#x2F;7*2&#x3D;14</p>
<p>}</p>
<p>}</p>
<p>例题练习：</p>
<p>1、统计三个班的成绩情况，每个班有五名同学，求出各个班的平均分和所有班级的平均分[学生从键盘输入]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入1班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    class1 += num1;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入2班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+j+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    class2 += num2;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入3班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>; c &lt;= <span class="number">5</span>; c++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+c+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    class3 += num3;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;各个班的平均成绩：&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;1班的平均成绩：&quot;</span>+(class1/<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;2班的平均成绩：&quot;</span>+(class2/<span class="number">5</span>));  </span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;3班的平均成绩：&quot;</span>+(class3/<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;各个班的平均成绩：&quot;</span>+((class1+class2+class3)/<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<p>2、统计出三个班及格人数，每个班有5名同学</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入1班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(num1 &gt;= <span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​      class1 += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入2班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+j+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(num2 &gt;= <span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​      class2 += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">class3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入3班的成绩&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>; c &lt;= <span class="number">5</span>; c++) &#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+c+<span class="string">&quot;位同学：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    <span class="type">int</span> <span class="variable">num3</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span>(num3 &gt;= <span class="number">60</span>)&#123;</span><br><span class="line"></span><br><span class="line">​      class3 += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;各个班的平均成绩：&quot;</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;1班的及格人数：&quot;</span>+class1);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;2班的及格人数：&quot;</span>+class2);  </span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;3班的及格人数：&quot;</span>+class3);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;所有班总共及格人数：&quot;</span>+(class1+class2+class3));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"> <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"> <span class="type">int</span> <span class="variable">classnum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">5</span>; j++)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入&quot;</span>+i+<span class="string">&quot;班&quot;</span>+<span class="string">&quot;第&quot;</span>+j+<span class="string">&quot;位同学的成绩：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> myScanner.nextInt();  </span><br><span class="line">    classnum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;班的平均成绩是：&quot;</span>+(classnum/<span class="number">5</span>));   </span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、打印出九九乘法表梯形</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"> <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//  System.out.println(&quot;请输入想要的层数：&quot;);</span></span><br><span class="line"><span class="comment">//  int layers = myScanner.nextInt(); </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">   System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>附加练习：</p>
<p>（星号金字塔）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">  System.out.println(<span class="string">&quot;请输入想要的层数：&quot;</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">layers</span> <span class="operator">=</span> myScanner.nextInt(); </span><br><span class="line">  <span class="comment">// 打印金字塔</span></span><br><span class="line">  <span class="comment">//有i层</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= layers; i++)&#123;</span><br><span class="line">    <span class="comment">//有多少个空格</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= layers-i; k++)&#123;</span><br><span class="line">      System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出*号</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * i -<span class="number">1</span>; j++)&#123;</span><br><span class="line">      System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（空心金字塔）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  System.out.println(<span class="string">&quot;请输入想要的层数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">layers</span> <span class="operator">=</span> myScanner.nextInt(); </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打印金字塔</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//有i层</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= layers; i++)&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//有多少个空格</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= layers-i; k++)&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="comment">//输出*号</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">2</span> * i -<span class="number">1</span>; j++)&#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">if</span> (j == <span class="number">1</span> || j == <span class="number">2</span> * i - <span class="number">1</span> || i == layers) &#123;</span><br><span class="line"></span><br><span class="line">​        System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">​      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">​        System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">​      &#125;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PS E:\myself\Java&gt; javac t1.java</span><br><span class="line"></span><br><span class="line">PS E:\myself\Java&gt; java t1.java </span><br><span class="line"></span><br><span class="line">请输入想要的层数：</span><br><span class="line"></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">​    *</span><br><span class="line"></span><br><span class="line">   \* *</span><br><span class="line"></span><br><span class="line">   \*  *</span><br><span class="line"></span><br><span class="line">  \*   *</span><br><span class="line"></span><br><span class="line">  \*    *</span><br><span class="line"></span><br><span class="line"> \*     *</span><br><span class="line"></span><br><span class="line"> \*      *</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="4-4-break"><a href="#4-4-break" class="headerlink" title="4.4 break"></a><strong>4.4 break</strong></h2><p>介绍：</p>
<p>break语句用于终止某个语句块的执行，一般使用在switch或者循环[for]中</p>
<p>v 基本语法：</p>
<p>{	……</p>
<p>break;</p>
<p>……</p>
<p>}</p>
<p>Ø 说明：</p>
<p>1、break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一句语句块</p>
<p>2、标签的基本使用：</p>
<p>label1:{……</p>
<p>label2:	{……</p>
<p>label3		{……</p>
<p>break label2;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>Ø 说明：</p>
<p>（1）break语句可以指定终止退出哪层</p>
<p>（2）label1是标签，名字有程序员指定</p>
<p>（3）break后指定到哪个label就退出到哪儿</p>
<p>（4）在实验的开发中，尽量不要使用标签</p>
<p>（5）如果没有指定label，就默认退出最近的循环体</p>
<p>附加：</p>
<p>随机生成数字可以使用</p>
<p>System.out.println((int)(Math.random()*100));</p>
<p>Ø 说明：</p>
<p>1、原始Math.randon()输出的是0.……</p>
<p>2、int是转换为整数，控制输出为整数</p>
<p>3、*100，是控制想要的位数，当前为输出两位数</p>
<h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>1、1-100以内的数求和，求出 当和第一次大于20的当前数[for+break]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">​    sum += i;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (sum &gt; <span class="number">20</span>) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PS E:\myself\Java&gt; javac t1.java</span><br><span class="line"></span><br><span class="line">PS E:\myself\Java&gt; java t1.java </span><br><span class="line"></span><br><span class="line">i=<span class="number">6</span></span><br></pre></td></tr></table></figure>



<p>2、实现登录验证，有三次机会，吐过用户名为“丁真”，密码“666”提示登陆成功，否则提示还有几次机会，请使用for+break完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">//现在外面定义字符串</span></span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">paw</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)&#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    name = myScanner.next();</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    paw = myScanner.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">//equals方法，将字符串的内容进行比较，返回的是boolean值</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (<span class="string">&quot;丁真&quot;</span>.equals(name) &amp;&amp; <span class="string">&quot;666&quot;</span>.equals(paw)) &#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;恭喜登陆成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">​      System.out.println(<span class="string">&quot;你还有&quot;</span>+(<span class="number">3</span>-i)+<span class="string">&quot;次机会。&quot;</span>); </span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5-continue"><a href="#4-5-continue" class="headerlink" title="4.5 continue"></a><strong>4.5 continue</strong></h2><p>介绍：</p>
<p>1、continue语句用于结束本次循环，继续执行下次循环</p>
<p>2、continue语句现在出现在多层嵌套的循环语句体中国，可以通过标签指明窈窕过的是哪一层循环，和break的使用规则一样</p>
<p>v 基本语法：</p>
<p>{	……</p>
<p>continue；</p>
<p>……</p>
<p>}</p>
<h2 id="4-6-return"><a href="#4-6-return" class="headerlink" title="4.6 return"></a><strong>4.6 return</strong></h2><p>介绍：</p>
<p>return使用在方法，表示跳出所在的方法。现只简单记录。</p>
<p>注意：如果return写在main方法中，退出程序。</p>
<h2 id="本章练习题"><a href="#本章练习题" class="headerlink" title="本章练习题"></a><strong>本章练习题</strong></h2><p>1、编程实现如下功能：</p>
<p>某人有100，000元，每经过一次路口，需要交费，规则如下：</p>
<p>1）当现金&gt;50000时，每次交5%；</p>
<p>2）当现金&lt;&#x3D;50000时，每次交1000</p>
<p>编程计算该人可以经过多少次路口，要求使用while，break方式完成。</p>
<p>讲解视频链接如下：</p>
<p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=148&vd_source=cbd0e7aa3299fa0fcc330c5ee16869bc">https://www.bilibili.com/video/BV1fh411y7R8?p=148&amp;vd_source=cbd0e7aa3299fa0fcc330c5ee16869bc</a></p>
<p>2、实现判断一个整数，属于哪个范围：大于0；小于0；等于0</p>
<p>3、判断一个年份是否为润年</p>
<p>4、判断一个整体是否是水仙花数，所谓水仙花数是指3位数，其各个位上数字立方和，等于其本身。例如：153&#x3D;1<em>1</em>1+5<em>5</em>5+3<em>3</em>3</p>
<p>5、输出1-100之间的不能被5整除的数，每5个一行</p>
<p>6、输出小写的a-z以及大写的Z-A</p>
<p>7、求出1-1&#x2F;2+1&#x2F;3-1&#x2F;4……1&#x2F;100的和</p>
<p>8、求 1+（1+2）+（1+2+3）+……+（1+2+……+100）的结果</p>
<h1 id="第五章-数组Array"><a href="#第五章-数组Array" class="headerlink" title="第五章 数组Array"></a>第五章 数组Array</h1><h2 id="5-1-数组"><a href="#5-1-数组" class="headerlink" title="5.1 数组"></a><strong>5.1 数组</strong></h2><p>介绍：</p>
<p>数组可以同时存放多个同一类型的数据。数组也是一种数据类型，是引用类型。</p>
<p>即：数组就是一组数据。</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>1、动态初始化</p>
<p>（1）数组的定义</p>
<p>数据类型 数组名[] &#x3D;  new 数据类型[大小]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">//创建了一个数组，名字a，存放5个int</span></span><br></pre></td></tr></table></figure>

<p>（2）数组的引用（使用&#x2F;访问&#x2F;获取数组元素）</p>
<p>数组名[下标&#x2F;索引&#x2F;index] 比如：访问数组的第三个元素 a[2]</p>
<p>数组的是从0开始的</p>
<p>（3）快速入门案例</p>
<p>循环输入5个成绩，保存到double数组，并输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">  <span class="type">double</span> a[] = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;请输入第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值：&quot;</span>);</span><br><span class="line"></span><br><span class="line">​    a[i] = myScanner.nextDouble();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line"></span><br><span class="line">​    System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个元素的值是：&quot;</span>+a[i]);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、动态初始化</p>
<p>（1）先声明数组</p>
<p>语法：数据类型 数组名[];也可以 数据类型[] 数组名;</p>
<p>int a[]; 或者 int[] a;</p>
<p>（2）创建数组</p>
<p>语法：数组名 &#x3D; new 数据类型[大小]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>3、静态初始化</p>
<p>（1）初始化数组</p>
<p>语法：数据类型 数组名[] &#x3D; {元素值,元素值……}</p>
<p>int a[]&#x3D;{1,2,3,……}</p>
<p>如果知道数组有多少元素，具体值用上面的用法，相当于：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">2</span>;a[<span class="number">1</span>]=<span class="number">5</span>;a[<span class="number">2</span>]=<span class="number">9</span>;</span><br></pre></td></tr></table></figure>

<p>（2）快速入门案例</p>
<p>double hens[] &#x3D; {1,2,3……}</p>
<p>等价于</p>
<p>hens[0]&#x3D;1;hens[1]&#x3D;2;……</p>
<h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><p>1、数组是多个相同数据类型的组合，实现对这些数据的统一的管理</p>
<p>2、数组中的元素可以是任何数据类型，包括基本类型和引用类型，但是不能混用</p>
<p>3、数组创建后，如果没有赋值，有默认值：int-0,short-0,byte-0,long-0,float-0.0,double-0.0,char\u0000,boolean-false,String-null</p>
<p>4、使用数组的步骤：声明数组并开辟空间；给数组各个元素赋值；使用数组。</p>
<p>5、数组的下标是从0开始的</p>
<p>6、数组的下标必须在指定范围内使用，否则报错：下标越界异常，比如int[] arr &#x3D;new int[5];则有效下标位0-4</p>
<p>7、数组属引用类型，数组型数据是对象（object）</p>
<p>应用案例：</p>
<p>1、创建一个char类型的26个元素的数组，分别放置 ‘A’ - ‘Z’ 。使用for循环访问所有元素并打印踹。提示：char类型数据运算 ‘A’ + 1 -&gt; ‘B’</p>
<p>2、请求出一个数组int[]的最大值{4，-1，9，10，23}，并得到对应的下标</p>
<p>3、请求出一个数组的和 和 平均值。</p>
<p>附加：</p>
<p>可以通过 数组名.length 得到数组的大小&#x2F;长度</p>
<h3 id="5-1-1数组赋值机制"><a href="#5-1-1数组赋值机制" class="headerlink" title="5.1.1数组赋值机制"></a>5.1.1数组赋值机制</h3><p>1.基本数据类型复制，这个值就是具体的数据，而且相互不影响</p>
<p>int n1 &#x3D; 2 ; int n2 &#x3D; n1;</p>
<p>2.数值在默认情况下时引用传递，赋的值是地址，赋值方式为引用赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1;</span><br></pre></td></tr></table></figure>

<h3 id="5-1-2数组拷贝"><a href="#5-1-2数组拷贝" class="headerlink" title="5.1.2数组拷贝"></a>5.1.2数组拷贝</h3><p>将int [] arr1 &#x3D; {1,2,3}; 拷贝到arr2，要求数据空间独立</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250225161641443.png"></p>
<p>输出结果为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250225161711208.png"></p>
<h3 id="5-1-3数组反转"><a href="#5-1-3数组反转" class="headerlink" title="5.1.3数组反转"></a>5.1.3数组反转</h3><p>将数组的元素内容反转</p>
<p>arr{11,22,33,44,55,66}→{66,55,44,33,22,11}</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">  <span class="type">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>&#125;;</span><br><span class="line">  System.out.println(<span class="string">&quot;反转前的数组&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length/<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="type">int</span> temp=arr[arr.length-<span class="number">1</span>-i];</span><br><span class="line">     arr[arr.length-<span class="number">1</span>-i] = arr[i];</span><br><span class="line">     arr[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;反转后的数组&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length;i++)&#123;</span><br><span class="line">    System.out.println(arr[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="5-1-4数组添加"><a href="#5-1-4数组添加" class="headerlink" title="5.1.4数组添加"></a>5.1.4数组添加</h3><p>实时动态的给数组添加元素效果，试试对数组扩容。</p>
<p>要求：</p>
<p>1.原始数组使用静态分配int[] arr&#x3D;{1,2,3}</p>
<p>2.增加的元素，直接放在数组的最后arr&#x3D;{1,2,3,4} arrNew&#x3D;{1,2,3,4}</p>
<p>3.用户可以通过如下方法来决定是否继续添加，添加成功，是否继续？y&#x2F;n</p>
<p>思路分析：</p>
<p>1.定义初始数组</p>
<p>2.定义一个新数组</p>
<p>3.依次遍历arr数组，依次将arr的元素拷贝到arrNew数组</p>
<p>4.将4赋给arrNew的最后一个元素</p>
<p>5.将arr指向arrNew，那么原来arr数组就被销毁</p>
<p>6.创建一个Scanner可以接受用户输入</p>
<p>7.因为用户什么时候推出不确定，使用do-while+break来控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class t1&#123;</span><br><span class="line">public static void main (String[] args)&#123;</span><br><span class="line">	int[] arr =&#123;1,2,3&#125;;</span><br><span class="line">	int[] arrNew= new int[arr.length + 1];</span><br><span class="line">	for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">		arrNew[i]=arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	arrNew[arrNew.length -1]=4;</span><br><span class="line">	arr =arrNew;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>课后练习题</p>
<p>第一个数组{1,2,3,4,5}，可以将该数组进行缩减，提示用户是否继续缩减，你每次缩减最后哪个元素。当只剩下最后一个元素，提示，不能再缩减。</p>
<h3 id="5-1-5排序介绍"><a href="#5-1-5排序介绍" class="headerlink" title="5.1.5排序介绍"></a>5.1.5排序介绍</h3><p>将多个数据，依照指定的顺序进行排序的过程</p>
<p>分类：</p>
<p>1.内部排序：</p>
<p>指将需要处理的所有数据都架子啊到内部存储器中进行排序。包括（叫唤式排序法、选择式排序法和插入式排序法）</p>
<p>2.外部排序法</p>
<p>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。包括（合并排序法和直接合并排序法）</p>
<h3 id="5-1-6冒泡排序"><a href="#5-1-6冒泡排序" class="headerlink" title="5.1.6冒泡排序"></a>5.1.6冒泡排序</h3><p>基本思想：通过对待排序序列从后向前（从下标较大的元素开始），依次比较相邻元素的值，若发现逆序则叫唤，式值较大的元素逐渐从前移向后部，就像水滴的气泡一样逐渐向上冒。</p>
<p>将五个无序：24，69，80，57，13，使用冒泡排序法将其拍成一个从小到大的有序数列。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250301200207533.png"></p>
<h3 id="5-1-7查找"><a href="#5-1-7查找" class="headerlink" title="5.1.7查找"></a>5.1.7查找</h3><p>分类：</p>
<p>1.顺序查找</p>
<p>2.二分查找</p>
<h2 id="5-2多维数组——二维数组"><a href="#5-2多维数组——二维数组" class="headerlink" title="5.2多维数组——二维数组"></a>5.2多维数组——二维数组</h2><p> 从形式上可以理解为int[ ][ ]</p>
<p>原来的一组数组的内个元素是一组数组，就构成了二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,&#125;,</span><br><span class="line">               &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,&#125;,</span><br><span class="line">               &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,&#125;,</span><br><span class="line">               &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,&#125;&#125;; </span><br><span class="line"><span class="comment">//输出二维图形</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">//遍历二维数组的每个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">        System.out.print(arr[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-1-声明及开空间"><a href="#5-2-1-声明及开空间" class="headerlink" title="5.2.1 声明及开空间"></a>5.2.1 声明及开空间</h3><p>语法：类型[][] 数组名 &#x3D; new 类型[大小][大小]</p>
<p>比如：int a[][] &#x3D; new int [2][3]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">	<span class="type">int</span>[][] arr = <span class="keyword">new</span>  <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">8</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">		System.out.print(arr[i][j]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  </span><br><span class="line"><span class="number">0</span>  <span class="number">8</span>  <span class="number">0</span>  </span><br></pre></td></tr></table></figure>

<h3 id="5-2-2-先声明再开空间"><a href="#5-2-2-先声明再开空间" class="headerlink" title="5.2.2 先声明再开空间"></a>5.2.2 先声明再开空间</h3><p>先声明：类型 数组名[][]；</p>
<p>再定义(开辟空间)数组名 &#x3D; new 类型[大小][大小]</p>
<p>赋值(有默认值，比如int 类型的就是0)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">//根据用户需求</span></span><br><span class="line">	<span class="type">int</span> arr[][];<span class="comment">//先声明二维数组</span></span><br><span class="line">    arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];<span class="comment">//再开空间</span></span><br><span class="line">    </span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">8</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j &lt; arr[i].length;j++)&#123;</span><br><span class="line">		System.out.print(arr[i][j]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  </span><br><span class="line"><span class="number">0</span>  <span class="number">8</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-3-列数不确定"><a href="#5-2-3-列数不确定" class="headerlink" title="5.2.3 列数不确定"></a>5.2.3 列数不确定</h3><p>按需求动态创建下面的二位数组，并输出</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">j &#x3D; 0</th>
<th align="center">j &#x3D; 1</th>
<th align="center">j &#x3D; 2</th>
</tr>
</thead>
<tbody><tr>
<td align="center">i &#x3D; 0</td>
<td align="center">1</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">i &#x3D; 1</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">i &#x3D; 2</td>
<td align="center">3</td>
<td align="center">3</td>
<td align="center">3</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">        <span class="comment">//先定义一个二维数组其中一维数组的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            arr[i]=<span class="keyword">new</span> <span class="title class_">int</span>[i+<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//定义一维数组中数组的个数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                arr[i][j]=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                System.out.print(arr[i][j]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">3</span>  </span><br></pre></td></tr></table></figure>

<h3 id="静态初始化1"><a href="#静态初始化1" class="headerlink" title="静态初始化1"></a>静态初始化1</h3><p>定义 类型 数组名[][] &#x3D; { {值1,值2……},{值1,值2……}{值1,值2,……} }</p>
<p>使用即可[ 固定方式访问]</p>
<p>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123; &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">111</span>&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>解读</p>
<p>定义了一个二维数组arr</p>
<p>arr有三个元素(每个元素都是一个数组)</p>
<p>第一个一维数组有三个元素，第二个一维数组有三个元素，第三个一维数组有一个元素</p>
<p>注意不可定义为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] arr = &#123; &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,<span class="number">111</span>&#125;</span><br></pre></td></tr></table></figure>

<p>执行会报错类型不匹配</p>
<h3 id="5-2-4-遍历"><a href="#5-2-4-遍历" class="headerlink" title="5.2.4 遍历"></a>5.2.4 遍历</h3><p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[][] = &#123; &#123;<span class="number">4</span>,<span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;-<span class="number">2</span>&#125; &#125;</span><br></pre></td></tr></table></figure>

<p>遍历该二维数组，并得到和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">int</span> arr[][] = &#123; &#123;<span class="number">4</span>,<span class="number">6</span>&#125;,&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">7</span>&#125;,&#123;-<span class="number">2</span>&#125; &#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;arr[i].length;j++)&#123;</span><br><span class="line">                sum += arr[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;遍历后的和是&quot;</span>+sum);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-5-使用细节和注意事项"><a href="#5-2-5-使用细节和注意事项" class="headerlink" title="5.2.5 使用细节和注意事项"></a>5.2.5 使用细节和注意事项</h3><p>1.一维数组的声明方式</p>
<p>int[] x 或者 int x[]</p>
<p>2.二维数组的声明方式有</p>
<p>int[][] 或者 int[] y[] 或者 int y[][]</p>
<p>3.二维数组实际上是由多个一维数组组成的，它的哥哥一维数组的长度可以相同，也可以不同。比如：map[][] 是一个二维数组</p>
<p>map[][] &#x3D; { {1,2},{3,4,5} }</p>
<p>由map[0] 是一个含有两个元素的一维数组，map[1]是一个含有三个元素的一维数组构成，也成为列数不等的二维数组。</p>
<h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>1.声明：int[] x,y[];一下啊哪些选项允许通过编译：</p>
<p>说明：x是int类型的一维数组，y是int类型的二维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a)x[<span class="number">0</span>] = y;<span class="comment">//错误int[][]-&gt;int</span></span><br><span class="line">b)y[<span class="number">0</span>] = x;<span class="comment">//正确int[]-&gt;int[]</span></span><br><span class="line">c)y[<span class="number">0</span>][<span class="number">0</span>] = x;<span class="comment">//错误 int[]-&gt;int</span></span><br><span class="line">d)x[<span class="number">0</span>][<span class="number">0</span>] = y;<span class="comment">//错误 x是一维数组x[][]错误</span></span><br><span class="line">e)y[<span class="number">0</span>][<span class="number">0</span>] = x[<span class="number">0</span>];<span class="comment">//正确 int-&gt;int</span></span><br><span class="line">f)x =y ;<span class="comment">//错误 int[][]-&gt;int[]</span></span><br></pre></td></tr></table></figure>

<p>2.已知有个升序的数组，要求插入一个元素，该数组顺序依然是升序，比如：[10,12,45,90]，添加23后，数组为[10,12,23,45,90]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">int</span>[] arr=&#123;<span class="number">10</span> ,<span class="number">12</span>,<span class="number">45</span>,<span class="number">90</span>&#125;;</span><br><span class="line">		<span class="type">int</span> <span class="variable">insrtNum</span> <span class="operator">=</span> <span class="number">23</span>;</span><br><span class="line">        <span class="comment">//定义添加的元素插入的位置</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//和数组中的元素比较，找到升序插入的位置</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(insrtNum&lt;=arr[i])&#123;</span><br><span class="line">				index=i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//如果没有找到index说明添加的元素比数组中的元素都大，那么他的位置应该和这个数组的长度一样</span></span><br><span class="line">		<span class="keyword">if</span> (index==-<span class="number">1</span>) &#123;</span><br><span class="line">			index=arr.length;			</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;index=&quot;</span>+index);</span><br><span class="line">        <span class="comment">//新定义一个数组，并开空间</span></span><br><span class="line">		<span class="type">int</span>[] arrNew=<span class="keyword">new</span> <span class="title class_">int</span>[arr.length+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arrNew.length;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i!=index)&#123;</span><br><span class="line">				arrNew[i]=arr[j];</span><br><span class="line">				j++;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				arrNew[i]=insrtNum;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrNew.length;i++)&#123;</span><br><span class="line">			System.out.println(arrNew[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">index=<span class="number">2</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="number">90</span></span><br></pre></td></tr></table></figure>

<h1 id="第六章-面向对象编程（基础）"><a href="#第六章-面向对象编程（基础）" class="headerlink" title="第六章 面向对象编程（基础）"></a>第六章 面向对象编程（基础）</h1><h2 id="6-1-类与对象"><a href="#6-1-类与对象" class="headerlink" title="6.1 类与对象"></a>6.1 类与对象</h2><h3 id="6-1-1-类与对象的关系"><a href="#6-1-1-类与对象的关系" class="headerlink" title="6.1.1 类与对象的关系"></a>6.1.1 类与对象的关系</h3><p>将所有的猫的特性（属性）提取出来</p>
<p><font color="red"><strong>类就是数据类型，抽象的，代表一类事物</strong></font></p>
<p>猫类（cat）-数据类型</p>
<p>属性，如：name、age、color……</p>
<p>行动，如：run、cry、eat……</p>
<p><strong><font color="red">对象就是具体的实例，实际的，代表一个具体事物</font></strong></p>
<p>对应猫对象</p>
<p>对象1（实例）、对象2（实例）……</p>
<p><font color="red">类是对象的模板，对象是类的一个个体，对应一个实例</font></p>
<p>案例：</p>
<p>小明养了两只小猫：一只叫小白，今年11岁，白色；一只叫小花，今年19岁，花色。请编写一个程序，当用户输入小猫的名字时，就显示该猫的名字，年龄，颜色。如果用户输入小猫名字错误，则显示小明没有这只猫。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建对象cat1</span></span><br><span class="line">		<span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">		cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">		cat1.age = <span class="number">11</span>;</span><br><span class="line">		cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line">		<span class="comment">//创建对象cat2</span></span><br><span class="line">		<span class="type">Cat</span> <span class="variable">cat2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">		cat2.name = <span class="string">&quot;小花&quot;</span>;</span><br><span class="line">		cat2.age = <span class="number">19</span>;</span><br><span class="line">		cat2.color = <span class="string">&quot;花色&quot;</span>;		</span><br><span class="line">		<span class="comment">//访问对象的属性</span></span><br><span class="line">		System.out.println(<span class="string">&quot;第一只猫信息&quot;</span>+cat1.name+<span class="string">&quot; &quot;</span>+</span><br><span class="line">							cat1.age+<span class="string">&quot; &quot;</span>+cat1.color);</span><br><span class="line">		System.out.println(<span class="string">&quot;第二只猫信息&quot;</span>+cat2.name+<span class="string">&quot; &quot;</span>+</span><br><span class="line">							cat2.age+<span class="string">&quot; &quot;</span>+cat2.color);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//定义一个类Cat -&gt;自定义的数据类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">	String name;<span class="comment">//名字</span></span><br><span class="line">	<span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">	String color;<span class="comment">//颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一只猫信息小白 <span class="number">11</span> 白色</span><br><span class="line">第二只猫信息小花 <span class="number">19</span> 花色</span><br></pre></td></tr></table></figure>

<h3 id="6-1-2-属性-成员变量"><a href="#6-1-2-属性-成员变量" class="headerlink" title="6.1.2 属性&#x2F;成员变量"></a>6.1.2 属性&#x2F;成员变量</h3><p>基本介绍</p>
<p>1.从概念或叫法上刊：成员变量 &#x3D; 属性 &#x3D; field（字段）（即成员变量是用来表示属性的）</p>
<p>2.属性是类的一个组成部分，一般是基本数据类型，也可是引用类型（对象，数组）。比如前面定义猫类的int age就是i属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">	String name;<span class="comment">//属性，成员变量，字段 field</span></span><br><span class="line">	<span class="type">double</span> price;</span><br><span class="line">	String color;</span><br><span class="line">	String[] master;<span class="comment">//属性可以是基本数据类型，也可以是引用类型（对象、数组）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-1-3-注意事项和使用细节"><a href="#6-1-3-注意事项和使用细节" class="headerlink" title="6.1.3 注意事项和使用细节"></a>6.1.3 注意事项和使用细节</h3><p>1.属性的定义语法同变量，示例：访问修饰符 属性类型 属性名;</p>
<p>简单介绍修饰符：控制属性的访问范围</p>
<p>四种访问修饰符：public、proctected、默认、private</p>
<p>2.属性的定义类型可以为任意类型，包含基本类型或引用类型</p>
<p>3.属性如果不赋值，有默认值，规则和数组一致</p>
<p>具体：int 0 , short 0 , byte 0 , long 0 , float 0.0 , double 0.0 , char\u0000, boolean false , String null. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//创建cat对象</span></span><br><span class="line">        <span class="comment">//cat1是对象名（对象引用）</span></span><br><span class="line">        <span class="comment">//new Cat() 创建对象空间（数据）才是真正的对象</span></span><br><span class="line">		<span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">		<span class="comment">//对象属性默认设置，遵守数组规则</span></span><br><span class="line">		System.out.println(<span class="string">&quot;第一只猫信息&quot;</span>+cat1.name+<span class="string">&quot; &quot;</span>+</span><br><span class="line">							cat1.age+<span class="string">&quot; &quot;</span>+cat1.color);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">	String name;<span class="comment">//名字</span></span><br><span class="line">	<span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">	String color;<span class="comment">//颜色</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一只猫信息<span class="literal">null</span> <span class="number">0</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="6-1-4-创建对象"><a href="#6-1-4-创建对象" class="headerlink" title="6.1.4 创建对象"></a>6.1.4 创建对象</h3><p>1.先声明再创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cat cat;<span class="comment">//声明对象cat</span></span><br><span class="line">cat = <span class="keyword">new</span> <span class="title class_">CAt</span>();<span class="comment">//创建</span></span><br></pre></td></tr></table></figure>

<p>2.直接创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure>

<h3 id="6-1-5-访问属性"><a href="#6-1-5-访问属性" class="headerlink" title="6.1.5 访问属性"></a>6.1.5 访问属性</h3><p>基本语法： 对象名.属性名;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cat.name;</span><br><span class="line">cat.age;</span><br><span class="line">cat.color;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-6内存分配机制"><a href="#6-1-6内存分配机制" class="headerlink" title="6.1.6内存分配机制"></a>6.1.6内存分配机制</h3><p>分析下述代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.age = <span class="number">10</span>;</span><br><span class="line">p1.mane = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> p1;<span class="comment">//把p1赋给p2，让p2指向p1</span></span><br><span class="line">System.out.println(p2.age);</span><br></pre></td></tr></table></figure>

<p>请问p2.age究竟是多少？画出内存图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250303194634094.png"></p>
<h3 id="6-1-7-java内存结构分析"><a href="#6-1-7-java内存结构分析" class="headerlink" title="6.1.7 java内存结构分析"></a>6.1.7 java内存结构分析</h3><ul>
<li><p>栈：一般存放基本数据类型（局部变量）</p>
</li>
<li><p>堆：存放对象（Cat cat、数组（引用类型）等）</p>
</li>
<li><p>方法区：常量池（常量、比如：字符串），类加载信息</p>
</li>
</ul>
<p>Java创建对象的流程简单分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.name = <span class="string">&quot;javk&quot;</span>;</span><br><span class="line">p.age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>1.先加载Person类信息（属性和方法信息，只会加载一次）</p>
<p>2.再堆中分配空间，进行默认初始化（看规则）</p>
<p>3.把地址赋给p，p就指向对象</p>
<p>4.进行指定初始化，比如p.name&#x3D; “jack”</p>
<p>练习题：</p>
<p>下述代码会输出什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Cat</span> <span class="variable">cat1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">		cat1.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">		cat1.age = <span class="number">11</span>;</span><br><span class="line">		cat1.color = <span class="string">&quot;白色&quot;</span>;</span><br><span class="line"></span><br><span class="line">		Cat cat2;</span><br><span class="line">		cat2 = cat1;</span><br><span class="line">		System.out.println(cat2.name);<span class="comment">//小白</span></span><br><span class="line">		</span><br><span class="line">		cat2.age = <span class="number">200</span>;</span><br><span class="line">		cat2 = <span class="literal">null</span>;<span class="comment">//此时cat2为空，不是一个对象了</span></span><br><span class="line">		System.out.println(cat1.age);<span class="comment">//200</span></span><br><span class="line">		System.out.println(cat2.age);<span class="comment">//出现异常</span></span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">double</span> price;</span><br><span class="line">	String color;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">小白</span><br><span class="line"><span class="number">200</span></span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException: Cannot read field <span class="string">&quot;age&quot;</span> because <span class="string">&quot;&lt;local2&gt;&quot;</span> is <span class="literal">null</span></span><br><span class="line">	at t1.main(t1.java:<span class="number">19</span>)</span><br></pre></td></tr></table></figure>



<h2 id="6-2-成员方法"><a href="#6-2-成员方法" class="headerlink" title="6.2 成员方法"></a>6.2 成员方法</h2><h3 id="6-2-1-基本介绍"><a href="#6-2-1-基本介绍" class="headerlink" title="6.2.1 基本介绍"></a>6.2.1 基本介绍</h3><p>在某些情况下，需要定义成员方法method（简称方法）。</p>
<p><strong>成员方法的定义</strong></p>
<p><strong>public 返回数据类型 方法名 （形参列表）{&#x2F;&#x2F;方法体</strong></p>
<p>​	<strong>语句;</strong></p>
<p>​	<strong>return 返回值;</strong></p>
<p><strong>}</strong></p>
<p>1.参数列表：表示成员方法输入cal(int n)</p>
<p>2.数据类型（返回类型）：表示成员方法输出，void表示没有返回值</p>
<p>3.方法主体：表示为了实现某一功能代码块</p>
<p>4.return语句不是必须的，除非有一个具体的返回数据类型</p>
<p><strong>成员方法的好处</strong></p>
<p>1.提高代码的复用性</p>
<p>2.可以将实现的细节封装起来，然后供其他用户调用即可</p>
<h3 id="6-2-2-快速入门"><a href="#6-2-2-快速入门" class="headerlink" title="6.2.2 快速入门"></a>6.2.2 快速入门</h3><p>1.添加speak成员方法输出我是一个好人</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">	<span class="comment">//方法使用</span></span><br><span class="line">    <span class="comment">//1.方法写好后，如果不去调用，就不会输出</span></span><br><span class="line">    <span class="comment">//2.先创建对象，然后调用方法即可</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p1.speak();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//方法（成员方法）</span></span><br><span class="line">    <span class="comment">//添加speak成员方法，输出“我是一个好人”</span></span><br><span class="line">	<span class="comment">//解读：</span></span><br><span class="line">    <span class="comment">//1.public 表示方法是公开</span></span><br><span class="line">    <span class="comment">//2.void 表示方法没有返回值</span></span><br><span class="line">    <span class="comment">//3.speak() speak是方法名，()形参列表</span></span><br><span class="line">    <span class="comment">//4.&#123;&#125;方法体，可以写我们要执行的代码</span></span><br><span class="line">    <span class="comment">//5.System.out.println(&quot;i am a good man&quot;);表示方输出一句话</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;i am a good man&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">i am a good man</span><br></pre></td></tr></table></figure>



<p>2.添加cal01成员方法，可以计算从1+……+1000的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		p1.cal01();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal01</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;=<span class="number">1000</span>;i++)&#123;</span><br><span class="line">			sum +=i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum=<span class="number">500500</span></span><br></pre></td></tr></table></figure>



<p>3.添加cal02成员方法，该方法可以接收一个数n，计算从1+……+n的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//调用，同时给n=5</span></span><br><span class="line">		p1.cal02(<span class="number">5</span>);</span><br><span class="line">        p1.cal02(<span class="number">10</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//(int n)形参列表，表示当前有一个形参n，可以接收用户输入</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal02</span><span class="params">(<span class="type">int</span> n)</span>&#123;		</span><br><span class="line">		<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			sum +=i;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum=<span class="number">15</span></span><br><span class="line">sum=<span class="number">55</span></span><br></pre></td></tr></table></figure>



<p>4.添加getSum成员方法，可以计算两个数的和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">returnRes</span> <span class="operator">=</span> p1.getSum(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;getSum=&quot;</span>+returnRes);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//1.public表示方法是公开的</span></span><br><span class="line">    <span class="comment">//2.int 表示方法执行后，返回一个int值</span></span><br><span class="line">    <span class="comment">//3.getSUm方法名</span></span><br><span class="line">    <span class="comment">//4.（int num1, int num2）形参列表，2个形参，可以接收用户传入的两个数</span></span><br><span class="line">    <span class="comment">//return sum; 表示把sum的值，返回</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">		<span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> num1 + num2;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getSum=<span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-3-方法的调用机制"><a href="#6-2-3-方法的调用机制" class="headerlink" title="6.2.3 方法的调用机制"></a>6.2.3 方法的调用机制</h3><p>以快速入门4为例</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250303212148854.png"></p>
<p>方法调用小结：</p>
<p>1.当程序执行到方法是，就会开辟一个独立的空间（栈空间）</p>
<p>2.放荡方法执行完毕，或执行星岛return语句时，就会返回</p>
<p>3.返回到调用方法的地方</p>
<p>4.返回后，继续执行方法后面的代码</p>
<p>5.当main方法（栈）执行完毕，整个程序退出</p>
<h3 id="6-2-4-注意事项和使用细节"><a href="#6-2-4-注意事项和使用细节" class="headerlink" title="6.2.4 注意事项和使用细节"></a>6.2.4 注意事项和使用细节</h3><ul>
<li>访问修饰符</li>
</ul>
<p>​	如果不写默认访问，有四种[public、protected、默认、private]</p>
<ul>
<li>返回类型</li>
</ul>
<p>​	1.一个方法最多有一个返回值</p>
<p>​	2.返回类型可以为任意类型，包含基本类型或引用类型（数组、对象）</p>
<p>​	3.如果方法要求有返回类型，则方法体中最后的执行语句必须为return值；而且要求返回类型必须和return的值类型一致或兼容</p>
<p>​	4.如果方法时void，则方法体中没有return语句，或者只写return；</p>
<ul>
<li>方法名</li>
</ul>
<p>​	遵循驼峰命名法，做好见名知义，表达出该功能的意思即可，比如 得到两个数的和 getSum</p>
<ul>
<li>形参列表</li>
</ul>
<p>​	1.一个方法可以有0个参数，也可以有多个参数，中间用逗号隔开</p>
<p>​	2.参数类型可以为任意类型，包含基本类型或引用类型</p>
<p>​	3.调用带参数的方法时，一定对应着参数列表传入形同类型或兼容类型 的参数</p>
<p>​	4.方法定义时的参数称为形式参数，简称形参；方法调用时的参数称为实际参数，称为实参，实参和形参的类型要一致或兼容、个数、顺序必须一致</p>
<ul>
<li>方法调用</li>
</ul>
<p>​	1.在同一个类中的方法调用：直接调用即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">		a.sayOK();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOK</span><span class="params">()</span>&#123;</span><br><span class="line">		speak();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	2.跨类中的方法A类调用B类方法：需要通过对象名调用。比如： 对象名.方法名（参数）;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">		a.sayOK();</span><br><span class="line">		a.hi1();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayOK</span><span class="params">()</span>&#123;</span><br><span class="line">		speak();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi1</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		b.hi();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	3.特别说明：跨类的方法调用和方法的访问修饰符相关</p>
<h2 id="6-3-成员方法传参机制"><a href="#6-3-成员方法传参机制" class="headerlink" title="6.3 成员方法传参机制"></a>6.3 成员方法传参机制</h2><h3 id="6-3-1-基本数据类型"><a href="#6-3-1-基本数据类型" class="headerlink" title="6.3.1 基本数据类型*"></a>6.3.1 基本数据类型*</h3><ul>
<li>传递的是值（值拷贝），形参的任何改变不影响实参。</li>
</ul>
<p>案例分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">		<span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">AA</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AA</span>();</span><br><span class="line">		obj.swap(a,b);</span><br><span class="line">		<span class="comment">//找的是main中的a和b</span></span><br><span class="line">		System.out.println(<span class="string">&quot;a = &quot;</span>+a+<span class="string">&quot;  b = &quot;</span>+b);</span><br><span class="line"></span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AA</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;a和b交换前的值：a = &quot;</span>+a+<span class="string">&quot;  b = &quot;</span>+b);</span><br><span class="line">		<span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = temp;</span><br><span class="line">		System.out.println(<span class="string">&quot;a和b交换前的值：a = &quot;</span>+a+<span class="string">&quot;  b = &quot;</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a和b交换前的值：a = <span class="number">10</span>  b = <span class="number">20</span></span><br><span class="line">a和b交换前的值：a = <span class="number">20</span>  b = <span class="number">10</span></span><br><span class="line">a = <span class="number">10</span>  b = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-2-引用数据类型"><a href="#6-3-2-引用数据类型" class="headerlink" title="6.3.2 引用数据类型"></a>6.3.2 引用数据类型</h3><ul>
<li>传递的是地址（传递也是值，但是值是地址），可以通过形参影响实参</li>
</ul>
<p>案例分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">		<span class="type">int</span>[] arr=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">		b.test100(arr);</span><br><span class="line">		System.out.println(<span class="string">&quot;main中的arr数组&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++)&#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test100</span> <span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">		arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;b类中的arr数组&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length ; i++)&#123;</span><br><span class="line">			System.out.print(arr[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b类中的arr数组</span><br><span class="line"><span class="number">200</span>  <span class="number">2</span>  <span class="number">3</span>  </span><br><span class="line">main中的arr数组</span><br><span class="line"><span class="number">200</span>  <span class="number">2</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-3-练习题"><a href="#6-3-3-练习题" class="headerlink" title="6.3.3 练习题"></a>6.3.3 练习题</h3><p>编写一个方法copyPerson，可以复制一个Person对啊ing，返回复制的对象。克隆对象，注意要求得到新对象和原来的对象是两个独立的对象，只是它们的属性相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		p.name = <span class="string">&quot;ling&quot;</span>;</span><br><span class="line">		p.age = <span class="number">21</span>;</span><br><span class="line">        <span class="comment">//创建tools</span></span><br><span class="line">		<span class="type">MyTools</span> <span class="variable">tools</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTools</span>();</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> tools.copyPerson(p);</span><br><span class="line">		<span class="comment">//至此p和p2是Person对象，但是是两个独立的对象，属性相同</span></span><br><span class="line">		System.out.println(<span class="string">&quot;p的属性 age = &quot;</span>+ p.age+<span class="string">&quot; name = &quot;</span>+ p.name);</span><br><span class="line">		System.out.println(<span class="string">&quot;p2的属性 age = &quot;</span>+ p2.age+<span class="string">&quot; name = &quot;</span>+ p2.name);</span><br><span class="line">        <span class="comment">//可以验证是否为同一个对象</span></span><br><span class="line">		System.out.println(p == p2);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;	</span><br><span class="line">		<span class="type">int</span> age;</span><br><span class="line">		String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTools</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> Person <span class="title function_">copyPerson</span><span class="params">(Person p)</span>&#123;	</span><br><span class="line">		<span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">		p2.age = p.age;</span><br><span class="line">		p2.name = p.name;</span><br><span class="line">		<span class="keyword">return</span> p2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">````</span><br><span class="line"></span><br><span class="line">### <span class="number">6.3</span><span class="number">.4</span> 方法递归调用</span><br><span class="line"></span><br><span class="line">**递归Recursion**</span><br><span class="line"></span><br><span class="line">方法自己调用自己，每次调用时传入不同的变量。有助于编程者解决复杂问题，同时可以让代码变得简洁。</span><br><span class="line"></span><br><span class="line">能解决的问题：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>各种数学问题：八皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮球的问题</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>各种算法中也会使用到递归，比如快排，归并排序二分查找，分治算法等</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>将用栈解决的问题–&gt;递归代码比较简洁</span><br><span class="line"></span><br><span class="line">案例分析</span><br><span class="line"></span><br><span class="line">理解调用机制</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>打印问题</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>阶乘问题</span><br><span class="line"></span><br><span class="line">````java</span><br><span class="line"><span class="comment">//输出什么？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">2</span>)&#123;</span><br><span class="line">        test(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;n =&quot;</span> + n);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">n =<span class="number">2</span></span><br><span class="line">n =<span class="number">3</span></span><br><span class="line">n =<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>内存分析图</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250305230339787.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n ==<span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> test(n-<span class="number">1</span>)*n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-5-重要规则"><a href="#6-3-5-重要规则" class="headerlink" title="6.3.5 重要规则"></a>6.3.5 重要规则</h3><p>1.执行一个方法，就创建一个新的受保护的独立空间（栈空间）</p>
<p>2.方法的局部变量是独立的，不会相互影响，比如n变量</p>
<p>3.如果方法中使用的时引用类型变量（比如数组、对象），就会共享该引用类型的数据</p>
<p>4.递归必须向退出的条件逼近，否则就是无线递归，出现StackOverflowError</p>
<p>5.当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕</p>
<h2 id="6-4-重载（overload）"><a href="#6-4-重载（overload）" class="headerlink" title="6.4 重载（overload）"></a>6.4 重载（overload）</h2><h3 id="6-4-1-基本介绍"><a href="#6-4-1-基本介绍" class="headerlink" title="6.4.1 基本介绍"></a>6.4.1 基本介绍</h3><p>java中允许同一类中，多个同名方法的存在，但要求 新参列表不一致！</p>
<p>比如：System.outprintln(); out是PrintStream类型</p>
<ul>
<li>重载的好处</li>
</ul>
<p>减轻了起名的麻烦</p>
<p>减轻了记名的麻烦</p>
<ul>
<li>快速入门</li>
</ul>
<p>案例：类：MyCalculate 方法：calculate</p>
<p>calculate(int n1,int n2)&#x2F;&#x2F;两个整数的和</p>
<p>calculate(int n1,double n2)&#x2F;&#x2F;一个整数，一个double的和</p>
<p>calculate(double n2,int n1)&#x2F;&#x2F;一个double，一个int的和</p>
<p>calculate(int n1,int n2,int n3)&#x2F;&#x2F;三个int的和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyCalculate</span> <span class="variable">mc</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyCalculate</span>();</span><br><span class="line">        System.out.println(mc.calculate(<span class="number">1.2</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(mc.calculate(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCalculate</span>&#123;</span><br><span class="line">    <span class="comment">//两个整数的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个整数，一个double的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1,<span class="type">double</span> n2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个double，一个int的和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculate</span><span class="params">(<span class="type">double</span> n1,<span class="type">int</span> n2)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//三个int的 和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> n1,<span class="type">int</span> n2,<span class="type">int</span> n3)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n1+n2+n3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4.2</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="6-4-2-注意事项和细节"><a href="#6-4-2-注意事项和细节" class="headerlink" title="6.4.2 注意事项和细节"></a>6.4.2 注意事项和细节</h3><p>1.方法名：必须相同</p>
<p>2.形参列表：必须不同，形参类型或个数或顺序，至少有一样不同，参数名无所谓，主要看类型</p>
<p>3.返回类型：无要求，不是构成重载的条件</p>
<h2 id="6-5-可变参数-Variable-parameters"><a href="#6-5-可变参数-Variable-parameters" class="headerlink" title="6.5 可变参数(Variable parameters)"></a>6.5 可变参数(Variable parameters)</h2><h3 id="6-5-1-快速入门"><a href="#6-5-1-快速入门" class="headerlink" title="6.5.1 快速入门"></a>6.5.1 快速入门</h3><p>java允许将同一个类 多个同名功能但参数个数不同的方法，封装成一个方法。</p>
<ul>
<li>基本语法</li>
</ul>
<p>访问修饰符 返回类型 方法名(数据类型… 形参名){</p>
<p>}</p>
<ul>
<li>案例</li>
</ul>
<p>类 HspMethod ，方法 sum【可以计算2个数的和，3个数的和，4……】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">HspMethod</span> <span class="variable">hpm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">        System.out.println(hpm.m(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span>&#123;</span><br><span class="line">    <span class="comment">//int... 表示的就是可变参数，类型是int，即可以接收多个int（0-多）</span></span><br><span class="line">    <span class="comment">//使用可变参数时，可以当作数组来使用 即nums 可以当作数组</span></span><br><span class="line">    <span class="comment">//遍历nums 求和即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span>...  nums)</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(&quot;接收到的参数个数是：&quot;+nums.length);</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            res+=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-5-2-注意事项和使用细节"><a href="#6-5-2-注意事项和使用细节" class="headerlink" title="6.5.2 注意事项和使用细节"></a>6.5.2 注意事项和使用细节</h3><p>1.可变参数的实参可以为0格或者任意多个</p>
<p>2.可变参数的实质就是数组，所以实参可以为数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">HspMethod</span> <span class="variable">hpm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        hpm.m(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">m</span><span class="params">(<span class="type">int</span>...  nums)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的参数个数是：&quot;</span>+nums.length);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">接收到的参数个数是：<span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>3.可变参数可以和普通类型的参数一起放在形参列表中，但必须保证可变参数在最后</p>
<p>4.一个形参列表只能出现一个可变参数</p>
<p>有三个方法，分别实现返回姓名和两门成绩（总分），返回姓名和三门可成绩（总分），返回姓名和五门可的成绩（总分）。封装成一个可变参数的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">HspMethod</span> <span class="variable">hpm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HspMethod</span>();</span><br><span class="line">        System.out.println(hpm.showScore(<span class="string">&quot;xiaoming&quot;</span>, <span class="number">45.1</span>,<span class="number">65.21</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HspMethod</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showScore</span><span class="params">(String name,<span class="type">double</span>...  score)</span>&#123;</span><br><span class="line">        <span class="type">double</span> totalScore=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;score.length;i++)&#123;</span><br><span class="line">            totalScore += score[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">&quot;有&quot;</span>+score.length+<span class="string">&quot;门课的总成绩是&quot;</span>+totalScore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">xiaoming有<span class="number">2</span>门课的总成绩是<span class="number">110.31</span></span><br></pre></td></tr></table></figure>



<h2 id="6-6-作用域-Scope"><a href="#6-6-作用域-Scope" class="headerlink" title="6.6 作用域(Scope)"></a>6.6 作用域(Scope)</h2><p>1.在java编程中，主要的变量就是属性（成员变量）和局部变量</p>
<p>2.局部变量一般是指在成员方法中定义的变量</p>
<p>3.全局变量：也就是属性，作用域为整个类体</p>
<p>   局部变量：也就是除了属性之外的其他变量，作用域定义它的代码块中</p>
<p>4.全局变量可以不赋值，直接使用，因为有默认值。但是局部变量必须赋值后才能使用，因为没有默认值。</p>
<p>总的来说就是根据大括号划分作用域。</p>
<ul>
<li>注意事项和细节使用</li>
</ul>
<p>1.属性和局部变量可以重名，访问时遵循就近原则</p>
<p>2.在同一作用域中，比如在同意成员方法中，两个局部变量，不能重名。</p>
<p>3.属性生命周期较长，伴随着对象的创建而创建，伴随着对象的销毁而销毁。局部变量，声明周期较短，伴随者它的代码块的执行而创建，伴随者代码块的结束而销毁。即在一次方法调用过程中。</p>
<p>4.作用于范围不一样</p>
<p>全部变量&#x2F;属性：可以被本类使用，或其他类使用（通过对象调用）</p>
<p>局部变量：只能在本类中对应的方法调用</p>
<p>5.修饰符不同</p>
<p>全局变量&#x2F;属性可以加修饰符</p>
<p>局部变量不可以加修饰符</p>
<h2 id="6-7-构造器-constructor"><a href="#6-7-构造器-constructor" class="headerlink" title="6.7 构造器(constructor)"></a>6.7 构造器(constructor)</h2><h3 id="6-7-1-基础介绍"><a href="#6-7-1-基础介绍" class="headerlink" title="6.7.1 基础介绍"></a>6.7.1 基础介绍</h3><ul>
<li>基本介绍</li>
</ul>
<p>​	构造方法又叫构造器(constructor)，是类的一种特殊的方法，它的主要作用是完成对  <strong>新对象  的初始化</strong>。</p>
<ul>
<li>特点</li>
</ul>
<ol>
<li>方法名和类名相同</li>
<li>没有返回值</li>
<li>在创建对象时，系统会自动的调用该类的构造器完成对对象的初始化</li>
</ol>
<ul>
<li>基本语法</li>
</ul>
<p>[修饰符] 方法名(形参列表){</p>
<p>​	方法体；</p>
<p>}</p>
<p>​	无参构造器快捷键alt+insert</p>
<ul>
<li>说明</li>
</ul>
<ol>
<li>构造器的修饰符可以是默认，也可以是public protected private</li>
<li>构造器没有返回值</li>
<li>方法名和类名一定要一样</li>
<li>参数列表 和 成员方法一样的规则</li>
<li>构造器的调用由系统完成</li>
</ol>
<h3 id="6-7-2-快速入门"><a href="#6-7-2-快速入门" class="headerlink" title="6.7.2 快速入门"></a>6.7.2 快速入门</h3><p>用构造方法来完成创建人类的对象时，直接指定这个对象的年龄和性别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法已被调用&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;p1的name=&quot;</span>+p1.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;p2的age=&quot;</span>+p1.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//没有返回值所以也不能写void</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pname,<span class="type">int</span> page)</span>&#123;</span><br><span class="line">        name = pname;</span><br><span class="line">        age = page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造方法已被调用</span><br><span class="line">p1的name=小明</span><br><span class="line">p1的age=<span class="number">21</span></span><br></pre></td></tr></table></figure>

<h3 id="6-7-3-注意事项和使用细节"><a href="#6-7-3-注意事项和使用细节" class="headerlink" title="6.7.3 注意事项和使用细节"></a>6.7.3 注意事项和使用细节</h3><ol>
<li><p>一个类可以定义多个不同的构造器，即构造器重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小溪&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法已被调用&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;p1的name=&quot;</span>+p1.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;p1的age=&quot;</span>+p1.age);</span><br><span class="line">        System.out.println(<span class="string">&quot;p2的age=&quot;</span>+p2.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//第一个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pname,<span class="type">int</span> page)</span>&#123;</span><br><span class="line">        name = pname;</span><br><span class="line">        age = page;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String pname)</span>&#123;</span><br><span class="line">        name = pname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造方法已被调用</span><br><span class="line">p1的name=小明</span><br><span class="line">p1的age=<span class="number">21</span></span><br><span class="line">p2的age=小溪</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造器名和类名要相同</p>
</li>
<li><p>构造器没有返回值</p>
</li>
<li><p>构造器是完成对象的初始化，并不是创建对象</p>
</li>
<li><p>在创建对象时，系统自动的调用该类的构造方法</p>
</li>
<li><p>如果程序员没有定义构造器，系统会自动给类生成一个默认无参构造器（也叫做默认构造器）。可以使用javap命令反编译。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">/*    </span></span><br><span class="line"><span class="comment">    默认构造器</span></span><br><span class="line"><span class="comment">    person()&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.一旦定义了自己的构造器，默认的构造器就覆盖了，就不能再使用默认的无参构造器，除非显式的定义一下；即：Person(){}</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>报错信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">t1.java:<span class="number">3</span>: 错误: 无法将类 Person中的构造器 Person应用到给定类型;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">                   ^</span><br><span class="line">  需要: String</span><br><span class="line">  找到:    没有参数</span><br><span class="line">  原因: 实际参数列表和形式参数列表长度不同</span><br><span class="line"><span class="number">1</span> 个错误</span><br></pre></td></tr></table></figure>

<p>应该再定义一个默认的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    Person()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.7.4 对象创建的流程分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">    String name;</span><br><span class="line">    Person(String n ,<span class="type">int</span> a)&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;&#125;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure>

<p>流程分析</p>
<p>动作一：在方法区中加载Person类，new的时候在堆中开辟Person类的空间，空间地址例如是ox1122，</p>
<p>动作二：默认初始化，一个存放age(默认值0)，一个存放name(默认值null)，然后读取赋给的值（显式初始化），age为90，name不变</p>
<p>动作三：构造器初始化，传入n&#x3D;小明，常量池编号例如为0x1133，指向堆中的name代替null，a&#x3D;20放进age代替90。</p>
<p>动作四：最后在栈中，p（指向）对象引用堆中的0x1122。可以理解为p是对象名，不是对象。对象在堆中。</p>
<h2 id="6-8-this"><a href="#6-8-this" class="headerlink" title="6.8 this"></a>6.8 this</h2><h3 id="6-8-1-基本介绍"><a href="#6-8-1-基本介绍" class="headerlink" title="6.8.1 基本介绍"></a>6.8.1 基本介绍</h3><p>java虚拟机会给每个对象分配this，代表当前对象。</p>
<ul>
<li>使用this解决变量命名问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//谁调用的就是谁的当前对象this</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        p1.info();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="comment">//this.name就是当前对象的属性name</span></span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="comment">//this.age就是当前对象的age</span></span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;\t&quot;</span>+age+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-8-2-注意事项和使用细节"><a href="#6-8-2-注意事项和使用细节" class="headerlink" title="6.8.2 注意事项和使用细节"></a>6.8.2 注意事项和使用细节</h3><ol>
<li>this关键字可以用来访问本类的属性、方法、构造器</li>
<li>this用于区分当前类的属性和局部变量</li>
<li>访问成员方法大语法：this.方法名(参数列表);</li>
<li>访问构造器语法：this(参数列表);  注意只能在构造器中使用（即只能在构造器中访问另外一个构造器）必须放在第一句</li>
<li>this不能再类定义的外部使用，只能在类定义的方法中使用</li>
</ol>
<p>案例</p>
<p>定义Person类，里面有name、age属性，并提供compareTo比较方法，用于判断是否和另一个人相等，提供测试类TestPerson用于测试，名字和年龄完全一致，就返回true，否则就返回false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">t1</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span>&#123;</span><br><span class="line">			<span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">            <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小明&quot;</span>,<span class="number">21</span>);</span><br><span class="line">            System.out.println(p1.compareTo(p2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareTo</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        <span class="comment">//if(this.name.equals(p.name)&amp;&amp;this.age==p.age)&#123;</span></span><br><span class="line">        <span class="comment">//    return true;</span></span><br><span class="line">        <span class="comment">//&#125;else&#123;</span></span><br><span class="line">        <span class="comment">//    return false;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(p.name) &amp;&amp; <span class="built_in">this</span>.age==p.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="第七章-面向对象编程（中级部分）"><a href="#第七章-面向对象编程（中级部分）" class="headerlink" title="第七章 面向对象编程（中级部分）"></a>第七章 面向对象编程（中级部分）</h1><p>工具说明：</p>
<p>IDE（集成开发环境）- IDEA</p>
<ul>
<li>IDEA介绍</li>
</ul>
<ol>
<li><p>DEA全程InteliJ IDEA</p>
</li>
<li><p>在业界被公认为最好的Java开发工具</p>
</li>
<li><p>IDEA是JetBrains公司的产品，总部位于捷克的首部布拉格</p>
</li>
<li><p>除了支持Java开发，还支持HTML、CSS、PHP、MySQL、Python等</p>
</li>
</ol>
<p>IDE（集成开发环境）- Eclipse</p>
<ul>
<li>Eclipse介绍</li>
</ul>
<ol>
<li>Eclipse是开放源代码的、基于JAva的可拓展开发平台</li>
<li>最初是由IBM公司耗资3000万美金开发的下一代IDE开发环境</li>
<li>2001年11月贡献给开源社区</li>
<li>Eclipse是目前最优秀的Java开发IDE之一</li>
</ol>
<h2 id="7-1-包"><a href="#7-1-包" class="headerlink" title="7.1 包"></a>7.1 包</h2><h3 id="7-1-1-基本介绍"><a href="#7-1-1-基本介绍" class="headerlink" title="7.1.1 基本介绍"></a>7.1.1 基本介绍</h3><ul>
<li><p>包的三大作用</p>
<ol>
<li>区分相同名字的类</li>
<li>当类很多的时候，可以很好的管理类</li>
<li>控制访问范围</li>
</ol>
</li>
<li><p>包的基本语法</p>
<ul>
<li><p>package com.hspedu;</p>
<p>说明：</p>
<ul>
<li>package关键字，表示打包</li>
<li>com.hspedu：表示包名</li>
</ul>
</li>
</ul>
</li>
<li><p>包的本质分析</p>
<ul>
<li>实际上就是创建不同的文件夹&#x2F;来保存类文件</li>
</ul>
</li>
<li><p>包的命名</p>
<ul>
<li>规则：只能包含数字、字母、下划线、小圆点但不能使用数字开头，不能是关键字或者保留字</li>
<li>规范：一般都是小写字母+小圆点：com.公司名.项目名.业务模块名比如：com.sina.user&#x2F;&#x2F;用户模块</li>
</ul>
<p>		    </p>
</li>
<li><p>常用的包</p>
<ul>
<li>java.lang.* &#x2F;&#x2F;lang包是基本包，默认引入，不需要再引入</li>
<li>java.util.* &#x2F;&#x2F;util包，系统提供的工具包，工具类，使用Scanner</li>
<li>java.net.* &#x2F;&#x2F;网络包，网络开发</li>
<li>java.awt.* &#x2F;&#x2F;是做Java的界面开发，GUI</li>
</ul>
</li>
</ul>
<h3 id="7-1-2-注意事项和使用细节"><a href="#7-1-2-注意事项和使用细节" class="headerlink" title="7.1.2 注意事项和使用细节"></a>7.1.2 注意事项和使用细节</h3><p>1.如何引用包</p>
<p>语法：import  包;</p>
<p>引入一个包的主要目的是使用该包下的类，不建议使用*导入</p>
<p>比如：</p>
<p>import java.util.Scanner;	&#x2F;&#x2F;就只是引入了一个类Scanner</p>
<p>import java.util.*;	&#x2F;&#x2F;表示将java.util包所有都引入</p>
<p>2.package的作用声明当前类所在的包，需要放在类的最上面，一个类中最多只有一句package</p>
<p>3.import指令 位置放在package的下面，再类定义前面，可以由多句，并且没有顺序的要求</p>
<h2 id="7-2-访问修饰符"><a href="#7-2-访问修饰符" class="headerlink" title="7.2 访问修饰符"></a>7.2 访问修饰符</h2><h3 id="7-2-1-基本介绍"><a href="#7-2-1-基本介绍" class="headerlink" title="7.2.1 基本介绍"></a>7.2.1 基本介绍</h3><p>Java提供了四种访问控制修饰符，控制方法和属性（成员变量）的访问权限（范围）：</p>
<ol>
<li>公开级别：用public修饰，对外公开</li>
<li>受保护级别：用protected修饰，对子类和同一包中的类公开</li>
<li>默认级别：没有修饰符号，向同一个包的类公开</li>
<li>私有级别：用private修饰，只有类本身可以访问，不对外公开</li>
</ol>
<ul>
<li><strong>四种访问修饰符的访问范围</strong></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>级别</th>
<th>符</th>
<th>同类</th>
<th>同包</th>
<th>子类</th>
<th>不同包</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>公开</td>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>2</td>
<td>受保护</td>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td>3</td>
<td>默认</td>
<td>没有修饰符</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>4</td>
<td>私有</td>
<td>private</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<ul>
<li>使用注意事项</li>
</ul>
<ol>
<li>修饰符可以用来修饰类中的属性，成员方法以及类</li>
<li>只有默认的和public才能修饰类！，并且遵循上述的范根权限的特点</li>
<li>关于子类中的访问权限，后续再详解</li>
<li>成员的方法的访问规则和属性完全一样</li>
</ol>
<h2 id="7-3-封装（encapsulation）"><a href="#7-3-封装（encapsulation）" class="headerlink" title="7.3 封装（encapsulation）"></a>7.3 封装（encapsulation）</h2><h3 id="7-3-1-基础介绍"><a href="#7-3-1-基础介绍" class="headerlink" title="7.3.1 基础介绍"></a>7.3.1 基础介绍</h3><p>把抽象出的数据[属性]和堆数据的操作[方法]封装在一起，数据被保护在内部，程序的奇特部分只有通过被搜全的操作[方法]，才能对数据进行操作。</p>
<ul>
<li><p>理解和好处</p>
<ul>
<li>隐藏实现细节，方法（连接数据库）&lt;——调用（传入参数……）</li>
<li>可以堆数据进行验证，保证安全合理</li>
</ul>
</li>
<li><p>实现步骤</p>
</li>
</ul>
<p>1）将属性进行私有化private 【不能直接修改属性】</p>
<p>2）提供一个公共的(public)set方法，用于对属性判断并赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setXxx</span><span class="params">(类型 参数名)</span>&#123;<span class="comment">//Xxx表示某个属性</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//加入数据验证的业务逻辑</span></span><br><span class="line"></span><br><span class="line">	属性=参数名;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>3）提供一个公共的(public)get方法，用于获取属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 数据类型 getXxx()&#123;<span class="comment">//Xxx表示某个属性</span></span><br><span class="line">       <span class="keyword">return</span> xx;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-3-2-快速入门"><a href="#7-3-2-快速入门" class="headerlink" title="7.3.2 快速入门"></a>7.3.2 快速入门</h3><p>小程序，不能随便查看人的年龄，工资等隐私，并对设置的年龄进行合理的验证。年龄合理就设置，否则就默认。年龄必须在1-120岁，年龄、工资不能直接查看，name的长度在2-6之间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encap1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;小花&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setSalary(<span class="number">40000</span>);</span><br><span class="line">        System.out.println(person.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//名字公共</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;<span class="comment">//工资私有</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length()&lt;<span class="number">6</span> &amp;&amp; name.length()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的姓名长度不符合要求&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;无名人&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (age&lt;<span class="number">120</span> &amp;&amp; age&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你设置的年龄不正确，需要在1-120之间，现设置为默认年龄18岁&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法，返回属性值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名name=&quot;</span>+name+<span class="string">&quot;,年龄age=&quot;</span>+age+<span class="string">&quot;,工资salary=&quot;</span>+salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">姓名name=小花,年龄age=<span class="number">20</span>,工资salary=<span class="number">40000.0</span></span><br></pre></td></tr></table></figure>

<p>使用构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encap1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用构造器</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">ming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;ming&quot;</span>,<span class="number">23</span>,<span class="number">40000</span>);</span><br><span class="line">        System.out.println(ming.info());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">//名字公共</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄私有</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;<span class="comment">//工资私有</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="comment">//钻空子可以逃脱验证</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        setName(name);</span><br><span class="line">        setAge(age);</span><br><span class="line">        setSalary(salary);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.length()&lt;<span class="number">6</span> &amp;&amp; name.length()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的姓名长度不符合要求&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.name = <span class="string">&quot;无名人&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (age&lt;<span class="number">120</span> &amp;&amp; age&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你设置的年龄不正确，需要在1-120之间，现设置为默认年龄18岁&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法，返回属性值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">info</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名name=&quot;</span>+name+<span class="string">&quot;,年龄age=&quot;</span>+age+<span class="string">&quot;,工资salary=&quot;</span>+salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">姓名name=ming,年龄age=<span class="number">23</span>,工资salary=<span class="number">40000.0</span></span><br></pre></td></tr></table></figure>



<h2 id="7-4-继承（entends）"><a href="#7-4-继承（entends）" class="headerlink" title="7.4 继承（entends）"></a>7.4 继承（entends）</h2><h3 id="7-4-1-基础介绍"><a href="#7-4-1-基础介绍" class="headerlink" title="7.4.1 基础介绍"></a>7.4.1 基础介绍</h3><p>继承可以解决代码复用，让我们的编程更加接近人类思维。当多个类存在相同的属性（变量）和方法时，可以从这些类中抽象出父类，在父类中定义这些相同的属性和方法，所有的子类不需要重新定义这些属性和方法，只需要通过extends来声明继承父类即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%A7%E6%89%BF%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p>
<ul>
<li><p>基本语法</p>
<p>class 子类 extends 父类{</p>
<p>}</p>
<p>1）父类就会自动拥有父类定义的属性和方法</p>
<p>2）父类又叫超类，基类</p>
<p>3）子类又叫派生类</p>
</li>
</ul>
<h3 id="7-4-2-快速入门"><a href="#7-4-2-快速入门" class="headerlink" title="7.4.2 快速入门"></a>7.4.2 快速入门</h3><p>编写两个类，一个是Pupli类（小学生），一个是Graduate（大学生）。</p>
<p>父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score=score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span>+name+<span class="string">&quot;\tAge: &quot;</span>+age+<span class="string">&quot;\tscore: &quot;</span>+score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类（小学生）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pupli</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;小学生&quot;</span> +name+<span class="string">&quot;正在考数学&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类（大学生）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graduate</span> <span class="keyword">extends</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testing</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大学生&quot;</span> +name+<span class="string">&quot;正在考高数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">encap1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Pupli</span> <span class="variable">pupli</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pupli</span>();</span><br><span class="line">        pupli.name = <span class="string">&quot;Pupli&quot;</span>;</span><br><span class="line">        pupli.age = <span class="number">20</span>;</span><br><span class="line">        pupli.testing();</span><br><span class="line">        pupli.setScore(<span class="number">60</span>);</span><br><span class="line">        pupli.showInfo();</span><br><span class="line"></span><br><span class="line">        <span class="type">Graduate</span> <span class="variable">graduate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Graduate</span>();</span><br><span class="line">        graduate.name = <span class="string">&quot;Graduate&quot;</span>;</span><br><span class="line">        graduate.age = <span class="number">20</span>;</span><br><span class="line">        graduate.testing();</span><br><span class="line">        graduate.setScore(<span class="number">80</span>);</span><br><span class="line">        graduate.showInfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">小学生Pupli正在考数学</span><br><span class="line">Name: Pupli	Age: <span class="number">20</span>	score: <span class="number">60.0</span></span><br><span class="line">大学生Graduate正在考高数</span><br><span class="line">Name: Graduate	Age: <span class="number">20</span>	score: <span class="number">80.0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>带来的便利</li>
</ul>
<p>​	代码的复用性提高</p>
<p>​	代码的扩展性和维护性提高了</p>
<h3 id="7-4-3-细节问题"><a href="#7-4-3-细节问题" class="headerlink" title="7.4.3 细节问题"></a>7.4.3 细节问题</h3><p>1.子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问，但是私有属性和方法不能在子类直接访问，要通过父类提供公共的方法去访问。</p>
<p>2.子类必须调用父类的构造器，完成父类的初始化</p>
<p><strong>3.当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会调用父类的无参构造器。如果父类没有提供无参构造器，则必须子啊子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化，否则，编译不会通过。</strong></p>
<p>4.如果希望调用父类的某个构造器，则显示的调用一下：super(参数列表);。</p>
<p>5.super在使用时，需要放在构造器的第一行。</p>
<p>6.super()和thos()都只能放在构造器的第一行，因此这两个方法不能共存在一个构造器中。</p>
<p>7.Java所有类都是object类的子类，Object是所有类的父基类。通过Ctrl+H查看类的关系</p>
<p>8.父类的构造器的调用不限于直接父类！将一直往上追溯直到Object类（顶级类）。</p>
<p>9.子类最多只能继承一个父类（指直接继承），即Java中是单继承机制。</p>
<p>10.布恩那个滥用继承，子类和父类之间必须满足is - a的逻辑关系</p>
<p>Person is a Music?</p>
<p>Person Music</p>
<p>Music extends Person </p>
<p>Animal</p>
<p>Cat extends Animal</p>
<h3 id="7-4-4-本质分析"><a href="#7-4-4-本质分析" class="headerlink" title="7.4.4 本质分析"></a>7.4.4 本质分析</h3><p>案例：分析子类继承父类，创建子类对象时，内存中到底发生了什么？当子类对象创建好了后，建立查找关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%A7%E6%89%BF%E7%9A%84%E6%9C%AC%E8%B4%A8.png"></p>
<p>内存分布图</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E5%B8%83%E5%9B%BE.png"></p>
<p>按照查找关系来返回信息</p>
<p>（1）首先看子类是否有该返回值</p>
<p>（2）如果子类有这个属性，并且可以访问，则返回该信息</p>
<p>（3）如果子类没有这个属性，就看父类有没有该属性，如果有访问并返回信息</p>
<p>（4）如果父类没有就按照关系往上级继续找，直到顶级Object类……</p>
<h2 id="7-5-多态（polymorphic）"><a href="#7-5-多态（polymorphic）" class="headerlink" title="7.5 多态（polymorphic）"></a>7.5 多态（polymorphic）</h2><h3 id="7-5-1基础介绍"><a href="#7-5-1基础介绍" class="headerlink" title="7.5.1基础介绍"></a>7.5.1基础介绍</h3><p>方法或对象具有多种形态。是面对对象的第三大特征，多态是建立在封装和继承基础之上的。</p>
<ul>
<li>多态的具体体现</li>
</ul>
<p>1.重写和重载就体现多态</p>
<ul>
<li><strong>对象的多态</strong></li>
</ul>
<ol>
<li>一个对象的编译类型和运行类型可以不一致【父类的引用可以指向子类】</li>
<li>编译类型在定义对象时，就确定了，不能改变</li>
<li>运行类型是可以变化的</li>
<li>编译类型看定义时 &#x3D; 号 的左边，运行运行看 &#x3D; 号的左边</li>
</ol>
<p>​	比如： Animal animal &#x3D; new Dog();【animal编译类型时Animal，运行类型Dog】</p>
<p>​		 animal &#x3D; new Cat();【animal的运行类型变成了Cat，编译类型认识Animal】</p>
<p>Animal类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有动物在哭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dog类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在哭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Cat类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在哭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>poly类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//编译的Animal，运行的Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        animal.cry();</span><br><span class="line">		<span class="comment">//编译的Animal，运行的Cat</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal1.cry();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">狗在哭</span><br><span class="line">猫在哭</span><br></pre></td></tr></table></figure>

<h3 id="7-5-2使用细节"><a href="#7-5-2使用细节" class="headerlink" title="7.5.2使用细节"></a>7.5.2使用细节</h3><p>多态的前提是：两个对象（类）存在继承关系</p>
<ul>
<li><strong>多态的向上转型</strong></li>
</ul>
<p>1.本质：父类的引用指向了子类的对象</p>
<p>2.语法：父类类型 引用名 &#x3D; new 子类类型();</p>
<p>3.特点：编译类型看左边，运行累心刚看右边，可以调用父类中的所有成员（需要遵守访问权限），不能调用子类中特有成员；最终运行效果看子类的具体实现！儿子能像父亲，父亲不能像儿子！</p>
<p>【animal不可以在poly中调用Cat中的catMouse！】</p>
<p>Cat类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;catch mouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Animal类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal cry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal eat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal sleep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>poly类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        animal.cry();</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal cry</span><br><span class="line">cat eat</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>多态的向下转型</strong></li>
</ul>
<p>1.语法：子类类型 引用名 &#x3D; （子类类型）父类引用</p>
<p>2.只能强行转父类的引用，不能强转父类的对象</p>
<p>3.要求父类的引用必须指向的是当前目标类型的对象</p>
<p>4.当向下转型后，就可以调用子类类型中所有的成员</p>
<ul>
<li>属性没有重写一说，属性的值看编译类型</li>
<li>instanceOf比较操作符，用于判断对象类型是否为XX类型或XX类型的子类型</li>
</ul>
<h3 id="7-5-3-动态绑定机制！"><a href="#7-5-3-动态绑定机制！" class="headerlink" title="7.5.3 动态绑定机制！"></a>7.5.3 动态绑定机制！</h3><p>1.当调用对象方法的时候，该<strong>方法会和对象的内存地址&#x2F;运行类型绑定</strong></p>
<p>2.当调用对象属性时，<strong>没有动态绑定机制</strong>，那里声明，那里使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> poly1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        A a= <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        System.out.println(a.sum());<span class="comment">//40</span></span><br><span class="line">        System.out.println(a.sum1());<span class="comment">//30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI()+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i+<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="7-6-Super"><a href="#7-6-Super" class="headerlink" title="7.6 Super"></a>7.6 Super</h2><h3 id="7-6-1-基本介绍"><a href="#7-6-1-基本介绍" class="headerlink" title="7.6.1 基本介绍"></a>7.6.1 基本介绍</h3><p>super代表父类的引用，用于访问父类的属性、方法、构造器</p>
<ul>
<li>基本语法：</li>
</ul>
<p>1.访问父类的属性，但不能访问父类的private属性</p>
<p>​	super.属性名;</p>
<p>2.访问父类的方法，不能访问父类的private方法</p>
<p>​	super.方法名(参数列表)；</p>
<p>3.访问父类的构造器</p>
<p>​	super(参数列表);</p>
<p>​	之恩放在构造器的第一句，只能出现一句！</p>
<h3 id="7-6-2-使用细节"><a href="#7-6-2-使用细节" class="headerlink" title="7.6.2 使用细节"></a>7.6.2 使用细节</h3><p>1.调用父类的构造器的好处（分工明确，父类属性由父类初始化，子类的属性由子类初始化）</p>
<p>2.当子类中有和父类中的成员（属性和方法）重名时，为了访问父类的成员，必须通过super。如果没有重名，使用super、this、世界访问是一样的效果。</p>
<p>A类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> super1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">230</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是A类的cal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>B类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> super1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">120</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是B类的sum&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.cal();<span class="comment">//等价于cal();</span></span><br><span class="line">        System.out.println(n1);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.n1);</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.n1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>go类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> super1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">go</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.sum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这是B类的sum</span><br><span class="line">这是A类的cal</span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="number">120</span></span><br><span class="line"><span class="number">230</span></span><br></pre></td></tr></table></figure>

<p><strong>this是从本类开始找，本类没有再查找父类的。super是从父类开始找，但是不限于直接父类。</strong></p>
<ul>
<li><p>如果在查找属性的过程中，找到了，但是不能访问，则报错cannot access。</p>
</li>
<li><p>如果查找方法的过程中，没有找到，则提示方法不存在</p>
</li>
</ul>
<p>3.super的访问不限于直接父类，如果爷类和父类中有同名的成员，也可以使用super去访问爷类的成员；如果多个基类（上级类）中都有同名的成员，使用super访问遵循就近原则。A—&gt;B—&gt;C，当然也需要遵守访问权限的相关规则。</p>
<h3 id="7-6-3-super和this-的比较"><a href="#7-6-3-super和this-的比较" class="headerlink" title="7.6.3 super和this 的比较"></a>7.6.3 super和this 的比较</h3><table>
<thead>
<tr>
<th>No</th>
<th>区别点</th>
<th>this</th>
<th>super</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>访问属性</td>
<td>访问本类中的属性，如果本类没有次属性则从父类中继承查找</td>
<td>访问父类中的属性</td>
</tr>
<tr>
<td>2</td>
<td>调用方法</td>
<td>访问本类中的方法，如果本类没有此方法则从父类继续查找</td>
<td>直接访问父类中的方法</td>
</tr>
<tr>
<td>3</td>
<td>调用构造器</td>
<td>调用本类构造器，必须放在构造器的首行</td>
<td>调用服了构造器，必须放在子类构造器的首行</td>
</tr>
<tr>
<td>4</td>
<td>特殊</td>
<td>表示当前队对象</td>
<td>子类中访问服了对象</td>
</tr>
</tbody></table>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="7-7-方法重写override"><a href="#7-7-方法重写override" class="headerlink" title="7.7 方法重写override"></a>7.7 方法重写override</h2><h3 id="7-7-1-基础介绍"><a href="#7-7-1-基础介绍" class="headerlink" title="7.7.1 基础介绍"></a>7.7.1 基础介绍</h3><p>简单来说就是：方法覆盖(重写)就是子类的一个方法，和父类的某个方法的名称、返回类型、参数一样，那么我们就说子类的这个方法覆盖了父类的那个方法（不一定是直接父类）</p>
<p>案例：</p>
<p>因为B类是A类的子类，他们俩的cal方法定义形式一样（名称、返回类型、参数），这时就说B类的cal方法，重写了A类的cal方法。</p>
<p>A类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> override1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是A类的cal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>B类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> override1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cal</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是B类的cal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>go类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> override1;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">go</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">        b.cal();<span class="comment">//ctrl+b点击cal，会跳转到Blei文件中的cal</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这是B类的cal</span><br></pre></td></tr></table></figure>

<h3 id="7-7-2-使用细节"><a href="#7-7-2-使用细节" class="headerlink" title="7.7.2 使用细节"></a>7.7.2 使用细节</h3><p>1.子类方法的参数、方法名称，要和父类方法的参数、方法名称完全一样</p>
<p>2.子类方法的返回类型和父类的返回类型一样，或者是父类返回累心过的子类，比如父类 返回类型是Object，子类返回类型是String</p>
<p>3.子类方法不能缩小父类方法的访问权限。public&gt;protected&gt;默认&gt;private。你只能比你爸强不能比你爸弱</p>
<h3 id="7-7-3-方法重写和重载的对比"><a href="#7-7-3-方法重写和重载的对比" class="headerlink" title="7.7.3 方法重写和重载的对比"></a>7.7.3 方法重写和重载的对比</h3><table>
<thead>
<tr>
<th>名称</th>
<th>发生范围</th>
<th>方法名</th>
<th>形参列表</th>
<th>返回类型</th>
<th>修饰符</th>
</tr>
</thead>
<tbody><tr>
<td>重载</td>
<td>本类</td>
<td>必须一样</td>
<td>类型，个数或者顺序至少有一个不同</td>
<td>无要求</td>
<td>无要求</td>
</tr>
<tr>
<td>重写</td>
<td>父子类</td>
<td>必须一样</td>
<td>相同</td>
<td>子类重写的方法，返回类型和父类返回的类型一致，或者是其子类</td>
<td>子类方法不能缩小父类的访问范围</td>
</tr>
</tbody></table>
<h2 id="7-8-Object类详解"><a href="#7-8-Object类详解" class="headerlink" title="7.8 Object类详解"></a>7.8 Object类详解</h2><p>类<code>Object</code>是类层次结构的根。  每个类都有<code>Object</code>作为超类。 所有对象（包括数组）都实现了这个类的方法。</p>
<ul>
<li>equals方法</li>
</ul>
<p>​	&#x3D;&#x3D;和equals的对比</p>
<ol>
<li><p>&#x3D;&#x3D;：既可以判断基本类型，又可以判断引用类型</p>
</li>
<li><p>&#x3D;&#x3D;：如果判断基本类型，判断的是值是否相等。示例：int i &#x3D; 10; double d &#x3D; 10.0;</p>
</li>
<li><p>&#x3D;&#x3D;：如果判断引用类型，判断的是地址是否相等，即判断是不是同一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poly</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    <span class="type">B</span> <span class="variable">a</span> <span class="operator">=</span> b;</span><br><span class="line">    <span class="type">B</span> <span class="variable">c</span> <span class="operator">=</span> a;</span><br><span class="line">        System.out.println(a == c);</span><br><span class="line">        System.out.println(b == c);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>equals：是object类中的方法，只能判断引用类型</p>
</li>
</ol>
<p>​	查看JDK源代码，光标放在该方法，输入ctrl+B即可，或者在方法点击右键&gt;go to&gt;Dectaration or……</p>
<ol start="5">
<li>默认判断的是地址是否相同，子类中往往重写该方法，用于判断内容是否相等</li>
</ol>
<ul>
<li>hashCode</li>
</ul>
<ol>
<li>提高具有哈希结构容器的效率</li>
<li>两个引用，如果如果指向的是同一个对象，则哈希值肯定是一样的</li>
<li>两个引用，如果指向的对象 不是同一个，则哈希值是不一样的</li>
<li>哈希值主要根据地址号来的，不要完全将哈希值等价于地址</li>
<li>后面在集合中hashCode如果需要也会重写</li>
</ol>
<ul>
<li>toString方法</li>
</ul>
<ol>
<li><p>基本介绍</p>
<p>默认返回：全类名+@+哈希值的十六进制</p>
<p>子类往往重写toString方法，用于返回对象的属性信息</p>
</li>
<li><p>当直接输出一个对象时，toString方法会被默认的调用</p>
</li>
</ol>
<ul>
<li>fianlize方法</li>
</ul>
<ol>
<li>当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写方法，做一些释放资源的操作。</li>
<li>什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾对象，就会使用垃圾回收机制来销毁对象，在销毁对象前，就会调用finalize方法。</li>
<li>垃圾回收机制的调用，是由系统来决定的，也可以是通过System.gc()主动出发垃圾回收机制，测试：Car[name]</li>
</ol>
<h2 id="7-9-断点调试"><a href="#7-9-断点调试" class="headerlink" title="7.9 断点调试"></a>7.9 断点调试</h2><p>7.9.1 基本介绍</p>
<p>断点调试是指在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程可以看各个变量当前的值。出错的话，调试世道出错的代码行即显示错误，停下。继续分析从而找到这个bug</p>
<ul>
<li>快捷键</li>
</ul>
<p>​	F7 跳入 F8 跳过 shift+F8 跳出 </p>
<p>​	F9 resume，执行到下一个断点</p>
<ol>
<li>F7：跳入方法内</li>
<li>F8：逐行执行代码</li>
<li>shift+F8：跳出方法</li>
</ol>
<h1 id="第八章-面向对象编程（高级部分）"><a href="#第八章-面向对象编程（高级部分）" class="headerlink" title="第八章 面向对象编程（高级部分）"></a>第八章 面向对象编程（高级部分）</h1><h2 id="8-1-类变量和类方法"><a href="#8-1-类变量和类方法" class="headerlink" title="8.1 类变量和类方法"></a>8.1 类变量和类方法</h2><p>8.1.1 基本介绍</p>
<h2 id="8-2-理解main方法语法"><a href="#8-2-理解main方法语法" class="headerlink" title="8.2 理解main方法语法"></a>8.2 理解main方法语法</h2><h2 id="8-3-代码块"><a href="#8-3-代码块" class="headerlink" title="8.3 代码块"></a>8.3 代码块</h2><h2 id="8-4-单例设计模式"><a href="#8-4-单例设计模式" class="headerlink" title="8.4 单例设计模式"></a>8.4 单例设计模式</h2><h2 id="8-5-final关键字"><a href="#8-5-final关键字" class="headerlink" title="8.5 final关键字"></a>8.5 final关键字</h2><h2 id="8-6-抽象类"><a href="#8-6-抽象类" class="headerlink" title="8.6 抽象类"></a>8.6 抽象类</h2><h2 id="8-7-接口"><a href="#8-7-接口" class="headerlink" title="8.7 接口"></a>8.7 接口</h2><h2 id="8-8-内部类"><a href="#8-8-内部类" class="headerlink" title="8.8 内部类"></a>8.8 内部类</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>基础总结</title>
    <url>/2025/03/21/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="一、基础语法结构"><a href="#一、基础语法结构" class="headerlink" title="一、基础语法结构"></a>一、基础语法结构</h2><h3 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">25</span>;                  <span class="comment">// 整数（4字节）</span></span><br><span class="line"><span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">9.99</span>;           <span class="comment">// 双精度浮点</span></span><br><span class="line"><span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;              <span class="comment">// 单个字符</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isOpen</span> <span class="operator">=</span> <span class="literal">true</span>;         <span class="comment">// 布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用数据类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Android&quot;</span>;       <span class="comment">// 字符串</span></span><br><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;       <span class="comment">// 数组</span></span><br></pre></td></tr></table></figure>

<h3 id="2-控制流程"><a href="#2-控制流程" class="headerlink" title="2. 控制流程"></a>2. 控制流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">40</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;补考&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环结构</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);      <span class="comment">// 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    System.out.println(j++);    <span class="comment">// 0,1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、面向对象核心"><a href="#二、面向对象核心" class="headerlink" title="二、面向对象核心"></a>二、面向对象核心</h2><h3 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1. 类与对象"></a>1. 类与对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 字段</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I&#x27;m &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象使用</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">p.sayHello();  <span class="comment">// 输出: Hello, I&#x27;m Alice</span></span><br></pre></td></tr></table></figure>

<h3 id="2-继承与多态"><a href="#2-继承与多态" class="headerlink" title="2. 继承与多态"></a>2. 继承与多态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sound</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;汪汪汪&quot;</span>);  <span class="comment">// 方法重写</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态示例</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">myDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">myDog.sound();  <span class="comment">// 输出: 汪汪汪</span></span><br></pre></td></tr></table></figure>

<h2 id="三、关键语法特性"><a href="#三、关键语法特性" class="headerlink" title="三、关键语法特性"></a>三、关键语法特性</h2><h3 id="1-访问修饰符"><a href="#1-访问修饰符" class="headerlink" title="1. 访问修饰符"></a>1. 访问修饰符</h3><table>
<thead>
<tr>
<th>修饰符</th>
<th>类内</th>
<th>同包</th>
<th>子类</th>
<th>其他包</th>
</tr>
</thead>
<tbody><tr>
<td><code>private</code></td>
<td>✔️</td>
<td>✖️</td>
<td>✖️</td>
<td>✖️</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✖️</td>
</tr>
<tr>
<td><code>public</code></td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>默认</td>
<td>✔️</td>
<td>✔️</td>
<td>✖️</td>
<td>✖️</td>
</tr>
</tbody></table>
<h3 id="2-接口与抽象类"><a href="#2-接口与抽象类" class="headerlink" title="2. 接口与抽象类"></a>2. 接口与抽象类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口（100%抽象）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">USB</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;  <span class="comment">// 隐式 public abstract</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类（可包含实现）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;  <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123; <span class="comment">/* 具体实现 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;除数不能为零&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;总会执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、集合框架"><a href="#五、集合框架" class="headerlink" title="五、集合框架"></a>五、集合框架</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常用集合类</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 有序可重复</span></span><br><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();     <span class="comment">// 无序唯一</span></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 键值对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合操作</span></span><br><span class="line">list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="string">&quot;age&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="六、其他逆向重点"><a href="#六、其他逆向重点" class="headerlink" title="六、其他逆向重点"></a>六、其他逆向重点</h2><h3 id="1-反射机制（逆向关键）"><a href="#1-反射机制（逆向关键）" class="headerlink" title="1. 反射机制（逆向关键）"></a>1. 反射机制（逆向关键）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;secretMethod&quot;</span>);</span><br><span class="line">method.invoke(clazz.newInstance());</span><br></pre></td></tr></table></figure>

<h3 id="2-泛型（反编译常见）"><a href="#2-泛型（反编译常见）" class="headerlink" title="2. 泛型（反编译常见）"></a>2. 泛型（反编译常见）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Integer&gt;&gt; complexList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="3-多线程"><a href="#3-多线程" class="headerlink" title="3. 多线程"></a>3. 多线程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;异步执行&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h2 id="七、内存管理基础"><a href="#七、内存管理基础" class="headerlink" title="七、内存管理基础"></a><strong>七、内存管理基础</strong></h2><ol>
<li><strong>栈内存</strong>：存储基本类型变量和方法调用</li>
<li><strong>堆内存</strong>：存储对象实例</li>
<li><strong>方法区</strong>：存储类信息、常量池</li>
<li><strong>垃圾回收</strong>：自动回收无引用对象（<code>System.gc()</code>建议回收）</li>
</ol>
<h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a><strong>学习建议</strong></h2><ol>
<li><strong>重点掌握</strong>：类与对象、继承多态、集合框架</li>
<li><strong>逆向关联</strong>：反射机制、异常处理、接口特性</li>
<li><strong>实践方法</strong>：通过修改开源项目的代码观察运行结果</li>
</ol>
<p><strong>附：逆向工程中常见的Java代码特征</strong></p>
<ul>
<li><code>private static final</code> 修饰的密钥字段</li>
<li><code>try-catch</code> 包裹的核心逻辑</li>
<li><code>native</code> 声明的JNI方法</li>
<li><code>synchronized</code> 同步代码块</li>
</ul>
<p>结合APK反编译后的实际代码进行对照学习，理解语法到字节码的转换逻辑。</p>
<hr>
<h1 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h1><h2 id="一、基础语法差异（对比Java）"><a href="#一、基础语法差异（对比Java）" class="headerlink" title="一、基础语法差异（对比Java）"></a>一、基础语法差异（对比Java）</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1. 变量声明"></a>1. 变量声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Kotlin&quot;</span>       <span class="comment">// 不可变变量（类似Java final）</span></span><br><span class="line"><span class="type">var</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>            <span class="comment">// 可变变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式类型声明</span></span><br><span class="line">val price: Double = <span class="number">9.99</span></span><br></pre></td></tr></table></figure>

<p><em>逆向提示：反编译后<code>val</code>会变成final字段</em></p>
<h3 id="2-函数定义"><a href="#2-函数定义" class="headerlink" title="2. 函数定义"></a>2. 函数定义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本函数</span></span><br><span class="line">fun <span class="title function_">sum</span><span class="params">(a: Int, b: Int)</span>: Int &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表达式函数（自动推导返回类型）</span></span><br><span class="line">fun <span class="title function_">quickSum</span><span class="params">(a: Int, b: Int)</span> = a + b</span><br></pre></td></tr></table></figure>

<p><em>逆向特征：函数名保留但参数类型可能被擦除</em></p>
<h3 id="3-空安全特性"><a href="#3-空安全特性" class="headerlink" title="3. 空安全特性"></a>3. 空安全特性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> safeString: String? = <span class="literal">null</span>  <span class="comment">// 可空类型</span></span><br><span class="line"><span class="type">val</span> <span class="variable">length</span> <span class="operator">=</span> safeString?.length ?: <span class="number">0</span>  <span class="comment">// Elvis操作符</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空断言（逆向常见崩溃点）</span></span><br><span class="line"><span class="type">val</span> <span class="variable">risk</span> <span class="operator">=</span> safeString!!.length </span><br></pre></td></tr></table></figure>

<p><em>逆向注意：<code>!!</code>会生成显式空指针检查代码</em></p>
<h2 id="二、面向对象差异"><a href="#二、面向对象差异" class="headerlink" title="二、面向对象差异"></a>二、面向对象差异</h2><h3 id="1-类与继承"><a href="#1-类与继承" class="headerlink" title="1. 类与继承"></a>1. 类与继承</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">open <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;          <span class="comment">// 默认final，需open才能继承</span></span><br><span class="line">    open fun <span class="title function_">sound</span><span class="params">()</span> = <span class="string">&quot;...&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> : Animal() &#123;       <span class="comment">// 使用冒号继承</span></span><br><span class="line">    override fun <span class="title function_">sound</span><span class="params">()</span> = <span class="string">&quot;汪汪汪&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>逆向特征：<code>@JvmOverloads</code>注解常见于构造函数</em></p>
<h3 id="2-数据类（逆向重点）"><a href="#2-数据类（逆向重点）" class="headerlink" title="2. 数据类（逆向重点）"></a>2. 数据类（逆向重点）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">data <span class="keyword">class</span> <span class="title class_">User</span>(val id: Int, val name: String)</span><br></pre></td></tr></table></figure>

<p>*反编译后特征：</p>
<ul>
<li>自动生成<code>equals()/hashCode()/toString()</code></li>
<li><code>componentN()</code>方法对应属性</li>
<li><code>copy()</code>方法*</li>
</ul>
<h3 id="3-伴生对象（替代Java静态）"><a href="#3-伴生对象（替代Java静态）" class="headerlink" title="3. 伴生对象（替代Java静态）"></a>3. 伴生对象（替代Java静态）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        const <span class="type">val</span> <span class="variable">TAG</span> <span class="operator">=</span> <span class="string">&quot;MyApp&quot;</span></span><br><span class="line">        fun <span class="title function_">create</span><span class="params">()</span> = MyClass()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>逆向表现：生成<code>Companion</code>内部类和<code>INSTANCE</code>字段</em></p>
<h2 id="三、函数式特性"><a href="#三、函数式特性" class="headerlink" title="三、函数式特性"></a>三、函数式特性</h2><h3 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">sum</span> <span class="operator">=</span> &#123; x: Int, y: Int -&gt; x + y &#125;</span><br><span class="line">list.filter &#123; it &gt; <span class="number">5</span> &#125;.map &#123; it * <span class="number">2</span> &#125;</span><br></pre></td></tr></table></figure>

<p>*逆向特征：</p>
<ul>
<li>生成<code>FunctionN</code>接口匿名类</li>
<li>SAM转换优化为单个抽象方法*</li>
</ul>
<h3 id="2-扩展函数"><a href="#2-扩展函数" class="headerlink" title="2. 扩展函数"></a>2. 扩展函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fun String.addExclamation() = <span class="string">&quot;$this!&quot;</span></span><br></pre></td></tr></table></figure>

<p>*反编译后表现：</p>
<ul>
<li>生成静态工具类</li>
<li>首参数为接收者对象*</li>
</ul>
<h2 id="四、特殊语法结构"><a href="#四、特殊语法结构" class="headerlink" title="四、特殊语法结构"></a>四、特殊语法结构</h2><h3 id="1-字符串模板"><a href="#1-字符串模板" class="headerlink" title="1. 字符串模板"></a>1. 字符串模板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;ID:$id, Name:$&#123;user.name&#125;&quot;</span></span><br></pre></td></tr></table></figure>

<p><em>逆向特征：编译为<code>StringBuilder</code>拼接操作</em></p>
<h3 id="2-区间表达式"><a href="#2-区间表达式" class="headerlink" title="2. 区间表达式"></a>2. 区间表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i in <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) &#123; ... &#125;  <span class="comment">// 1,3,5,7,9</span></span><br><span class="line"><span class="keyword">if</span> (index in <span class="number">0</span> until size) &#123; ... &#125;</span><br></pre></td></tr></table></figure>

<p><em>逆向表现：转换为<code>IntRange</code>对象和迭代器</em></p>
<h2 id="五、协程基础（逆向难点）"><a href="#五、协程基础（逆向难点）" class="headerlink" title="五、协程基础（逆向难点）"></a>五、协程基础（逆向难点）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GlobalScope.launch &#123;           <span class="comment">// 协程启动</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">data</span> <span class="operator">=</span> async &#123; fetchData() &#125;.await()</span><br><span class="line">    withContext(Dispatchers.Main) &#123;</span><br><span class="line">        updateUI(data)         <span class="comment">// 线程切换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>*逆向特征：</p>
<ul>
<li>生成<code>Continuation</code>状态机</li>
<li>大量<code>label</code>跳转标记</li>
<li>使用<code>CoroutineImpl</code>子类*</li>
</ul>
<h2 id="六、与Java互操作"><a href="#六、与Java互操作" class="headerlink" title="六、与Java互操作"></a>六、与Java互操作</h2><h3 id="1-Jvm注解"><a href="#1-Jvm注解" class="headerlink" title="1. Jvm注解"></a>1. Jvm注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JvmField</span>                  <span class="comment">// 暴露字段</span></span><br><span class="line"><span class="meta">@JvmStatic</span>                 <span class="comment">// 生成静态方法</span></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span><span class="comment">// 声明受检异常</span></span><br></pre></td></tr></table></figure>

<h3 id="2-平台类型"><a href="#2-平台类型" class="headerlink" title="2. 平台类型"></a>2. 平台类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">val</span> <span class="variable">javaObj</span> <span class="operator">=</span> JavaClass()</span><br><span class="line"><span class="type">val</span> <span class="variable">risk</span> <span class="operator">=</span> javaObj.name.length  <span class="comment">// 可能NPE</span></span><br></pre></td></tr></table></figure>

<p><em>逆向注意：<code>String!</code>类型在反编译代码中可见</em></p>
<h2 id="逆向工程重点关注"><a href="#逆向工程重点关注" class="headerlink" title="逆向工程重点关注"></a>逆向工程重点关注</h2><h3 id="1-内联函数（inline）："><a href="#1-内联函数（inline）：" class="headerlink" title="1.内联函数（inline）："></a>1.<strong>内联函数</strong>（<code>inline</code>）：</h3><ul>
<li>反编译后代码直接展开</li>
<li>常见于集合操作和高性能场景</li>
</ul>
<h3 id="2-委托属性："><a href="#2-委托属性：" class="headerlink" title="2.委托属性："></a>2.<strong>委托属性</strong>：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">val text by lazy &#123; loadFromFile() &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成<code>Lazy</code>实现类</li>
<li><code>provideDelegate</code>方法调用链</li>
</ul>
<h3 id="3-密封类（反编译特征）："><a href="#3-密封类（反编译特征）：" class="headerlink" title="3.密封类（反编译特征）："></a>3.<strong>密封类</strong>（反编译特征）：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    data <span class="keyword">class</span> <span class="title class_">Success</span>(val data: String) : Result()</span><br><span class="line">    data <span class="keyword">class</span> <span class="title class_">Error</span>(val msg: String) : Result()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生成抽象基类</li>
<li>子类为final且包含特定标识</li>
</ul>
<h2 id="逆向对照表（Kotlin-→-Java）"><a href="#逆向对照表（Kotlin-→-Java）" class="headerlink" title="逆向对照表（Kotlin → Java）"></a>逆向对照表（Kotlin → Java）</h2><table>
<thead>
<tr>
<th>Kotlin特性</th>
<th>Java等效表现</th>
</tr>
</thead>
<tbody><tr>
<td><code>object</code>单例</td>
<td>静态INSTANCE字段 + 私有构造</td>
</tr>
<tr>
<td><code>when</code>表达式</td>
<td>switch或if-else链</td>
</tr>
<tr>
<td>属性访问器</td>
<td>getter&#x2F;setter方法</td>
</tr>
<tr>
<td>高阶函数</td>
<td>FunctionN接口匿名实现</td>
</tr>
<tr>
<td>默认参数</td>
<td>@JvmOverloads生成重载方法</td>
</tr>
</tbody></table>
<hr>
<h1 id="Android四大组件的核心概念"><a href="#Android四大组件的核心概念" class="headerlink" title="Android四大组件的核心概念"></a>Android四大组件的核心概念</h1><h2 id="一、Activity（活动）"><a href="#一、Activity（活动）" class="headerlink" title="一、Activity（活动）"></a>一、Activity（活动）</h2><h3 id="核心定义"><a href="#核心定义" class="headerlink" title="核心定义"></a>核心定义</h3><ul>
<li><strong>用户交互界面单元</strong>，每个屏幕对应一个Activity</li>
<li>通过<strong>Intent</strong>实现页面跳转（正向&#x2F;逆向均需重点监控）</li>
</ul>
<h3 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h3><ul>
<li><strong>生命周期</strong>：<code>onCreate()</code> → <code>onStart()</code> → <code>onResume()</code> → <code>onPause()</code> → <code>onStop()</code> → <code>onDestroy()</code></li>
<li><strong>启动模式</strong>：standard&#x2F;singleTop&#x2F;singleTask&#x2F;singleInstance（逆向时关注任务栈管理）</li>
<li><strong>布局绑定</strong>：通过<code>setContentView()</code>关联XML布局</li>
</ul>
<h3 id="逆向关注点"><a href="#逆向关注点" class="headerlink" title="逆向关注点"></a>逆向关注点</h3><ul>
<li>查找<strong>Launcher Activity</strong>（应用入口）：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;intent-filter&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line">    &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析<code>startActivityForResult()</code>跨组件通信</li>
<li>Hook <code>onActivityResult()</code>获取数据回传逻辑</li>
</ul>
<h2 id="二、Service（服务）"><a href="#二、Service（服务）" class="headerlink" title="二、Service（服务）"></a>二、Service（服务）</h2><h3 id="核心定义-1"><a href="#核心定义-1" class="headerlink" title="核心定义"></a>核心定义</h3><ul>
<li><strong>后台运行组件</strong>，无界面（常驻&#x2F;耗时操作）</li>
<li>两种启动方式：<ul>
<li>**startService()**（长期运行，如音乐播放）</li>
<li>**bindService()**（IPC跨进程通信）</li>
</ul>
</li>
</ul>
<h3 id="生命周期差异"><a href="#生命周期差异" class="headerlink" title="生命周期差异"></a>生命周期差异</h3><ul>
<li><strong>启动式</strong>：<code>onCreate()</code> → <code>onStartCommand()</code> → <code>onDestroy()</code></li>
<li><strong>绑定式</strong>：<code>onCreate()</code> → <code>onBind()</code> → <code>onUnbind()</code> → <code>onDestroy()</code></li>
</ul>
<h3 id="逆向关注点-1"><a href="#逆向关注点-1" class="headerlink" title="逆向关注点"></a>逆向关注点</h3><ul>
<li>识别<strong>Foreground Service</strong>（通知栏常驻，需反编译检查通知配置）</li>
<li>分析<code>IntentService</code>的消息处理机制</li>
<li>检测<code>startForeground()</code>防杀保活手段</li>
<li>定位跨进程通信的<strong>AIDL接口</strong></li>
</ul>
<hr>
<h2 id="三、BroadcastReceiver（广播接收器）"><a href="#三、BroadcastReceiver（广播接收器）" class="headerlink" title="三、BroadcastReceiver（广播接收器）"></a>三、BroadcastReceiver（广播接收器）</h2><h3 id="核心定义-2"><a href="#核心定义-2" class="headerlink" title="核心定义"></a>核心定义</h3><ul>
<li><strong>系统&#x2F;应用事件监听器</strong>（如网络变化、短信接收）</li>
<li>两种注册方式：<ul>
<li><strong>静态注册</strong>：AndroidManifest.xml声明（系统广播）</li>
<li><strong>动态注册</strong>：代码中<code>registerReceiver()</code>（应用内广播）</li>
</ul>
</li>
</ul>
<h3 id="事件响应流程"><a href="#事件响应流程" class="headerlink" title="事件响应流程"></a>事件响应流程</h3><ol>
<li>发送广播：<code>sendBroadcast(intent)</code></li>
<li>匹配接收器：通过<code>IntentFilter</code>筛选</li>
<li>执行<code>onReceive()</code>逻辑</li>
</ol>
<h3 id="逆向关注点-2"><a href="#逆向关注点-2" class="headerlink" title="逆向关注点"></a>逆向关注点</h3><ul>
<li>监控<strong>敏感广播</strong>（如<code>BOOT_COMPLETED</code>开机自启）</li>
<li>分析有序广播的优先级滥用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;intent-filter android:priority=<span class="string">&quot;1000&quot;</span>&gt;</span><br><span class="line">    &lt;action android:name=<span class="string">&quot;android.provider.Telephony.SMS_RECEIVED&quot;</span> /&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Hook <code>abortBroadcast()</code>拦截广播传递链</li>
</ul>
<hr>
<h2 id="四、ContentProvider（内容提供者）"><a href="#四、ContentProvider（内容提供者）" class="headerlink" title="四、ContentProvider（内容提供者）"></a>四、ContentProvider（内容提供者）</h2><h3 id="核心定义-3"><a href="#核心定义-3" class="headerlink" title="核心定义"></a>核心定义</h3><ul>
<li><strong>跨应用数据共享</strong>的标准化接口（数据库&#x2F;文件）</li>
<li>通过<strong>URI</strong>标识数据源：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">content:<span class="comment">//com.example.provider/user/1</span></span><br><span class="line">↑          ↑                ↑     ↑</span><br><span class="line">协议       包名             表名  记录ID</span><br></pre></td></tr></table></figure>

<h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ul>
<li><code>query()</code>：查询数据</li>
<li><code>insert()</code>：插入数据</li>
<li><code>update()</code>：更新数据</li>
<li><code>delete()</code>：删除数据</li>
<li><code>getType()</code>：返回MIME类型</li>
</ul>
<h3 id="逆向关注点-3"><a href="#逆向关注点-3" class="headerlink" title="逆向关注点"></a>逆向关注点</h3><ul>
<li>解析<code>&lt;provider&gt;</code>声明中的<strong>权限控制</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;provider </span><br><span class="line">    android:authorities=<span class="string">&quot;com.example.provider&quot;</span></span><br><span class="line">    android:readPermission=<span class="string">&quot;READ_DATA&quot;</span></span><br><span class="line">    android:writePermission=<span class="string">&quot;WRITE_DATA&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>追踪<code>ContentResolver</code>的CRUD操作路径</li>
<li>检测<strong>URI注入漏洞</strong>（未校验外部输入）</li>
</ul>
<h2 id="五、四大组件共性特征"><a href="#五、四大组件共性特征" class="headerlink" title="五、四大组件共性特征"></a>五、四大组件共性特征</h2><h3 id="1-清单文件声明"><a href="#1-清单文件声明" class="headerlink" title="1. 清单文件声明"></a>1. 清单文件声明</h3><p>所有组件必须在<code>AndroidManifest.xml</code>注册：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;activity android:name=<span class="string">&quot;.MainActivity&quot;</span>/&gt;</span><br><span class="line">&lt;service android:name=<span class="string">&quot;.MyService&quot;</span>/&gt;</span><br><span class="line">&lt;receiver android:name=<span class="string">&quot;.MyReceiver&quot;</span>/&gt;</span><br><span class="line">&lt;provider android:name=<span class="string">&quot;.MyProvider&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-Intent通信机制"><a href="#2-Intent通信机制" class="headerlink" title="2. Intent通信机制"></a>2. Intent通信机制</h3><ul>
<li><strong>显式Intent</strong>：明确指定组件类名（逆向易追踪）</li>
<li><strong>隐式Intent</strong>：通过Action&#x2F;Category匹配（需反编译查看过滤条件）</li>
</ul>
<h3 id="3-逆向工程切入点"><a href="#3-逆向工程切入点" class="headerlink" title="3. 逆向工程切入点"></a>3. 逆向工程切入点</h3><ul>
<li><strong>入口分析</strong>：定位Launcher Activity和开机广播接收器</li>
<li><strong>协议破解</strong>：监控ContentProvider的数据读写格式</li>
<li><strong>Hook位置</strong>：选择组件生命周期方法注入代码（如Activity的<code>onCreate()</code>）</li>
</ul>
<h2 id="逆向实战技巧"><a href="#逆向实战技巧" class="headerlink" title="逆向实战技巧"></a>逆向实战技巧</h2><ol>
<li><p><strong>快速定位组件</strong>：</p>
<ul>
<li>使用<code>apktool</code>反编译后，在<code>AndroidManifest.xml</code>搜索组件声明</li>
<li>通过<code>jadx-gui</code>查看组件的Java&#x2F;Kotlin实现类</li>
</ul>
</li>
<li><p><strong>动态行为监控</strong>：</p>
<ul>
<li><p>使用<code>logcat</code>过滤组件生命周期日志：</p>
</li>
<li><pre><code class="java">adb logcat | grep -E &quot;ActivityManager|BroadcastRecord&quot;
</code></pre>
</li>
<li><p>Frida Hook <code>android.app.Activity</code>的<code>onCreate()</code>方法</p>
</li>
</ul>
</li>
</ol>
<p>3.<strong>安全漏洞挖掘</strong>：</p>
<ul>
<li>检测<code>exported=true</code>的暴露组件（未授权访问风险）</li>
<li>分析Intent传递的Bundle数据是否缺少校验</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Kotlin</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Python课程设计</title>
    <url>/2025/03/15/Python%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%E2%80%94%E6%97%85%E6%B8%B8%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="摘-要"><a href="#摘-要" class="headerlink" title="摘  要"></a>摘  要</h1><p>本文针对市场上现有的旅游管理工具存在操作复杂、用户门槛高、不适用于普通家庭的问题，设计并实现了一个基于Python编程语言开发，并结合Tkinter库构建图形用户界面（GUI）的旅游管理系统。使得操作直观便捷，简化景点、路线管理和费用结算等操作。</p>
<p>系统的主要功能包括景点管理、路线规划、费用结算以及报告生成等模块。用户可以通过该系统轻松地添加、修改和删除景点信息；创建和查看由多个景点组成的旅行路线；计算特定路线所需的总费用；并将选定的路线详细信息保存到文本文件中。此外，系统还提供了数据保存和加载功能，确保用户的旅行数据持久化存储和安全备份。</p>
<p>关键词：旅游管理 管理系统 用户体验 </p>
<h1 id="1、序言"><a href="#1、序言" class="headerlink" title="1、序言"></a>1、序言</h1><p>本课题利用Python语言的三大控制结构（顺序、分支、循环）、文件读写操作、数据结构（如列表、字典）以及Tkinter库的图形化界面设计思想，编程实现了一个基于图形用户界面（GUI）的旅游管理系统。随着旅游行业的快速发展，市场上现有的旅游管理工具普遍存在操作复杂、用户门槛高的问题，难以满足普通家庭用户的便捷需求。为此，本系统旨在通过简洁直观的界面设计和高效的功能实现，为用户提供一种操作简便、功能全面的旅游管理解决方案。</p>
<p>通过本系统的设计与实现，不仅能够提升用户的操作体验，还为普通家庭用户提供了一种高效、便捷的旅游管理工具，具有一定的实用价值和推广意义。</p>
<h2 id="1-1设计目的及意义"><a href="#1-1设计目的及意义" class="headerlink" title="1.1设计目的及意义"></a>1.1设计目的及意义</h2><p>在随着旅游业的蓬勃发展，旅游活动在现代社会中逐渐成为人们生活的重要组成部分，无论是国内游还是境外游，都涉及到众多复杂的环节，如景点选择、路线规划、费用预算等。有效地管理这些旅游信息对于确保旅行的顺利进行至关重要。但目前市场上的旅游管理工具大多面向专业旅行社或资深旅行者设计，其功能繁杂、操作难度大，对于普通家庭用户而言使用门槛较高，难以满足他们对于便捷、简单旅游管理工具的需求。因此，开发一款具有针对性的旅游管理系统具有重要的现实意义。本文聚焦于设计并实现一款基于 Python 编程语言，并结合 Tkinter 库构建图形用户界面（GUI）的旅游管理系统，旨在简化旅游管理操作，提高用户体验，为广大普通家庭提供便捷、高效的旅游管理解决方案。</p>
<h2 id="1-2知识点的基本介绍"><a href="#1-2知识点的基本介绍" class="headerlink" title="1.2知识点的基本介绍"></a>1.2知识点的基本介绍</h2><h3 id="1-2-1语法基础"><a href="#1-2-1语法基础" class="headerlink" title="1.2.1语法基础"></a>1.2.1语法基础</h3><p>变量与数据类型：了解如何声明变量、基本数据类型（整数、浮点数、字符串、布尔值等）以及它们的使用方法。控制结构：条件语句(if, elif, else)、循环语句(for, while)、函数(def)。</p>
<h3 id="1-2-2数据结构"><a href="#1-2-2数据结构" class="headerlink" title="1.2.2数据结构"></a>1.2.2数据结构</h3><p>列表 (list)：有序的元素集合，支持索引和切片操作。</p>
<p>字典 (dict)：键值对的集合，用于快速查找和存储数据。</p>
<p>集合 (set)：无序且不重复的元素集合。</p>
<p>元组 (tuple)：不可变的有序元素集合。</p>
<h3 id="1-2-3文件读写"><a href="#1-2-3文件读写" class="headerlink" title="1.2.3文件读写"></a>1.2.3文件读写</h3><p>文件打开模式 (open())：r（只读）、w（写入，覆盖原有内容）、a（追加内容）、rb&#x2F;wb（二进制模式）。</p>
<p>文件操作：读取 (read())、写入 (write())、关闭 (close())。</p>
<h3 id="1-2-4-Tkinter-图形用户界面-GUI"><a href="#1-2-4-Tkinter-图形用户界面-GUI" class="headerlink" title="1.2.4 Tkinter 图形用户界面 (GUI)"></a>1.2.4 Tkinter 图形用户界面 (GUI)</h3><p>Tkinter 库：Python的标准GUI库，用于创建跨平台的桌面应用程序。</p>
<p>窗口 (Tk()) 和框架 (Frame)</p>
<p>常用控件：按钮 (Button)、标签 (Label)、输入框 (Entry)、文本框 (Text)、列表框 (Listbox)、复选框 (Checkbutton)、单选按钮 (Radiobutton) 等。</p>
<p>布局管理器：pack()、grid()、place()</p>
<h3 id="1-2-5-JSON-数据格式"><a href="#1-2-5-JSON-数据格式" class="headerlink" title="1.2.5 JSON 数据格式"></a>1.2.5 JSON 数据格式</h3><p>JSON 格式：轻量级的数据交换格式，易于人阅读和编写，同时也易于机器解析和生成。</p>
<p>Python 中的 JSON 操作：使用 json 模块进行序列化和反序列化。</p>
<h3 id="1-2-6-函数与模块化设计"><a href="#1-2-6-函数与模块化设计" class="headerlink" title="1.2.6 函数与模块化设计"></a>1.2.6 函数与模块化设计</h3><p>函数：定义可重用的代码块，提高代码的可维护性和可读性。</p>
<p>模块：将功能相关的代码组织成独立的文件，便于管理和复用。</p>
<h1 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title="2、需求分析"></a>2、需求分析</h1><h2 id="2-1可行性分析"><a href="#2-1可行性分析" class="headerlink" title="2.1可行性分析"></a>2.1可行性分析</h2><h3 id="2-1-1-技术可行性"><a href="#2-1-1-技术可行性" class="headerlink" title="2.1.1 技术可行性"></a>2.1.1 技术可行性</h3><p>随着计算机技术的发展，特别是Python编程语言及其相关库的广泛应用，开发一个基于桌面的应用程序已成为可能。Python拥有强大的标准库和丰富的第三方库支持，特别是在图形用户界面（GUI）开发方面，Tkinter库提供了简单易用的解决方案。此外，Python的跨平台特性使得开发的应用程序可以在Windows、macOS和Linux等多个操作系统上运行，大大提升了系统的适用范围。</p>
<h3 id="2-1-2-社会可行性"><a href="#2-1-2-社会可行性" class="headerlink" title="2.1.2  社会可行性"></a>2.1.2  社会可行性</h3><p>随着人们生活水平的提高和休闲旅游需求的增长，家庭对旅行管理的需求日益增加。现有的旅游管理工具虽然存在，但普遍存在操作复杂、用户门槛高等问题，难以满足普通家庭的使用需求。因此，开发一款易于使用、功能全面且适合普通家庭的旅游管理系统具有重要的社会意义。该系统不仅可以帮助家庭更好地规划和管理旅行活动，还能提升用户体验，促进旅游业的发展。</p>
<p>旅游管理系统中的创建和查看旅行路线功能，为用户和管理人员提供了便捷的旅行规划和管理工具[1]。通过这些功能，无论是个人的旅行计划还是旅游景点的管理，都可以变得更加高效和灵活。随着技术的不断进步，未来的旅游管理系统将更加智能化，为用户提供更加个性化和便捷的服务。</p>
<h2 id="2-2功能需求分析"><a href="#2-2功能需求分析" class="headerlink" title="2.2功能需求分析"></a>2.2功能需求分析</h2><h3 id="2-2-1-景点管理"><a href="#2-2-1-景点管理" class="headerlink" title="2.2.1 景点管理"></a>2.2.1 景点管理</h3><p>录入景点信息：输入景点的基本信息，包括名称、位置、描述、门票价格及游玩时间。</p>
<p>查找景点信息：根据景点名称搜索特定的景点。</p>
<p>删除景点信息：从系统中移除不再需要的景点信息。</p>
<p>修改景点信息：编辑已有的景点信息，包括名称、位置、描述、门票价格及游玩时间。</p>
<h3 id="2-2-2-路线管理"><a href="#2-2-2-路线管理" class="headerlink" title="2.2.2 路线管理"></a>2.2.2 路线管理</h3><p>创建旅行路线：选择多个景点，创建自定义的旅行路线。</p>
<p>查看旅行路线：浏览所有已创建的旅行路线及其包含的景点列表。</p>
<h3 id="2-2-3-费用结算"><a href="#2-2-3-费用结算" class="headerlink" title="2.2.3 费用结算"></a>2.2.3 费用结算</h3><p>计算费用：自动计算选定路线的总费用，帮助用户合理安排旅行预算。</p>
<h3 id="2-2-4-报告生成"><a href="#2-2-4-报告生成" class="headerlink" title="2.2.4 报告生成"></a>2.2.4 报告生成</h3><p>生成报告：选择特定的路线并将详细信息保存到文本文件中，便于日后查阅或分享给他人。</p>
<h3 id="2-2-5-数据保存与加载"><a href="#2-2-5-数据保存与加载" class="headerlink" title="2.2.5 数据保存与加载"></a>2.2.5 数据保存与加载</h3><p>保存数据：将用户的所有景点和路线信息持久化存储至本地磁盘。</p>
<p>加载数据：从本地文件中加载之前保存的景点和路线信息。</p>
<h3 id="2-2-6-用户界面"><a href="#2-2-6-用户界面" class="headerlink" title="2.2.6 用户界面"></a>2.2.6 用户界面</h3><p>主菜单界面：提供系统的入口界面，用户可以通过该界面选择不同的管理功能。</p>
<p>景点管理界面：包含添加、修改、删除和查找景点的功能。</p>
<p>路线管理界面：包含选择景点、添加路线和查看路线的功能。</p>
<p>费用结算界面：包含选择路线和计算费用的功能。</p>
<p>报告生成界面：包含选择路线和保存报告的功能。</p>
<p>数据保存与加载界面：包含保存数据和加载数据的功能。</p>
<h1 id="3、总体设计"><a href="#3、总体设计" class="headerlink" title="3、总体设计"></a>3、总体设计</h1><h2 id="3-1对现有系统的分析"><a href="#3-1对现有系统的分析" class="headerlink" title="3.1对现有系统的分析"></a>3.1对现有系统的分析</h2><h3 id="3-1-1-现有旅游管理工具对家庭用户不友好"><a href="#3-1-1-现有旅游管理工具对家庭用户不友好" class="headerlink" title="3.1.1 现有旅游管理工具对家庭用户不友好"></a>3.1.1 现有旅游管理工具对家庭用户不友好</h3><p>在现有市场中，许多家庭在规划旅行时缺乏有效的工具支持。市面上的旅游管理工具虽然种类繁多，但普遍存在操作复杂、用户门槛高、不适用于普通家庭的问题。这些问题不仅增加了用户的使用难度，也降低了系统的普及率和实用性。例如，一些专业化的旅游软件需要用户具备一定的计算机操作基础，复杂的界面和繁琐的操作步骤使得普通用户难以上手。此外，这些工具往往功能过于强大，对于普通家庭来说显得有些冗余，无法满足其简单的管理需求。</p>
<h3 id="3-1-2-传统旅游管理系统的技术局限性与用户体验问题"><a href="#3-1-2-传统旅游管理系统的技术局限性与用户体验问题" class="headerlink" title="3.1.2 传统旅游管理系统的技术局限性与用户体验问题"></a>3.1.2 传统旅游管理系统的技术局限性与用户体验问题</h3><p>技术上，现有的旅游管理系统大多采用传统的桌面应用程序开发方式，依赖于特定的操作系统环境。这种模式限制了系统的跨平台性，并且更新和维护成本较高。此外，大多数系统缺乏良好的用户体验设计，界面不够直观，操作流程不够简化。这导致用户在使用过程中容易感到困惑和挫败感。另一方面，部分移动应用虽然解决了跨平台问题，但由于功能单一或广告过多，用户体验并不理想。因此，开发一款易于使用、功能全面且适合普通家庭的旅游管理系统显得尤为重要。</p>
<h2 id="3-2系统结构"><a href="#3-2系统结构" class="headerlink" title="3.2系统结构"></a>3.2系统结构</h2><p>本文设计的旅游管理系统采用模块化的设计思路，将整个系统划分为多个功能模块，每个模块负责特定的功能。系统的主要架构如下：</p>
<p>主菜单模块：提供系统的入口界面，用户可以通过该界面选择不同的管理功能。</p>
<p>景点管理模块：允许用户添加、修改和删除景点信息，并支持根据景点名称进行搜索。</p>
<p>路线管理模块：用户可以创建和查看由多个景点组成的旅行路线。</p>
<p>费用结算模块：自动计算选定路线的总费用，并通过统计图表展示各项支出情况。</p>
<p>报告生成模块：将选定的路线详细信息保存到文本文件中，便于日后查阅或分享。</p>
<p>数据保存与加载模块：支持将用户的数据持久化存储至本地磁盘，并提供加载功能，确保数据的安全性和一致性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84%E5%9B%BE.jpg"> </p>
<h2 id="3-3用户界面设计"><a href="#3-3用户界面设计" class="headerlink" title="3.3用户界面设计"></a>3.3用户界面设计</h2><p>为了提升用户体验，系统采用了简洁明了的图形用户界面（GUI）。主菜单模块包含多个按钮，分别对应不同的管理功能。每个子模块都有独立的窗口，用于执行具体的操作。</p>
<h3 id="3-3-1主菜单模块"><a href="#3-3-1主菜单模块" class="headerlink" title="3.3.1主菜单模块"></a>3.3.1主菜单模块</h3><p>主菜单界面包含以下按钮：</p>
<p>景点管理打开景点管理模块。</p>
<p>路线管理：打开路线管理模块。</p>
<p>费用结算：打开费用结算模块。</p>
<p>报告生成：打开报告生成模块。</p>
<p>保存数据：保存当前的数据到本地文件。</p>
<p>加载数据：从本地文件加载数据。</p>
<p>退出程序：关闭应用程序。</p>
<h3 id="3-3-2景点管理模块"><a href="#3-3-2景点管理模块" class="headerlink" title="3.3.2景点管理模块"></a>3.3.2景点管理模块</h3><p>景点管理界面包含以下功能：</p>
<p>添加景点：输入景点的基本信息并添加到系统中。</p>
<p>修改景点：编辑已有的景点信息。</p>
<p>删除景点：从系统中移除某个景点。</p>
<p>查找景点：根据景点名称搜索特定的景点。</p>
<h3 id="3-3-3路线管理模块"><a href="#3-3-3路线管理模块" class="headerlink" title="3.3.3路线管理模块"></a>3.3.3路线管理模块</h3><p>路线管理界面包含以下功能：</p>
<p>选择景点：勾选需要包含在路线中的景点。</p>
<p>添加路线：根据选择的景点创建新的旅行路线。</p>
<p>查看路线：浏览所有已创建的路线及其包含的景点。</p>
<h3 id="3-3-4费用结算模块"><a href="#3-3-4费用结算模块" class="headerlink" title="3.3.4费用结算模块"></a>3.3.4费用结算模块</h3><p>选择路线：勾选需要计算费用的路线。</p>
<p>计算费用：自动计算选定路线的总费用，并显示详细的费用明细。</p>
<h3 id="3-3-5报告结算模块"><a href="#3-3-5报告结算模块" class="headerlink" title="3.3.5报告结算模块"></a>3.3.5报告结算模块</h3><p>报告生成界面包含以下功能：</p>
<p>选择路线：勾选需要生成报告的路线。</p>
<p>保存报告：将选定路线的信息保存到文本文件中。</p>
<h3 id="3-3-6数据保存与加载模块"><a href="#3-3-6数据保存与加载模块" class="headerlink" title="3.3.6数据保存与加载模块"></a>3.3.6数据保存与加载模块</h3><p>数据保存与加载界面包含以下功能：</p>
<p>保存数据：将当前的所有景点和路线信息保存到JSON文件中。</p>
<p>加载数据：从JSON文件中加载景点和路线信息。</p>
<h1 id="4、系统详细设计与实现"><a href="#4、系统详细设计与实现" class="headerlink" title="4、系统详细设计与实现"></a>4、系统详细设计与实现</h1><h2 id="4-1-源码分析"><a href="#4-1-源码分析" class="headerlink" title="4.1 源码分析"></a>4.1 源码分析</h2><p>略</p>
<h2 id="4-2-运行界面"><a href="#4-2-运行界面" class="headerlink" title="4.2 运行界面"></a>4.2 运行界面</h2><h3 id="4-2-1主菜单"><a href="#4-2-1主菜单" class="headerlink" title="4.2.1主菜单"></a>4.2.1主菜单</h3><p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E4%B8%BB%E8%8F%9C%E5%8D%95%E7%95%8C%E9%9D%A2.jpg"> </p>
<h3 id="4-2-2模块界面"><a href="#4-2-2模块界面" class="headerlink" title="4.2.2模块界面"></a>4.2.2模块界面</h3><p>系统的主界面包括景点管理、路线管理、费用结算、报告生成等功能按钮，用户可以通过点击按钮进入相应的功能模块。</p>
<p>点进景点管理选项，添加景点“重庆”及其相关信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E6%99%AF%E7%82%B9%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2.jpg" alt="景点管理"></p>
<p>点进路线管理选项，将“重庆”景点添加进路线中</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BA%BF%E8%B7%AF%E7%AE%A1%E7%90%86.jpg" alt="线路管理"> </p>
<p>点进费用结算选项，计算路线“重庆之旅”的总费用</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%BB%93%E7%AE%97%E8%B4%B9%E7%94%A8.jpg" alt="结算费用"> </p>
<p>点进报告生成选项，生成路线“重庆之旅”的txt文件，自定义保存路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E7%94%9F%E6%88%90%E6%8A%A5%E5%91%8A.jpg" alt="生成报告"> </p>
<p>输出txt文件详情如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/txt%E6%96%87%E4%BB%B6.jpg" alt="输出txt文件"> </p>
<p>点进 保存数据 选项，将路线“重庆之旅”的信息以json文件类型保存，自定义保存路径，便于后续再次更改</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE.jpg" alt="保存数据"></p>
<h1 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox, simpledialog, filedialog</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TravelManagementSystem</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root</span>):</span><br><span class="line">        <span class="variable language_">self</span>.root = root</span><br><span class="line">        <span class="variable language_">self</span>.root.title(<span class="string">&quot;旅游管理系统&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.root.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.attractions = []</span><br><span class="line">        <span class="variable language_">self</span>.routes = []</span><br><span class="line">        <span class="variable language_">self</span>.center_window(<span class="variable language_">self</span>.root)</span><br><span class="line">        <span class="variable language_">self</span>.create_main_menu()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">center_window</span>(<span class="params">self, window</span>):</span><br><span class="line">        window.update_idletasks()</span><br><span class="line">        width = window.winfo_width()</span><br><span class="line">        height = window.winfo_height()</span><br><span class="line">        x = (window.winfo_screenwidth() // <span class="number">2</span>) - (width // <span class="number">2</span>)</span><br><span class="line">        y = (window.winfo_screenheight() // <span class="number">2</span>) - (height // <span class="number">2</span>)</span><br><span class="line">        window.geometry(<span class="string">f&quot;<span class="subst">&#123;width&#125;</span>x<span class="subst">&#123;height&#125;</span>+<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_main_menu</span>(<span class="params">self</span>):</span><br><span class="line">        main_frame = tk.Frame(<span class="variable language_">self</span>.root)</span><br><span class="line">        main_frame.pack(expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        options_first_row = [<span class="string">&quot;景点管理&quot;</span>, <span class="string">&quot;路线管理&quot;</span>, <span class="string">&quot;费用结算&quot;</span>]</span><br><span class="line">        options_second_row = [<span class="string">&quot;报告生成&quot;</span>, <span class="string">&quot;保存数据&quot;</span>, <span class="string">&quot;加载数据&quot;</span>]</span><br><span class="line">        options_third_row = [<span class="string">&quot;退出程序&quot;</span>]</span><br><span class="line">        row_frames = [tk.Frame(main_frame) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">        <span class="keyword">for</span> frame <span class="keyword">in</span> row_frames:</span><br><span class="line">            frame.pack(fill=tk.X, pady=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> i, option <span class="keyword">in</span> <span class="built_in">enumerate</span>(options_first_row):</span><br><span class="line">            button = tk.Button(row_frames[<span class="number">0</span>], text=option, command=<span class="keyword">lambda</span> opt=option: <span class="variable language_">self</span>.handle_option(opt), width=<span class="number">15</span>)</span><br><span class="line">            button.pack(side=tk.LEFT, expand=<span class="literal">True</span>, padx=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> i, option <span class="keyword">in</span> <span class="built_in">enumerate</span>(options_second_row):</span><br><span class="line">            button = tk.Button(row_frames[<span class="number">1</span>], text=option, command=<span class="keyword">lambda</span> opt=option: <span class="variable language_">self</span>.handle_option(opt), width=<span class="number">15</span>)</span><br><span class="line">            button.pack(side=tk.LEFT, expand=<span class="literal">True</span>, padx=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> i, option <span class="keyword">in</span> <span class="built_in">enumerate</span>(options_third_row):</span><br><span class="line">            button = tk.Button(row_frames[<span class="number">2</span>], text=option, command=<span class="keyword">lambda</span> opt=option: <span class="variable language_">self</span>.handle_option(opt), width=<span class="number">15</span>)</span><br><span class="line">            button.pack(side=tk.LEFT, expand=<span class="literal">True</span>, padx=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_option</span>(<span class="params">self, option</span>):</span><br><span class="line">        <span class="keyword">if</span> option == <span class="string">&quot;景点管理&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.manage_attractions()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;路线管理&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.manage_routes()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;费用结算&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.calculate_costs()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;报告生成&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.generate_report()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;保存数据&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.save_data()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;加载数据&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.load_data()</span><br><span class="line">        <span class="keyword">elif</span> option == <span class="string">&quot;退出程序&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.root.quit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">manage_attractions</span>(<span class="params">self</span>):</span><br><span class="line">        attraction_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        attraction_window.title(<span class="string">&quot;景点管理&quot;</span>)</span><br><span class="line">        attraction_window.geometry(<span class="string">&quot;400x400&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(attraction_window)</span><br><span class="line">        attraction_window.grab_set()  </span><br><span class="line"></span><br><span class="line">        attractions_listbox = tk.Listbox(attraction_window, height=<span class="number">8</span>, width=<span class="number">40</span>)</span><br><span class="line">        attractions_listbox.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> attraction <span class="keyword">in</span> <span class="variable language_">self</span>.attractions:</span><br><span class="line">            attractions_listbox.insert(tk.END, attraction[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">show_attraction_details</span>(<span class="params">event</span>):</span><br><span class="line">            selected_indices = attractions_listbox.curselection()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> selected_indices:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            selected_index = selected_indices[<span class="number">0</span>]</span><br><span class="line">            attraction = <span class="variable language_">self</span>.attractions[selected_index]</span><br><span class="line"></span><br><span class="line">            detail_window = tk.Toplevel(attraction_window)</span><br><span class="line">            detail_window.title(<span class="string">f&quot;景点详情 - <span class="subst">&#123;attraction[<span class="string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            detail_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.center_window(detail_window)</span><br><span class="line">            detail_window.grab_set()</span><br><span class="line"></span><br><span class="line">            details_text = (<span class="string">f&quot;名称: <span class="subst">&#123;attraction[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\n位置: <span class="subst">&#123;attraction[<span class="string">&#x27;location&#x27;</span>]&#125;</span>\n描述: <span class="subst">&#123;attraction[<span class="string">&#x27;description&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">                            <span class="string">f&quot;门票价格: <span class="subst">&#123;attraction[<span class="string">&#x27;ticket_price&#x27;</span>]&#125;</span>元\n开放时间: <span class="subst">&#123;attraction[<span class="string">&#x27;play_time&#x27;</span>]&#125;</span>小时&quot;</span>)</span><br><span class="line">            tk.Label(detail_window, text=details_text).pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">            modify_button = tk.Button(detail_window, text=<span class="string">&quot;修改景点&quot;</span>,</span><br><span class="line">                                      command=<span class="keyword">lambda</span> idx=selected_index: <span class="variable language_">self</span>.modify_attraction(idx, detail_window))</span><br><span class="line">            delete_button = tk.Button(detail_window, text=<span class="string">&quot;删除景点&quot;</span>,</span><br><span class="line">                                      command=<span class="keyword">lambda</span> idx=selected_index: <span class="variable language_">self</span>.delete_attraction(idx, detail_window))</span><br><span class="line"></span><br><span class="line">            modify_button.pack(side=tk.LEFT, padx=<span class="number">5</span>)</span><br><span class="line">            delete_button.pack(side=tk.RIGHT, padx=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        attractions_listbox.bind(<span class="string">&#x27;&lt;&lt;ListboxSelect&gt;&gt;&#x27;</span>, show_attraction_details)</span><br><span class="line"></span><br><span class="line">        add_button = tk.Button(attraction_window, text=<span class="string">&quot;添加景点&quot;</span>,</span><br><span class="line">                               command=<span class="keyword">lambda</span>: <span class="variable language_">self</span>.add_attraction(attraction_window))</span><br><span class="line">        search_button = tk.Button(attraction_window, text=<span class="string">&quot;查找景点&quot;</span>, command=<span class="variable language_">self</span>.search_attraction)</span><br><span class="line"></span><br><span class="line">        add_button.pack(side=tk.LEFT, padx=<span class="number">5</span>)</span><br><span class="line">        search_button.pack(side=tk.RIGHT, padx=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_attraction</span>(<span class="params">self, parent_window</span>):</span><br><span class="line">        add_window = tk.Toplevel(parent_window)</span><br><span class="line">        add_window.title(<span class="string">&quot;添加景点&quot;</span>)</span><br><span class="line">        add_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(add_window)</span><br><span class="line">        add_window.grab_set()  </span><br><span class="line"></span><br><span class="line">        tk.Label(add_window, text=<span class="string">&quot;景点名称:&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        name_entry = tk.Entry(add_window)</span><br><span class="line">        name_entry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(add_window, text=<span class="string">&quot;位置:&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        location_entry = tk.Entry(add_window)</span><br><span class="line">        location_entry.grid(row=<span class="number">1</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(add_window, text=<span class="string">&quot;描述:&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        description_entry = tk.Entry(add_window)</span><br><span class="line">        description_entry.grid(row=<span class="number">2</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(add_window, text=<span class="string">&quot;门票价格(元):&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        ticket_price_entry = tk.Entry(add_window)</span><br><span class="line">        ticket_price_entry.grid(row=<span class="number">3</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(add_window, text=<span class="string">&quot;开放时间:&quot;</span>).grid(row=<span class="number">4</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        play_time_entry = tk.Entry(add_window)</span><br><span class="line">        play_time_entry.grid(row=<span class="number">4</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        confirm_button = tk.Button(add_window, text=<span class="string">&quot;确认&quot;</span>,</span><br><span class="line">                                   command=<span class="keyword">lambda</span>: <span class="variable language_">self</span>.confirm_add_attraction(name_entry.get(), location_entry.get(),</span><br><span class="line">                                                                               description_entry.get(),</span><br><span class="line">                                                                               ticket_price_entry.get(),</span><br><span class="line">                                                                               play_time_entry.get(), add_window,</span><br><span class="line">                                                                               parent_window))</span><br><span class="line">        confirm_button.grid(row=<span class="number">5</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm_add_attraction</span>(<span class="params">self, name, location, description, ticket_price, play_time, add_window, parent_window</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ticket_price = <span class="built_in">float</span>(ticket_price)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;门票价格必须是数字！&quot;</span>, parent=add_window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([name, location, description, ticket_price, play_time]):</span><br><span class="line">            new_attraction = &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">                <span class="string">&#x27;location&#x27;</span>: location,</span><br><span class="line">                <span class="string">&#x27;description&#x27;</span>: description,</span><br><span class="line">                <span class="string">&#x27;ticket_price&#x27;</span>: ticket_price,</span><br><span class="line">                <span class="string">&#x27;play_time&#x27;</span>: play_time</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">self</span>.attractions.append(new_attraction)</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;景点已添加&quot;</span>, parent=add_window)</span><br><span class="line">            add_window.destroy()</span><br><span class="line">            parent_window.destroy()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请填写所有字段！&quot;</span>, parent=add_window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search_attraction</span>(<span class="params">self</span>):</span><br><span class="line">        search_name = simpledialog.askstring(<span class="string">&quot;查找景点&quot;</span>, <span class="string">&quot;请输入景点名称:&quot;</span>, parent=<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">        found_attractions = [a <span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable language_">self</span>.attractions <span class="keyword">if</span> a[<span class="string">&#x27;name&#x27;</span>].lower() == search_name.lower()]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> found_attractions:</span><br><span class="line">            <span class="variable language_">self</span>.show_search_results(found_attractions)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;结果&quot;</span>, <span class="string">&quot;未找到该景点。&quot;</span>, parent=<span class="variable language_">self</span>.root)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_search_results</span>(<span class="params">self, attractions</span>):</span><br><span class="line">        result_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        result_window.title(<span class="string">&quot;搜索结果&quot;</span>)</span><br><span class="line">        result_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(result_window)</span><br><span class="line">        result_window.grab_set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> attraction <span class="keyword">in</span> attractions:</span><br><span class="line">            details_text = (<span class="string">f&quot;名称: <span class="subst">&#123;attraction[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\n位置: <span class="subst">&#123;attraction[<span class="string">&#x27;location&#x27;</span>]&#125;</span>\n描述: <span class="subst">&#123;attraction[<span class="string">&#x27;description&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">                            <span class="string">f&quot;门票价格: <span class="subst">&#123;attraction[<span class="string">&#x27;ticket_price&#x27;</span>]&#125;</span>元\n开放时间: <span class="subst">&#123;attraction[<span class="string">&#x27;play_time&#x27;</span>]&#125;</span>小时&quot;</span>)</span><br><span class="line">            tk.Label(result_window, text=details_text).pack(pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">            modify_button = tk.Button(result_window, text=<span class="string">&quot;修改景点&quot;</span>,</span><br><span class="line">                                      command=<span class="keyword">lambda</span> attr=attraction: <span class="variable language_">self</span>.modify_attraction_by_name(attr,</span><br><span class="line">                                                                                                     result_window))</span><br><span class="line">            delete_button = tk.Button(result_window, text=<span class="string">&quot;删除景点&quot;</span>,</span><br><span class="line">                                      command=<span class="keyword">lambda</span> attr=attraction: <span class="variable language_">self</span>.delete_attraction_by_name(attr,</span><br><span class="line">                                                                                                     result_window))</span><br><span class="line"></span><br><span class="line">            modify_button.pack(side=tk.LEFT, padx=<span class="number">5</span>)</span><br><span class="line">            delete_button.pack(side=tk.RIGHT, padx=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_attraction</span>(<span class="params">self, index, parent_window</span>):</span><br><span class="line">        attraction = <span class="variable language_">self</span>.attractions[index]</span><br><span class="line"></span><br><span class="line">        modify_window = tk.Toplevel(parent_window)</span><br><span class="line">        modify_window.title(<span class="string">&quot;修改景点&quot;</span>)</span><br><span class="line">        modify_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(modify_window)</span><br><span class="line">        modify_window.grab_set()</span><br><span class="line"></span><br><span class="line">        tk.Label(modify_window, text=<span class="string">&quot;景点名称:&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        name_entry = tk.Entry(modify_window)</span><br><span class="line">        name_entry.insert(<span class="number">0</span>, attraction[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        name_entry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(modify_window, text=<span class="string">&quot;位置:&quot;</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        location_entry = tk.Entry(modify_window)</span><br><span class="line">        location_entry.insert(<span class="number">0</span>, attraction[<span class="string">&#x27;location&#x27;</span>])</span><br><span class="line">        location_entry.grid(row=<span class="number">1</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(modify_window, text=<span class="string">&quot;描述:&quot;</span>).grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        description_entry = tk.Entry(modify_window)</span><br><span class="line">        description_entry.insert(<span class="number">0</span>, attraction[<span class="string">&#x27;description&#x27;</span>])</span><br><span class="line">        description_entry.grid(row=<span class="number">2</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(modify_window, text=<span class="string">&quot;门票价格(元):&quot;</span>).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        ticket_price_entry = tk.Entry(modify_window)</span><br><span class="line">        ticket_price_entry.insert(<span class="number">0</span>, <span class="built_in">str</span>(attraction[<span class="string">&#x27;ticket_price&#x27;</span>]))</span><br><span class="line">        ticket_price_entry.grid(row=<span class="number">3</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(modify_window, text=<span class="string">&quot;开放时间:&quot;</span>).grid(row=<span class="number">4</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        play_time_entry = tk.Entry(modify_window)</span><br><span class="line">        play_time_entry.insert(<span class="number">0</span>, <span class="built_in">str</span>(attraction[<span class="string">&#x27;play_time&#x27;</span>]))</span><br><span class="line">        play_time_entry.grid(row=<span class="number">4</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        confirm_button = tk.Button(modify_window, text=<span class="string">&quot;确认&quot;</span>,</span><br><span class="line">                                   command=<span class="keyword">lambda</span>: <span class="variable language_">self</span>.confirm_modify_attraction(index, name_entry.get(),</span><br><span class="line">                                                                                  location_entry.get(),</span><br><span class="line">                                                                                  description_entry.get(),</span><br><span class="line">                                                                                  ticket_price_entry.get(),</span><br><span class="line">                                                                                  play_time_entry.get(), modify_window))</span><br><span class="line">        confirm_button.grid(row=<span class="number">5</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">confirm_modify_attraction</span>(<span class="params">self, index, name, location, description, ticket_price, play_time, window</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ticket_price = <span class="built_in">float</span>(ticket_price)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;门票价格必须是数字！&quot;</span>, parent=window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([name, location, description, ticket_price, play_time]):</span><br><span class="line">            <span class="variable language_">self</span>.attractions[index] = &#123;</span><br><span class="line">                <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">                <span class="string">&#x27;location&#x27;</span>: location,</span><br><span class="line">                <span class="string">&#x27;description&#x27;</span>: description,</span><br><span class="line">                <span class="string">&#x27;ticket_price&#x27;</span>: ticket_price,</span><br><span class="line">                <span class="string">&#x27;play_time&#x27;</span>: play_time</span><br><span class="line">            &#125;</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;景点已修改！&quot;</span>, parent=window)</span><br><span class="line">            window.destroy()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请填写所有字段！&quot;</span>, parent=window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_attraction</span>(<span class="params">self, index, parent_window</span>):</span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>.attractions[index]</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;景点已删除！&quot;</span>, parent=parent_window)</span><br><span class="line">        parent_window.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modify_attraction_by_name</span>(<span class="params">self, attraction, parent_window</span>):</span><br><span class="line">        index = <span class="built_in">next</span>((i <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.attractions) <span class="keyword">if</span> a[<span class="string">&#x27;name&#x27;</span>] == attraction[<span class="string">&#x27;name&#x27;</span>]), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> index <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.modify_attraction(index, parent_window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_attraction_by_name</span>(<span class="params">self, attraction, parent_window</span>):</span><br><span class="line">        index = <span class="built_in">next</span>((i <span class="keyword">for</span> i, a <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.attractions) <span class="keyword">if</span> a[<span class="string">&#x27;name&#x27;</span>] == attraction[<span class="string">&#x27;name&#x27;</span>]), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> index <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="variable language_">self</span>.delete_attraction(index, parent_window)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">manage_routes</span>(<span class="params">self</span>):</span><br><span class="line">        route_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        route_window.title(<span class="string">&quot;路线管理&quot;</span>)</span><br><span class="line">        route_window.geometry(<span class="string">&quot;400x400&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(route_window)</span><br><span class="line">        route_window.grab_set()</span><br><span class="line"></span><br><span class="line">        frame_top = tk.Frame(route_window)</span><br><span class="line">        frame_top.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(frame_top, text=<span class="string">&quot;选择景点:&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.selected_attractions = []</span><br><span class="line">        <span class="keyword">for</span> i, attraction <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.attractions):</span><br><span class="line">            var = tk.IntVar(value=<span class="number">0</span>)</span><br><span class="line">            cb = tk.Checkbutton(frame_top, text=attraction[<span class="string">&#x27;name&#x27;</span>], variable=var)</span><br><span class="line">            cb.grid(row=i + <span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.selected_attractions.append(var)</span><br><span class="line"></span><br><span class="line">        route_name_label = tk.Label(frame_top, text=<span class="string">&quot;路线名称:&quot;</span>)</span><br><span class="line">        route_name_entry = tk.Entry(frame_top)</span><br><span class="line">        route_name_label.grid(row=<span class="built_in">len</span>(<span class="variable language_">self</span>.attractions) + <span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line">        route_name_entry.grid(row=<span class="built_in">len</span>(<span class="variable language_">self</span>.attractions) + <span class="number">2</span>, column=<span class="number">1</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        add_route_button = tk.Button(frame_top, text=<span class="string">&quot;添加路线&quot;</span>,</span><br><span class="line">                                     command=<span class="keyword">lambda</span> entry=route_name_entry: <span class="variable language_">self</span>.add_route(entry.get(), route_window))</span><br><span class="line">        add_route_button.grid(row=<span class="built_in">len</span>(<span class="variable language_">self</span>.attractions) + <span class="number">3</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        view_routes_button = tk.Button(route_window, text=<span class="string">&quot;查看路线&quot;</span>, command=<span class="variable language_">self</span>.view_routes)</span><br><span class="line">        view_routes_button.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_route</span>(<span class="params">self, route_name, parent_window</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> route_name.strip():</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请输入路线名称！&quot;</span>, parent=parent_window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        selected_indices = [i <span class="keyword">for</span> i, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.selected_attractions) <span class="keyword">if</span> var.get()]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> selected_indices:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请选择至少一个景点！&quot;</span>, parent=parent_window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        selected_attractions = [<span class="variable language_">self</span>.attractions[i][<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> i <span class="keyword">in</span> selected_indices]</span><br><span class="line"></span><br><span class="line">        new_route = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: route_name,</span><br><span class="line">            <span class="string">&#x27;attractions&#x27;</span>: selected_attractions</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.routes.append(new_route)</span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;路线已添加！&quot;</span>, parent=parent_window)</span><br><span class="line">        parent_window.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">view_routes</span>(<span class="params">self</span>):</span><br><span class="line">        view_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        view_window.title(<span class="string">&quot;查看路线&quot;</span>)</span><br><span class="line">        view_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(view_window)</span><br><span class="line">        view_window.grab_set()  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> route <span class="keyword">in</span> <span class="variable language_">self</span>.routes:</span><br><span class="line">            route_info = <span class="string">f&quot;路线名称: <span class="subst">&#123;route[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\n景点: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(route[<span class="string">&#x27;attractions&#x27;</span>])&#125;</span>&quot;</span></span><br><span class="line">            tk.Label(view_window, text=route_info).pack(pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_costs</span>(<span class="params">self</span>):</span><br><span class="line">        cost_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        cost_window.title(<span class="string">&quot;费用结算&quot;</span>)</span><br><span class="line">        cost_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(cost_window)</span><br><span class="line">        cost_window.grab_set()  </span><br><span class="line"></span><br><span class="line">        frame_top = tk.Frame(cost_window)</span><br><span class="line">        frame_top.pack(pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(frame_top, text=<span class="string">&quot;选择路线:&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.selected_routes = []</span><br><span class="line">        <span class="keyword">for</span> i, route <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.routes):</span><br><span class="line">            var = tk.IntVar(value=<span class="number">0</span>)</span><br><span class="line">            cb = tk.Checkbutton(frame_top, text=route[<span class="string">&#x27;name&#x27;</span>], variable=var)</span><br><span class="line">            cb.grid(row=i + <span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.selected_routes.append(var)</span><br><span class="line"></span><br><span class="line">        calculate_button = tk.Button(frame_top, text=<span class="string">&quot;计算费用&quot;</span>, command=<span class="keyword">lambda</span>: <span class="variable language_">self</span>.calculate_total_cost(cost_window))</span><br><span class="line">        calculate_button.grid(row=<span class="built_in">len</span>(<span class="variable language_">self</span>.routes) + <span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_total_cost</span>(<span class="params">self, window</span>):</span><br><span class="line">        selected_indices = [i <span class="keyword">for</span> i, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.selected_routes) <span class="keyword">if</span> var.get()]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> selected_indices:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请选择至少一条路线！&quot;</span>, parent=window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        total_cost = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> selected_indices:</span><br><span class="line">                route = <span class="variable language_">self</span>.routes[i]</span><br><span class="line">                <span class="keyword">for</span> attraction_name <span class="keyword">in</span> route[<span class="string">&#x27;attractions&#x27;</span>]:</span><br><span class="line">                    attraction = <span class="built_in">next</span>((a <span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable language_">self</span>.attractions <span class="keyword">if</span> a[<span class="string">&#x27;name&#x27;</span>] == attraction_name), <span class="literal">None</span>)</span><br><span class="line">                    <span class="keyword">if</span> attraction:</span><br><span class="line">                        total_cost += <span class="built_in">float</span>(attraction[<span class="string">&#x27;ticket_price&#x27;</span>])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;未找到该景点的门票价格！&quot;</span>, parent=window)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            messagebox.showerror(<span class="string">&quot;错误&quot;</span>, <span class="string">f&quot;计算费用时发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>, parent=window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        messagebox.showinfo(<span class="string">&quot;总费用&quot;</span>, <span class="string">f&quot;所选路线的总费用为: <span class="subst">&#123;total_cost&#125;</span>元&quot;</span>, parent=window)</span><br><span class="line">        window.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_report</span>(<span class="params">self</span>):</span><br><span class="line">        report_window = tk.Toplevel(<span class="variable language_">self</span>.root)</span><br><span class="line">        report_window.title(<span class="string">&quot;报告生成&quot;</span>)</span><br><span class="line">        report_window.geometry(<span class="string">&quot;400x300&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.center_window(report_window)</span><br><span class="line">        report_window.grab_set()</span><br><span class="line">        frame_top = tk.Frame(report_window)</span><br><span class="line">        frame_top.pack(pady=<span class="number">10</span>)</span><br><span class="line">        tk.Label(frame_top, text=<span class="string">&quot;选择路线:&quot;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">5</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.report_selected_routes = []</span><br><span class="line">        <span class="keyword">for</span> i, route <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.routes):</span><br><span class="line">            var = tk.IntVar(value=<span class="number">0</span>)</span><br><span class="line">            cb = tk.Checkbutton(frame_top, text=route[<span class="string">&#x27;name&#x27;</span>], variable=var)</span><br><span class="line">            cb.grid(row=i + <span class="number">1</span>, column=<span class="number">0</span>, sticky=<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.report_selected_routes.append(var)</span><br><span class="line"></span><br><span class="line">        save_button = tk.Button(frame_top, text=<span class="string">&quot;保存报告&quot;</span>, command=<span class="keyword">lambda</span>: <span class="variable language_">self</span>.save_report(report_window))</span><br><span class="line">        save_button.grid(row=<span class="built_in">len</span>(<span class="variable language_">self</span>.routes) + <span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_report</span>(<span class="params">self, window</span>):</span><br><span class="line">        selected_indices = [i <span class="keyword">for</span> i, var <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="variable language_">self</span>.report_selected_routes) <span class="keyword">if</span> var.get()]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> selected_indices:</span><br><span class="line">            messagebox.showwarning(<span class="string">&quot;警告&quot;</span>, <span class="string">&quot;请选择至少一条路线！&quot;</span>, parent=window)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        filename = filedialog.asksaveasfilename(defaultextension=<span class="string">&quot;.txt&quot;</span>,</span><br><span class="line">                                                filetypes=[(<span class="string">&quot;Text files&quot;</span>, <span class="string">&quot;*.txt&quot;</span>), (<span class="string">&quot;All files&quot;</span>, <span class="string">&quot;*.*&quot;</span>)],</span><br><span class="line">                                                parent=window)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> selected_indices:</span><br><span class="line">                    route = <span class="variable language_">self</span>.routes[i]</span><br><span class="line">                    file.write(<span class="string">f&quot;路线名称: <span class="subst">&#123;route[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\n景点:\n&quot;</span>)</span><br><span class="line">                    <span class="keyword">for</span> attraction_name <span class="keyword">in</span> route[<span class="string">&#x27;attractions&#x27;</span>]:</span><br><span class="line">                        attraction = <span class="built_in">next</span>(a <span class="keyword">for</span> a <span class="keyword">in</span> <span class="variable language_">self</span>.attractions <span class="keyword">if</span> a[<span class="string">&#x27;name&#x27;</span>] == attraction_name)</span><br><span class="line">                        file.write(</span><br><span class="line">                            <span class="string">f&quot;- 名称: <span class="subst">&#123;attraction[<span class="string">&#x27;name&#x27;</span>]&#125;</span>\n  位置: <span class="subst">&#123;attraction[<span class="string">&#x27;location&#x27;</span>]&#125;</span>\n  描述: <span class="subst">&#123;attraction[<span class="string">&#x27;description&#x27;</span>]&#125;</span>\n  &quot;</span></span><br><span class="line">                            <span class="string">f&quot;门票价格: <span class="subst">&#123;attraction[<span class="string">&#x27;ticket_price&#x27;</span>]&#125;</span>元\n  开放时间: <span class="subst">&#123;attraction[<span class="string">&#x27;play_time&#x27;</span>]&#125;</span>小时\n&quot;</span>)</span><br><span class="line">                    file.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;报告已保存！&quot;</span>, parent=window)</span><br><span class="line">        window.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_data</span>(<span class="params">self</span>):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;attractions&#x27;</span>: <span class="variable language_">self</span>.attractions,</span><br><span class="line">            <span class="string">&#x27;routes&#x27;</span>: <span class="variable language_">self</span>.routes</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filename = filedialog.asksaveasfilename(defaultextension=<span class="string">&quot;.json&quot;</span>,</span><br><span class="line">                                                filetypes=[(<span class="string">&quot;JSON files&quot;</span>, <span class="string">&quot;*.json&quot;</span>), (<span class="string">&quot;All files&quot;</span>, <span class="string">&quot;*.*&quot;</span>)])</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                json.dump(data, file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;数据已保存！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_data</span>(<span class="params">self</span>):</span><br><span class="line">        filename = filedialog.askopenfilename(filetypes=[(<span class="string">&quot;JSON files&quot;</span>, <span class="string">&quot;*.json&quot;</span>), (<span class="string">&quot;All files&quot;</span>, <span class="string">&quot;*.*&quot;</span>)])</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            choice = messagebox.askyesno(<span class="string">&quot;确认&quot;</span>, <span class="string">&quot;您希望覆盖现有数据还是添加到现有数据？\n点击&#x27;是&#x27;覆盖，点击&#x27;否&#x27;添加。&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                data = json.load(file)</span><br><span class="line">            <span class="keyword">if</span> choice:</span><br><span class="line">                <span class="variable language_">self</span>.attractions = data.get(<span class="string">&#x27;attractions&#x27;</span>, [])</span><br><span class="line">                <span class="variable language_">self</span>.routes = data.get(<span class="string">&#x27;routes&#x27;</span>, [])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.attractions.extend(data.get(<span class="string">&#x27;attractions&#x27;</span>, []))</span><br><span class="line">                <span class="variable language_">self</span>.routes.extend(data.get(<span class="string">&#x27;routes&#x27;</span>, []))</span><br><span class="line">            messagebox.showinfo(<span class="string">&quot;成功&quot;</span>, <span class="string">&quot;数据已加载！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    app = TravelManagementSystem(root)</span><br><span class="line">    root.mainloop()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>课程作业</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓逆向这档子事</title>
    <url>/2025/03/12/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91%E8%BF%99%E6%A1%A3%E5%AD%90%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="一、初识APK"><a href="#一、初识APK" class="headerlink" title="一、初识APK"></a>一、初识APK</h1><h2 id="1-Apk文件结构"><a href="#1-Apk文件结构" class="headerlink" title="1.Apk文件结构"></a>1.Apk文件结构</h2><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>assets目录</td>
<td>存放APK的静态资源文件，比如视频，音频，图片等（不一定有但常见）</td>
</tr>
<tr>
<td>lib目录</td>
<td>armeabi-v7a基本通用所有Android设备，arm64-v8a只是用与64为的Android设备，x86常用于Android模拟器，其目录下的.so文件时c或者c++编译的动态链接库文件（不一定有但常见）</td>
</tr>
<tr>
<td>META-INF目录</td>
<td>保存应用的签名信息，签名信息可以验证APK文件的额完整性，相当于APK的身份验证（验证文件是否又被修改）</td>
</tr>
<tr>
<td>res目录</td>
<td>res目录存放资源文件，包括图片，字符串等，APK的 脸蛋由它的layout文件设计</td>
</tr>
<tr>
<td>AndroidManifest.xml文件</td>
<td>APK的应用清单信息，他描述了应用的名字，版本，权限，引用的库文件等信息</td>
</tr>
<tr>
<td>classes.dex文件</td>
<td>classes.dex是java原码编译后生成的java字节码文件，APK运行的主要逻辑</td>
</tr>
<tr>
<td>reaources.arsc文件</td>
<td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td>
</tr>
</tbody></table>
<h2 id="2-双开及其原理"><a href="#2-双开及其原理" class="headerlink" title="2.双开及其原理"></a>2.双开及其原理</h2><p><strong>双开：简单来说，就是手机同时运行两个或多个相同的应用，例如同时运行两个微信</strong></p>
<table>
<thead>
<tr>
<th align="left">原理</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">修改包名</td>
<td align="left">让手机系统认为这是2个APP，这样的话就能生成2个数据存储路径，此时的多开就等于你打开了两个互不干扰的APP</td>
</tr>
<tr>
<td align="left">修改Framework</td>
<td align="left">对于有系统修改权限的厂商，可以修改Framework来实现双开的目的，例如：小米自带多开</td>
</tr>
<tr>
<td align="left">通过虚拟化技术实现</td>
<td align="left">虚拟Framework层、虚拟文件系统、模拟Android对组件的管理、虚拟应用进程管理 等一整套虚拟技术，将APK复制一份到虚拟空间中运行，例如：平行空间</td>
</tr>
<tr>
<td align="left">以插件机制运行</td>
<td align="left">利用反射替换，动态代{过}{滤}理，hook了系统的大部分与system—server进程通讯的函数，以此作为“欺上瞒下”的目的，欺骗系统“以为”只有一个apk在运行，瞒过插件让其“认为”自己已经安装。例如：VirtualApp</td>
</tr>
</tbody></table>
<h3 id="2-1-修改包名"><a href="#2-1-修改包名" class="headerlink" title="2.1 修改包名"></a>2.1 修改包名</h3><h4 id="2-1-1-使用工具"><a href="#2-1-1-使用工具" class="headerlink" title="2.1.1 使用工具"></a>2.1.1 使用工具</h4><p>MT管理器和NP管理器，都是Android设备上用于文件管理和系统操作的工具，但它们在功能特点、用户界面以及使用场景上有一些区别。</p>
<p><strong>MT管理器</strong></p>
<p>MT管理器（MT Manager）是一款功能强大的文件管理器，主要用于对APK文件、dex&#x2F;oat&#x2F;smali文件进行编辑，还可以进行文件对比、文本翻译等。它的主要特点包括：</p>
<ul>
<li>支持直接编辑APK文件中的资源文件、smali代码。</li>
<li>提供了丰富的文件操作功能，如复制、粘贴、重命名等。</li>
<li>可以用来汉化应用、修改游戏数据等高级操作。</li>
<li>用户界面相对复杂，更适合有一定技术背景的用户使用。</li>
</ul>
<p><strong>NP管理器</strong></p>
<p>NP管理器（NP Manager）也是一个文件管理器，虽然它也提供了对APK文件的基本编辑能力，但是其主要侧重点在于提供更直观的文件浏览体验和基本的文件管理功能。相比于MT管理器，NP管理器的特点有：</p>
<ul>
<li>界面设计更加简洁直观，适合普通用户进行基础的文件管理任务。</li>
<li>提供了对多种文件格式的支持，如压缩文件(zip, rar)的解压与创建。</li>
<li>功能性上相对于MT管理器来说较为简单，适用于不需要深入编辑apk或系统文件的用户。</li>
</ul>
<p><strong>区别</strong></p>
<ul>
<li><strong>功能深度</strong>：MT管理器在处理复杂的文件编辑和系统级操作方面更为强大；而NP管理器则侧重于提供一个易于使用的文件管理解决方案。</li>
<li><strong>用户界面</strong>：MT管理器的UI更加复杂，包含更多专业化的选项；NP管理器设计得更加友好，适合所有级别的用户。</li>
<li><strong>使用场景</strong>：如果需要对应用程序进行深层次的修改，比如反编译apk文件，则MT管理器是更好的选择。而对于那些仅需要基本文件管理功能的用户来说，NP管理器可能更加合适。</li>
</ul>
<p>根据实际需求应用，有的功能需要VIP……</p>
<h4 id="2-1-2-操作"><a href="#2-1-2-操作" class="headerlink" title="2.1.2 操作"></a>2.1.2 操作</h4><p>将MT管理器、NP管理器以及练手demo安装至安卓模拟器</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%8F%8C%E5%BC%80%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.png"></p>
<p>由于MT管理器双开需要会员，所以选择NP管理器。进入NP管理器软件，点击左上角的三根杠，选择安装包提取。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/NP%E7%AE%A1%E7%90%86%E5%99%A8%E7%AC%AC%E4%B8%80%E7%95%8C%E9%9D%A2.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%AE%89%E8%A3%85%E5%8C%85%E6%8F%90%E5%8F%96.png"></p>
<p>然后选择需要提取的软件</p>
<p> —&gt; 提取安装包—&gt; 定位 —&gt;点击软件 —&gt;功能—&gt;APK共存</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/demo%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9.png"></p>
<p>最后确认，此时便有了该软件的安装包，通过带点击下方提取出来的安装包，进行安装，桌面上便有了新的一个demo软件</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E6%88%90%E5%8A%9F%E6%8F%90%E5%8F%96%E5%AE%89%E8%A3%85%E5%8C%85.png"></p>
<p>注意这个地方，提取出来后，两个包的包名不一样</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E6%8F%90%E5%8F%96%E5%AE%89%E8%A3%85.png"></p>
<p>由于该方法是通过修改包名实现的，所以懂了应用的签名信息，如果开发者做了一个签名校验，那就很有可能安装后软件出现闪退奔溃的情况。</p>
<h2 id="3-汉化"><a href="#3-汉化" class="headerlink" title="3.汉化"></a>3.汉化</h2><p><strong>汉化：使用专门的工具对外文版的软件资源进行读取、翻译、修改、回写等一系列处理，使软件的菜单、对话框、提示等用户界面显示为中文，而程序的内核和功能保持不变，这个过程即为软件汉化</strong></p>
<p>基本上字符串都是在arsc里，建议一键汉化，然后再润色。<br>少量没汉化到的字符串参考视频中的方法定位去逐个汉化。</p>
<p>流程图</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E8%BD%AF%E4%BB%B6%E6%B1%89%E5%8C%96%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p>
<p>可以使用MT管理器，进入demo的apk文件中，进行搜索需要修改句子对应的文件所在位置，使用搜索，点击高级搜索可以进入全局搜索。查找到文件位置后进入文件，手动修改句子，翻译为中文。真的累。</p>
<p>修改后会出现一个签名改动的问题，可以直接卸载了再安装，或者核心破解。</p>
<h2 id="4-初识AndroidManifest-xml"><a href="#4-初识AndroidManifest-xml" class="headerlink" title="4.初识AndroidManifest.xml"></a>4.初识AndroidManifest.xml</h2><p>AndroidManifest.xml文件是整个应用程序的信息描述文件，定义了应用程序中包含的Activity,Service,Content provider和BroadcastReceiver组件信息。每个应用程序在根目录下必须包含一个AndroidManifest.xml文件，且文件名不能修改。它描述了package中暴露的组件，他们各自的实现类，各种能被处理的数据和启动位置。</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">versionCode</td>
<td align="left">版本号，主要用来更新，例如:12</td>
</tr>
<tr>
<td align="left">versionName</td>
<td align="left">版本名，给用户看的，例如:1.2</td>
</tr>
<tr>
<td align="left">package</td>
<td align="left">包名，例如：com.zj.52pj.demo</td>
</tr>
<tr>
<td align="left">uses-permission android:name&#x3D;””</td>
<td align="left">应用权限，例如：android.permission.INTERNET 代表网络权限</td>
</tr>
<tr>
<td align="left">android:label&#x3D;”@string&#x2F;app_name”</td>
<td align="left">应用名称</td>
</tr>
<tr>
<td align="left">android:icon&#x3D;”@mipmap&#x2F;ic_launcher”</td>
<td align="left">应用图标路径</td>
</tr>
<tr>
<td align="left">android:debuggable&#x3D;”true”</td>
<td align="left">应用是否开启debug权限</td>
</tr>
</tbody></table>
<h1 id="二、初识smail"><a href="#二、初识smail" class="headerlink" title="二、初识smail"></a>二、初识smail</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>安卓逆向工程</tag>
        <tag>吾爱破解</tag>
      </tags>
  </entry>
  <entry>
    <title>环境小记</title>
    <url>/2025/03/12/%E7%8E%AF%E5%A2%83%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1-Windows环境配置"><a href="#1-Windows环境配置" class="headerlink" title="1. Windows环境配置"></a>1. Windows环境配置</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>1.WINDOWS环境配置的难易程度因人而异，很多学员在此步骤上遇到困难。 </p>
<p>2.LINUX系统问题较少，原因是使用者较少且版本统一，而WINDOWS系统版本繁多，导致问题多样。 </p>
<p>3.WINDOWS系统使用ANSI编码，与常用的UTF-8编码不同，可能导致兼容性问题。</p>
<h3 id="1-2-系统版本选择"><a href="#1-2-系统版本选择" class="headerlink" title="1.2 系统版本选择"></a>1.2 系统版本选择</h3><p>1.推荐使用原版WINDOWS 10系统，避免使用精简版，以防出现未知问题。</p>
<p> 2.查看系统版本的方法包括使用win ver命令或系统设置中的关于选项。 </p>
<p>3.启用超级用户（类似于安卓系统的root用户）可以解决权限问题，避免某些操作失败。</p>
<h2 id="2-cmd和环境变量"><a href="#2-cmd和环境变量" class="headerlink" title="2. cmd和环境变量"></a>2. cmd和环境变量</h2><h3 id="2-1-cmd的打开方式"><a href="#2-1-cmd的打开方式" class="headerlink" title="2.1 cmd的打开方式"></a>2.1 cmd的打开方式</h3><p>1.cmd是一个常用的终端工具，在逆向工程中经常使用。 </p>
<p>2.打开cmd的方式有多种，推荐使用快捷键win键+r键打开。 </p>
<p>3.另一种打开方式是在指定路径下直接点击cmd，无需切换路径。</p>
<h3 id="2-2-cmd的基本操作"><a href="#2-2-cmd的基本操作" class="headerlink" title="2.2 cmd的基本操作"></a>2.2 cmd的基本操作</h3><p>1.显示当前路径下的所有文件，使用dir命令。 </p>
<p>2.清屏操作，使用cls命令。 </p>
<p>3.切换目录，使用cd命令。 </p>
<p>4.Tab键自动补全路径。 </p>
<p>5.复制和粘贴操作，通过右键菜单完成。 </p>
<p>6.回到上一级目录，使用cd..命令。 </p>
<p>7.上下键选择之前输入过的命令。 </p>
<p>8.在cmd中运行文件，包括没有扩展名的文件。</p>
<h3 id="2-4-相对路径和绝对路径"><a href="#2-4-相对路径和绝对路径" class="headerlink" title="2.4 相对路径和绝对路径"></a>2.4 相对路径和绝对路径</h3><p>1.绝对路径从盘符开始，如E:\soft\test。 </p>
<p>2.相对路径基于当前目录，如..\c或b。 </p>
<p>3.CD -d命令用于在不同盘符之间切换。</p>
<h3 id="2-5-环境变量的作用"><a href="#2-5-环境变量的作用" class="headerlink" title="2.5 环境变量的作用"></a>2.5 环境变量的作用</h3><p>1.环境变量Path用于指定程序搜索路径。 </p>
<p>2.通过将路径添加到Path变量，程序可以在任意目录下运行。 </p>
<p>3.环境变量的加载在启动时完成，新开的cmd窗口才能识别新的环境变量。</p>
<h2 id="3-jdk的安装"><a href="#3-jdk的安装" class="headerlink" title="3.jdk的安装"></a>3.jdk的安装</h2><h3 id="3-1-jdk的介绍"><a href="#3-1-jdk的介绍" class="headerlink" title="3.1 jdk的介绍"></a>3.1 jdk的介绍</h3><p>1.jdk是JAVA开发工具集，包含JAVA虚拟机和一些基本的类库。 </p>
<p>2.jdk是jre的基础上增加了开发工具，用于JAVA开发。 </p>
<p>3.jdk的版本主要有8和17，其中8和11是长期支持版本。</p>
<h3 id="3-2-jdk的下载和安装"><a href="#3-2-jdk的下载和安装" class="headerlink" title="3.2 jdk的下载和安装"></a>3.2 jdk的下载和安装</h3><p>1.jdk可以从Oracle官网或OpenJDK网站下载。 </p>
<p>2.下载时需要注册账号并登录。 </p>
<p>3.安装时选择合适的操作系统和版本，可以是ese或exe。</p>
<h3 id="3-3-jdk的安装检测"><a href="#3-3-jdk的安装检测" class="headerlink" title="3.3 jdk的安装检测"></a>3.3 jdk的安装检测</h3><p>1.安装完成后，通过cmd输入JAVA或JAVA_HOME来检测安装是否成功。 </p>
<p>2.如果输入JAVA或JAVA_HOME能显示版本信息，则表示环境配置正确。</p>
<h2 id="5-Windows注意事项"><a href="#5-Windows注意事项" class="headerlink" title="5.Windows注意事项"></a>5.Windows注意事项</h2><h3 id="5-1-Windows路径命名规范"><a href="#5-1-Windows路径命名规范" class="headerlink" title="5.1 Windows路径命名规范"></a>5.1 Windows路径命名规范</h3><p>1.Windows系统中路径命名应避免使用中文、空格和特殊符号，以防止出现错误。 </p>
<p>2.计算机名也应避免使用中文，以确保软件的正常运行。 </p>
<p>3.国外软件在Windows系统中对中文路径的兼容性较差。</p>
<h3 id="5-2-环境变量配置"><a href="#5-2-环境变量配置" class="headerlink" title="5.2 环境变量配置"></a>5.2 环境变量配置</h3><p>1.安装Python时，建议将Python的安装路径和脚本路径添加到系统环境变量中。 </p>
<p>2.通过配置环境变量，可以方便地运行Python解释器和脚本。 </p>
<p>3.在Windows系统中，可以使用path变量来添加Python的安装路径和脚本路径。</p>
<h3 id="5-3-计算机名对软件运行的影响"><a href="#5-3-计算机名对软件运行的影响" class="headerlink" title="5.3 计算机名对软件运行的影响"></a>5.3 计算机名对软件运行的影响</h3><p>1.计算机名使用中文可能导致某些软件无法正常运行，尤其是国外软件。 </p>
<p>2.修改计算机名为英文或数字可以解决某些软件运行问题。 </p>
<p>3.在虚拟机中可以方便地修改计算机名以进行测试。</p>
<h2 id="6-Android-Studio"><a href="#6-Android-Studio" class="headerlink" title="6.Android Studio"></a>6.Android Studio</h2><h3 id="6-1-安装与配置"><a href="#6-1-安装与配置" class="headerlink" title="6.1 安装与配置"></a>6.1 安装与配置</h3><p>1.Android Studio是一个强大的IDE工具，用于安卓开发和逆向工程。 </p>
<p>2.安装过程包括下载安装包和选择安装路径，建议不要将Android Studio安装在系统盘。</p>
<h3 id="6-2-启动与配置"><a href="#6-2-启动与配置" class="headerlink" title="6.2 启动与配置"></a>6.2 启动与配置</h3><p>1.启动Android Studio时选择不导入任何配置文件。 </p>
<p>2.选择自定义设置，并配置SDK的安装路径。 </p>
<p>3.配置模拟器的内存和主题选择。</p>
<h3 id="6-3-SDK的配置与管理"><a href="#6-3-SDK的配置与管理" class="headerlink" title="6.3 SDK的配置与管理"></a>6.3 SDK的配置与管理</h3><p>1.通过SDK Manager配置SDK，包括安装不同版本的SDK和工具。 </p>
<p>2.选择安装安卓10（API 29）和必要的build tools、NDK和CMake。</p>
<p>3.安装Google USB Driver以连接谷歌手机。</p>
<h3 id="6-4-创建安卓项目"><a href="#6-4-创建安卓项目" class="headerlink" title="6.4 创建安卓项目"></a>6.4 创建安卓项目</h3><p>1.选择创建Native C++项目以测试NDK支持。 </p>
<p>2.输入项目名称和包名，选择保存路径和语言（Java或Kotlin）。 </p>
<p>3.选择最小支持的SDK版本和C++标准。</p>
<h3 id="6-5-工程目录结构"><a href="#6-5-工程目录结构" class="headerlink" title="6.5 工程目录结构"></a>6.5 工程目录结构</h3><p>1.项目目录包括工程级别的配置文件和模块级别的代码文件。 </p>
<p>2.模块目录结构包括src、main、java和gradle文件。 </p>
<p>3.gradle文件中配置SDK版本、build tools版本和编译目标API版本。</p>
<h3 id="6-6-SDK目录结构"><a href="#6-6-SDK目录结构" class="headerlink" title="6.6 SDK目录结构"></a>6.6 SDK目录结构</h3><p>1.SDK目录包括build tools、platform tools、USB driver和其他编译和打包工具。 </p>
<p>2.build tools用于编译APP，platform tools用于刷机和操控手机。</p>
<h3 id="6-7-配置文件位置"><a href="#6-7-配置文件位置" class="headerlink" title="6.7 配置文件位置"></a>6.7 配置文件位置</h3><p>1.Android Studio的配置文件包括gradle和android配置文件。 </p>
<p>2.配置文件位于C盘用户目录下，需要手动删除以重置配置。</p>
<h2 id="7-ADB（Android-Debug-Bridge）"><a href="#7-ADB（Android-Debug-Bridge）" class="headerlink" title="7.ADB（Android Debug Bridge）"></a>7.ADB（Android Debug Bridge）</h2><h3 id="7-1-作用与原理"><a href="#7-1-作用与原理" class="headerlink" title="7.1 作用与原理"></a>7.1 作用与原理</h3><p>1.adb可以在电脑端操控手机，主要用于安卓应用安装和调试。 </p>
<p>2.adb的原理是通过电脑端的客户端和服务器与手机端的adbd进程进行交互，发送指令并操控手机。</p>
<p>3.adb客户端和服务器在电脑端，而adbd进程在手机端。</p>
<h3 id="7-2-概念与命令"><a href="#7-2-概念与命令" class="headerlink" title="7.2 概念与命令"></a>7.2 概念与命令</h3><p>1.超级adb具有root权限，不需要通过SEO申请，可以通过修改adbd源码实现。 </p>
<p>2.超级adb可以使用两个命令：adb root和adb remount。 </p>
<p>3.adb root使adb在root权限下运行，adb remount将system分区挂载为可读写。</p>
<h3 id="7-3-超级adb配置与环境变量"><a href="#7-3-超级adb配置与环境变量" class="headerlink" title="7.3 超级adb配置与环境变量"></a>7.3 超级adb配置与环境变量</h3><p>1.adb在SDK的platform tools目录下，使用前需将该目录添加到环境变量中。 </p>
<p>2.通过修改环境变量，可以在任意目录下访问adb命令。 </p>
<p>3.添加环境变量后，需重启计算机使其生效。</p>
<h3 id="7-4-adb常用命令"><a href="#7-4-adb常用命令" class="headerlink" title="7.4 adb常用命令"></a>7.4 adb常用命令</h3><p>略</p>
<h2 id="8-安卓模拟环境"><a href="#8-安卓模拟环境" class="headerlink" title="8. 安卓模拟环境"></a>8. 安卓模拟环境</h2><h3 id="8-1-安装软件"><a href="#8-1-安装软件" class="headerlink" title="8.1 安装软件"></a>8.1 安装软件</h3><p>1.到官网下载9.0模拟器，并安装<br><a href="https://www.ldmnq.com/">https://www.ldmnq.com/</a></p>
<p>[更新!]适用于几乎所有安卓模拟器(7+)安装magisk的教程-简单无脑向<br><a href="https://www.52pojie.cn/thread-1583586-1-1.html">https://www.52pojie.cn/thread-1583586-1-1.html</a><br>(出处: 吾爱破解论坛)</p>
<p>2.下载配置文件</p>
<p>3.安装面具</p>
<h3 id="8-2-Magisk介绍"><a href="#8-2-Magisk介绍" class="headerlink" title="8.2 Magisk介绍"></a>8.2 Magisk介绍</h3><p>Magisk 是一套用于定制 Android 的开源软件，支持高于 Android 5.0 的设备。</p>
<p>以下是一些功能亮点：</p>
<ul>
<li><strong>MagiskSU</strong>：为应用程序提供 root 访问权限</li>
<li><strong>Magisk 模块</strong>：通过安装模块修改只读分区</li>
<li><strong>MagiskHide</strong>：从根检测 &#x2F; 系统完整性检查中隐藏 Magisk(Shamiko)</li>
<li><strong>MagiskBoot</strong> : 最完整的安卓启动镜像解包和重新打包工具</li>
</ul>
<p>#二、Android基础介绍 </p>
<h2 id="1-Android历史版本"><a href="#1-Android历史版本" class="headerlink" title="1.Android历史版本"></a>1.Android历史版本</h2><p>​	Android 4.4以前，采用dalvik &#x2F;dvm虚拟机 libdvm.so</p>
<p>​	Android 4.4，里面有dvm和art虚拟机，可以切换 libdvm.so libart.so</p>
<p>​	Android 5.0及以后，使用art虚拟机，Android系统也开始分32位和64位    </p>
<p>​	nexus5 32 6.0 -&gt; 32位    </p>
<p>​	nexus6p 64 6.0 -&gt; 64位</p>
<h2 id="2-Apk文件结构"><a href="#2-Apk文件结构" class="headerlink" title="2.Apk文件结构"></a>2.Apk文件结构</h2><p>apk 全称 Android Package，它相当于一个压缩文件，只要在电脑上将apk后缀改为zip即可解压。</p>
<table>
<thead>
<tr>
<th>文件</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>assets目录</td>
<td>存放APK的静态资源文件，比如视频，音频，图片等（不一定有但常见）</td>
</tr>
<tr>
<td>lib目录</td>
<td>armeabi-v7a基本通用所有Android设备，arm64-v8a只是用与64为的Android设备，x86常用于Android模拟器，其目录下的.so文件时c或者c++编译的动态链接库文件（不一定有但常见）</td>
</tr>
<tr>
<td>META-INF目录</td>
<td>保存应用的签名信息，签名信息可以验证APK文件的额完整性，相当于APK的身份验证（验证文件是否又被修改）</td>
</tr>
<tr>
<td>res目录</td>
<td>res目录存放资源文件，包括图片，字符串等，APK的 脸蛋由它的layout文件设计</td>
</tr>
<tr>
<td>AndroidManifest.xml文件</td>
<td>APK的应用清单信息，他描述了应用的名字，版本，权限，引用的库文件等信息</td>
</tr>
<tr>
<td>classes.dex文件</td>
<td>classes.dex是java原码编译后生成的java字节码文件，APK运行的主要逻辑</td>
</tr>
<tr>
<td>reaources.arsc文件</td>
<td>resources.arsc是编译后的二进制资源文件，它是一个映射表，映射着资源和id，通过R文件中的id就可以找到对应的资源</td>
</tr>
</tbody></table>
<h1 id="三、工具介绍"><a href="#三、工具介绍" class="headerlink" title="三、工具介绍"></a>三、工具介绍</h1><h2 id="1-IDE"><a href="#1-IDE" class="headerlink" title="1.IDE"></a>1.IDE</h2><p>IDE（集成开发环境）- IDEA</p>
<ul>
<li>IDEA介绍</li>
</ul>
<ol>
<li><p>DEA全程InteliJ IDEA</p>
</li>
<li><p>在业界被公认为最好的Java开发工具</p>
</li>
<li><p>IDEA是JetBrains公司的产品，总部位于捷克的首部布拉格</p>
</li>
<li><p>除了支持Java开发，还支持HTML、CSS、PHP、MySQL、Python等</p>
</li>
</ol>
<p>IDE（集成开发环境）- Eclipse</p>
<ul>
<li>Eclipse介绍</li>
</ul>
<ol>
<li>Eclipse是开放源代码的、基于JAva的可拓展开发平台</li>
<li>最初是由IBM公司耗资3000万美金开发的下一代IDE开发环境</li>
<li>2001年11月贡献给开源社区</li>
<li>Eclipse是目前最优秀的Java开发IDE之一</li>
</ol>
<h2 id="2-jadx"><a href="#2-jadx" class="headerlink" title="2. jadx"></a>2. jadx</h2><p>下载地址：<a href="https://github.com/skylot/jadx/releases/tag/v1.3.2">Release 1.3.2 · skylot&#x2F;jadx</a></p>
<p>1.jadx是一个常用的反编译工具，更新到1.3版本，功能强大。 </p>
<p>2.jadx安装在GitHub上，提供源代码和编译好的版本。 3.安装简单，不需要安装jadx本身，只需安装7-Zip用于解压。</p>
<p> 4.安装完成后，通过修改注册表并勾选选项，自动识别jadx。 </p>
<p>5.jadx界面默认中文版，可用于反编译APP，生成字面文件和代码。</p>
<p> 6.新版本jadx可以直接导出源代码，支持中文显示内存使用栏。</p>
<p>7.通过bat文件可以修改内存使用量，默认4GB，可改为8GB。 </p>
<p>8.jadx支持搜索类名和源代码，具有调试功能，需配置ADB。 </p>
<p>9.反混淆功能建议关闭，以免更改类名导致问题。</p>
<h2 id="3-gda"><a href="#3-gda" class="headerlink" title="3.gda"></a>3.gda</h2><p>下载地址：<a href="http://www.gda.wiki:9090/">http://www.gda.wiki:9090/</a></p>
<p>使用free版本</p>
<h2 id="4-jeb"><a href="#4-jeb" class="headerlink" title="4. jeb"></a>4. jeb</h2><p><strong>JAD与JEB的比较</strong></p>
<p>1.JAD可能反编译出的代码绿色注释部分不完整，反编译能力较弱。 </p>
<p>2.JEB反编译能力更强，适用于JAD反编译失败的APP。 </p>
<p>3.在JAD或JEB无法反编译的情况下，可以尝试使用定制ART虚拟机直接输出运行过程中的SMILE代码和寄存器参数进行分析。</p>
<p><strong>JEB的安装与使用</strong></p>
<p>1.下载JEB 4.2版本，解压后将jab.exe替换到bin目录下。 </p>
<p>2.双击jab.exe打开软件，接受协议并生成key。 </p>
<p>3.确保替换掉原jb.exe文件后，生成的东西才有用。 </p>
<p>4.软件界面延迟到2033年，可以通过拖入文件进行反编译。 </p>
<p>5.在Edit菜单下选择Language，可以切换到中文界面。 </p>
<p>6.反编译出的JAVA代码可以在Smart Code区域查看，搜索和跳转功能也十分便捷。 </p>
<p>7.JEB需要使用到JDK，并且JDK的大小目前最大为4GB，可以通过配置文件进行修改。</p>
<h2 id="5-apktool"><a href="#5-apktool" class="headerlink" title="5. apktool"></a>5. apktool</h2><p>官方地址<a href="https://maximoff.su/**apktool**/?history=1&lang=zh">https://maximoff.su/**apktool**/?history=1&amp;lang=zh</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>信息安全</tag>
        <tag>安卓逆向工程</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin编程语言</title>
    <url>/2025/02/24/Kotlin/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统</title>
    <url>/2025/02/24/Linux%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="📃基础命令"><a href="#📃基础命令" class="headerlink" title="📃基础命令"></a>📃基础命令</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1.目录结构"></a>1.目录结构</h3><p>Linux的目录结构是一个树形结构，Windows系统可以拥有多个盘符，即顶级目录，如C盘、D盘、E盘等。</p>
<p>Linux没有盘符这个概念，只有一个顶级目录  &#x2F;  ，所有文件都在它下面。</p>
<p>路径描述：</p>
<ul>
<li>Linux系统中，路径之间的层级关系，使用：&#x2F; 表示</li>
<li>Windows系统中，路径之间的层级关系，使用：\ 表示</li>
</ul>
<h3 id="2-Linux命令入门"><a href="#2-Linux命令入门" class="headerlink" title="2.Linux命令入门"></a>2.Linux命令入门</h3><h4 id="（1）基础介绍"><a href="#（1）基础介绍" class="headerlink" title="（1）基础介绍"></a>（1）基础介绍</h4><p>学习Linux，本质是学习在命令行下熟练使用Linux的各类命令。</p>
<ul>
<li>命令行：即Linux终端（Terminal），是一种命令提示符页面。以纯“字符”的形式操作系统，可以使用各种字符化命令对系统发出操作指令。</li>
<li>命令：即Linux程序。一个命令就是一个Linux的程序。命令没有图形化页面，可以在命令行（终端中）提供字符化的反馈。</li>
</ul>
<p>无论是什么命令，用于什么用途，在Linux中，命令有其通用的格式：</p>
<p>command  [-options]  [parameter]</p>
<ul>
<li>command：命令本身</li>
<li>-options：[可选，非必填]命令的一些选项，可以通过选项控制命令的行为细节</li>
<li>parameter：[可选，非必填]命令的参数，多数用于命令的指向目标等</li>
</ul>
<p><font size=3 color="red">语法中的[]，表示可选的意思</font></p>
<p>示例：</p>
<ul>
<li>ls -l&#x2F;home&#x2F;itheima，ls是命令本身，-l是选项，&#x2F;home&#x2F;itheima是参数<ul>
<li>意思是以列表的形式，显示&#x2F;home&#x2F;itheima目录内的内容</li>
</ul>
</li>
<li>cp -r test1 test2，cp是命令本身，-r是选项，test1和test2是参数<ul>
<li>意思是复制文件夹test1成为test2</li>
</ul>
</li>
</ul>
<h4 id="（2）ls命令"><a href="#（2）ls命令" class="headerlink" title="（2）ls命令"></a>（2）ls命令</h4><p>ls命令的作用是列出目录下的内容，语法细节如下：</p>
<p>ls  [-a -l -h]  [Linux路径]</p>
<ul>
<li>-a -l -h是可选的选项</li>
<li>Linux路径是此命令可选参数</li>
</ul>
<p>当不使用选项和参数，直接使用ls命令本体，表示：以平铺形式，，如果不给定参数，列出当前工作目录下的内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250210173128911.png"></p>
<p>显示根目录下所有内容</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215100642348.png"></p>
<h5 id="1）-a选项"><a href="#1）-a选项" class="headerlink" title="1）-a选项"></a>1）-a选项</h5><ul>
<li>-a选项，表示：all的意思，即出全部文件（包含隐藏的文件&#x2F;文件夹）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215100911897.png"></p>
<ul>
<li>图中以.开头的，表示的是Linux系统的隐藏文件&#x2F;文件夹（只要以.开头，就能自动隐藏）</li>
<li>只有通过-a选项，才能看到这些隐藏文件&#x2F;文件夹</li>
</ul>
<h5 id="2）-l选项"><a href="#2）-l选项" class="headerlink" title="2）-l选项"></a>2）-l选项</h5><ul>
<li>-l选项，表示：以列表（竖向排列）的形式展示内容，并展示更多信息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215101446505.png"></p>
<p>语法中的选项是可以组合使用的，比如学习的-a和-l可以组合应用。</p>
<p>写法：</p>
<ul>
<li>ls -l -a</li>
<li>ls -la</li>
<li>ls -al</li>
</ul>
<p>上述三种写法，都是一样的，表示同时应用-l和-a的功能</p>
<h5 id="3）-h选项"><a href="#3）-h选项" class="headerlink" title="3）-h选项"></a>3）-h选项</h5><ul>
<li>-h表示以易于阅读的形式，列出文件大小，如K、M、G</li>
<li>-h选项必须搭配-l一起使用</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215104710720.png"></p>
<h3 id="3-目录切换（cd-pwd）"><a href="#3-目录切换（cd-pwd）" class="headerlink" title="3.目录切换（cd&#x2F;pwd）"></a>3.目录切换（cd&#x2F;pwd）</h3><h4 id="（1）cd切换工作目录"><a href="#（1）cd切换工作目录" class="headerlink" title="（1）cd切换工作目录"></a>（1）cd切换工作目录</h4><p>当Linux终端打开时，会默认以用户的HOME目录作为当前的工作目录</p>
<p>我们可以通过cd命令，更改当前所在的工作目录。</p>
<p>cd命令来自英文：Change Directory</p>
<p>语法： cd [Linux路径]</p>
<ul>
<li>cd命令无需选项，只有参数，表示要切换到哪个目录下</li>
<li>cd命令直接执行，不写参数，表示回到用户的HOME目录</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215111724874.png"></p>
<h4 id="（2）pwd查看当前工作目录"><a href="#（2）pwd查看当前工作目录" class="headerlink" title="（2）pwd查看当前工作目录"></a>（2）pwd查看当前工作目录</h4><p>通过ls验证当前的工作目录，其实是不恰当的。</p>
<p>可以通过pwd命令，来查看当前所在的工作目录</p>
<p>pwd命令来自：Print WOrkDirectory</p>
<p>语法：pwd</p>
<ul>
<li>pwd命令，无选项，无参数，直接输入pwd即可</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250215112014237.png"></p>
<h3 id="4-路径命令"><a href="#4-路径命令" class="headerlink" title="4.路径命令"></a>4.路径命令</h3><h4 id="（1）相对路径和绝对路径"><a href="#（1）相对路径和绝对路径" class="headerlink" title="（1）相对路径和绝对路径"></a>（1）相对路径和绝对路径</h4><ul>
<li>cd&#x2F;home&#x2F;itheima&#x2F;Desltop	绝对路径写法</li>
<li>cd Desktop      相对路径写法</li>
</ul>
<p>绝对路径：以<font color="red">根目录</font>为起点，描述路径的一种写法，路径描述以&#x2F;开头</p>
<p>相对路径：以<font color="red">当前工作目录</font>为起点，描述路径的一种写法，路径描述无需以&#x2F;开头</p>
<h4 id="（2）特殊路径符"><a href="#（2）特殊路径符" class="headerlink" title="（2）特殊路径符"></a>（2）特殊路径符</h4><ul>
<li>.          表示当前目录，比如：cd.&#x2F;Desktop表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致</li>
<li>..         表示上一级目录，比如：cd.. 即可切换到上一级目录，cd..&#x2F;..切换到上两级的目录</li>
<li>~         表示HOME目录，比如：cd~ 即可切换到HOME目录或cd ~&#x2F;Desktop，切换到HOME内的Desktop目录</li>
</ul>
<h3 id="5-创建目录（mkdir）"><a href="#5-创建目录（mkdir）" class="headerlink" title="5.创建目录（mkdir）"></a>5.创建目录（mkdir）</h3><p>通过mkdir命令创建新的目录（文件夹）</p>
<p>mkdir来自英文：Make Directory</p>
<p>语法：mkdir [-p] Linux路径</p>
<ul>
<li>参数必填，表示Linux路径，即要创建文件夹的路径，相对路径或绝对路径均可</li>
<li>xxxxxxxxxx457 1import tkinter as tk2from tkinter import messagebox, simpledialog, filedialog3import json4​5class TravelManagementSystem:6    def <strong>init</strong>(self, root):7        self.root &#x3D; root8        self.root.title(“旅游管理系统”)9        self.root.geometry(“400x300”)10        self.attractions &#x3D; []11        self.routes &#x3D; []12        self.center_window(self.root)13        self.create_main_menu()14​15    def center_window(self, window):16        window.update_idletasks()17        width &#x3D; window.winfo_width()18        height &#x3D; window.winfo_height()19        x &#x3D; (window.winfo_screenwidth() &#x2F;&#x2F; 2) - (width &#x2F;&#x2F; 2)20        y &#x3D; (window.winfo_screenheight() &#x2F;&#x2F; 2) - (height &#x2F;&#x2F; 2)21        window.geometry(f”{width}x{height}+{x}+{y}”)22​23    def create_main_menu(self):24        main_frame &#x3D; tk.Frame(self.root)25        main_frame.pack(expand&#x3D;True)26​27        options_first_row &#x3D; [“景点管理”, “路线管理”, “费用结算”]28        options_second_row &#x3D; [“报告生成”, “保存数据”, “加载数据”]29        options_third_row &#x3D; [“退出程序”]30        row_frames &#x3D; [tk.Frame(main_frame) for _ in range(3)]31        for frame in row_frames:32            frame.pack(fill&#x3D;tk.X, pady&#x3D;5)33        for i, option in enumerate(options_first_row):34            button &#x3D; tk.Button(row_frames[0], text&#x3D;option, command&#x3D;lambda opt&#x3D;option: self.handle_option(opt), width&#x3D;15)35            button.pack(side&#x3D;tk.LEFT, expand&#x3D;True, padx&#x3D;5)36        for i, option in enumerate(options_second_row):37            button &#x3D; tk.Button(row_frames[1], text&#x3D;option, command&#x3D;lambda opt&#x3D;option: self.handle_option(opt), width&#x3D;15)38            button.pack(side&#x3D;tk.LEFT, expand&#x3D;True, padx&#x3D;5)39        for i, option in enumerate(options_third_row):40            button &#x3D; tk.Button(row_frames[2], text&#x3D;option, command&#x3D;lambda opt&#x3D;option: self.handle_option(opt), width&#x3D;15)41            button.pack(side&#x3D;tk.LEFT, expand&#x3D;True, padx&#x3D;5)42​43    def handle_option(self, option):44        if option &#x3D;&#x3D; “景点管理”:45            self.manage_attractions()46        elif option &#x3D;&#x3D; “路线管理”:47            self.manage_routes()48        elif option &#x3D;&#x3D; “费用结算”:49            self.calculate_costs()50        elif option &#x3D;&#x3D; “报告生成”:51            self.generate_report()52        elif option &#x3D;&#x3D; “保存数据”:53            self.save_data()54        elif option &#x3D;&#x3D; “加载数据”:55            self.load_data()56        elif option &#x3D;&#x3D; “退出程序”:57            self.root.quit()58​59    def manage_attractions(self):60        attraction_window &#x3D; tk.Toplevel(self.root)61        attraction_window.title(“景点管理”)62        attraction_window.geometry(“400x400”)63        self.center_window(attraction_window)64        attraction_window.grab_set()  65​66        attractions_listbox &#x3D; tk.Listbox(attraction_window, height&#x3D;8, width&#x3D;40)67        attractions_listbox.pack(pady&#x3D;10)68​69        for attraction in self.attractions:70            attractions_listbox.insert(tk.END, attraction[‘name’])71​72        def show_attraction_details(event):73            selected_indices &#x3D; attractions_listbox.curselection()74            if not selected_indices:75                return76            selected_index &#x3D; selected_indices[0]77            attraction &#x3D; self.attractions[selected_index]78​79            detail_window &#x3D; tk.Toplevel(attraction_window)80            detail_window.title(f”景点详情 - {attraction[‘name’]}”)81            detail_window.geometry(“400x300”)82            self.center_window(detail_window)83            detail_window.grab_set()84​85            details_text &#x3D; (f”名称: {attraction[‘name’]}\n位置: {attraction[‘location’]}\n描述: {attraction[‘description’]}\n”86                            f”门票价格: {attraction[‘ticket_price’]}元\n开放时间: {attraction[‘play_time’]}小时”)87            tk.Label(detail_window, text&#x3D;details_text).pack(pady&#x3D;10)88​89            modify_button &#x3D; tk.Button(detail_window, text&#x3D;”修改景点”,90                                      command&#x3D;lambda idx&#x3D;selected_index: self.modify_attraction(idx, detail_window))91            delete_button &#x3D; tk.Button(detail_window, text&#x3D;”删除景点”,92                                      command&#x3D;lambda idx&#x3D;selected_index: self.delete_attraction(idx, detail_window))93​94            modify_button.pack(side&#x3D;tk.LEFT, padx&#x3D;5)95            delete_button.pack(side&#x3D;tk.RIGHT, padx&#x3D;5)96​97        attractions_listbox.bind(‘&lt;<ListboxSelect>&gt;’, show_attraction_details)98​99        add_button &#x3D; tk.Button(attraction_window, text&#x3D;”添加景点”,100                               command&#x3D;lambda: self.add_attraction(attraction_window))101        search_button &#x3D; tk.Button(attraction_window, text&#x3D;”查找景点”, command&#x3D;self.search_attraction)102​103        add_button.pack(side&#x3D;tk.LEFT, padx&#x3D;5)104        search_button.pack(side&#x3D;tk.RIGHT, padx&#x3D;5)105​106    def add_attraction(self, parent_window):107        add_window &#x3D; tk.Toplevel(parent_window)108        add_window.title(“添加景点”)109        add_window.geometry(“400x300”)110        self.center_window(add_window)111        add_window.grab_set()  112​113        tk.Label(add_window, text&#x3D;”景点名称:”).grid(row&#x3D;0, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)114        name_entry &#x3D; tk.Entry(add_window)115        name_entry.grid(row&#x3D;0, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)116​117        tk.Label(add_window, text&#x3D;”位置:”).grid(row&#x3D;1, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)118        location_entry &#x3D; tk.Entry(add_window)119        location_entry.grid(row&#x3D;1, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)120​121        tk.Label(add_window, text&#x3D;”描述:”).grid(row&#x3D;2, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)122        description_entry &#x3D; tk.Entry(add_window)123        description_entry.grid(row&#x3D;2, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)124​125        tk.Label(add_window, text&#x3D;”门票价格(元):”).grid(row&#x3D;3, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)126        ticket_price_entry &#x3D; tk.Entry(add_window)127        ticket_price_entry.grid(row&#x3D;3, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)128​129        tk.Label(add_window, text&#x3D;”开放时间:”).grid(row&#x3D;4, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)130        play_time_entry &#x3D; tk.Entry(add_window)131        play_time_entry.grid(row&#x3D;4, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)132​133        confirm_button &#x3D; tk.Button(add_window, text&#x3D;”确认”,134                                   command&#x3D;lambda: self.confirm_add_attraction(name_entry.get(), location_entry.get(),135                                                                               description_entry.get(),136                                                                               ticket_price_entry.get(),137                                                                               play_time_entry.get(), add_window,138                                                                               parent_window))139        confirm_button.grid(row&#x3D;5, column&#x3D;0, columnspan&#x3D;2, pady&#x3D;10)140​141    def confirm_add_attraction(self, name, location, description, ticket_price, play_time, add_window, parent_window):142        try:143            ticket_price &#x3D; float(ticket_price)144        except ValueError:145            messagebox.showwarning(“警告”, “门票价格必须是数字！”, parent&#x3D;add_window)146            return147​148        if all([name, location, description, ticket_price, play_time]):149            new_attraction &#x3D; {150                ‘name’: name,151                ‘location’: location,152                ‘description’: description,153                ‘ticket_price’: ticket_price,154                ‘play_time’: play_time155            }156            self.attractions.append(new_attraction)157            messagebox.showinfo(“成功”, “景点已添加”, parent&#x3D;add_window)158            add_window.destroy()159            parent_window.destroy()160        else:161            messagebox.showwarning(“警告”, “请填写所有字段！”, parent&#x3D;add_window)162​163    def search_attraction(self):164        search_name &#x3D; simpledialog.askstring(“查找景点”, “请输入景点名称:”, parent&#x3D;self.root)165​166        found_attractions &#x3D; [a for a in self.attractions if a[‘name’].lower() &#x3D;&#x3D; search_name.lower()]167​168        if found_attractions:169            self.show_search_results(found_attractions)170        else:171            messagebox.showinfo(“结果”, “未找到该景点。”, parent&#x3D;self.root)172​173    def show_search_results(self, attractions):174        result_window &#x3D; tk.Toplevel(self.root)175        result_window.title(“搜索结果”)176        result_window.geometry(“400x300”)177        self.center_window(result_window)178        result_window.grab_set()179​180        for attraction in attractions:181            details_text &#x3D; (f”名称: {attraction[‘name’]}\n位置: {attraction[‘location’]}\n描述: {attraction[‘description’]}\n”182                            f”门票价格: {attraction[‘ticket_price’]}元\n开放时间: {attraction[‘play_time’]}小时”)183            tk.Label(result_window, text&#x3D;details_text).pack(pady&#x3D;5)184​185            modify_button &#x3D; tk.Button(result_window, text&#x3D;”修改景点”,186                                      command&#x3D;lambda attr&#x3D;attraction: self.modify_attraction_by_name(attr,187                                                                                                     result_window))188            delete_button &#x3D; tk.Button(result_window, text&#x3D;”删除景点”,189                                      command&#x3D;lambda attr&#x3D;attraction: self.delete_attraction_by_name(attr,190                                                                                                     result_window))191​192            modify_button.pack(side&#x3D;tk.LEFT, padx&#x3D;5)193            delete_button.pack(side&#x3D;tk.RIGHT, padx&#x3D;5)194​195    def modify_attraction(self, index, parent_window):196        attraction &#x3D; self.attractions[index]197​198        modify_window &#x3D; tk.Toplevel(parent_window)199        modify_window.title(“修改景点”)200        modify_window.geometry(“400x300”)201        self.center_window(modify_window)202        modify_window.grab_set()203​204        tk.Label(modify_window, text&#x3D;”景点名称:”).grid(row&#x3D;0, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)205        name_entry &#x3D; tk.Entry(modify_window)206        name_entry.insert(0, attraction[‘name’])207        name_entry.grid(row&#x3D;0, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)208​209        tk.Label(modify_window, text&#x3D;”位置:”).grid(row&#x3D;1, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)210        location_entry &#x3D; tk.Entry(modify_window)211        location_entry.insert(0, attraction[‘location’])212        location_entry.grid(row&#x3D;1, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)213​214        tk.Label(modify_window, text&#x3D;”描述:”).grid(row&#x3D;2, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)215        description_entry &#x3D; tk.Entry(modify_window)216        description_entry.insert(0, attraction[‘description’])217        description_entry.grid(row&#x3D;2, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)218​219        tk.Label(modify_window, text&#x3D;”门票价格(元):”).grid(row&#x3D;3, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)220        ticket_price_entry &#x3D; tk.Entry(modify_window)221        ticket_price_entry.insert(0, str(attraction[‘ticket_price’]))222        ticket_price_entry.grid(row&#x3D;3, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)223​224        tk.Label(modify_window, text&#x3D;”开放时间:”).grid(row&#x3D;4, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)225        play_time_entry &#x3D; tk.Entry(modify_window)226        play_time_entry.insert(0, str(attraction[‘play_time’]))227        play_time_entry.grid(row&#x3D;4, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)228​229        confirm_button &#x3D; tk.Button(modify_window, text&#x3D;”确认”,230                                   command&#x3D;lambda: self.confirm_modify_attraction(index, name_entry.get(),231                                                                                  location_entry.get(),232                                                                                  description_entry.get(),233                                                                                  ticket_price_entry.get(),234                                                                                  play_time_entry.get(), modify_window))235        confirm_button.grid(row&#x3D;5, column&#x3D;0, columnspan&#x3D;2, pady&#x3D;10)236​237    def confirm_modify_attraction(self, index, name, location, description, ticket_price, play_time, window):238        try:239            ticket_price &#x3D; float(ticket_price)240        except ValueError:241            messagebox.showwarning(“警告”, “门票价格必须是数字！”, parent&#x3D;window)242            return243​244        if all([name, location, description, ticket_price, play_time]):245            self.attractions[index] &#x3D; {246                ‘name’: name,247                ‘location’: location,248                ‘description’: description,249                ‘ticket_price’: ticket_price,250                ‘play_time’: play_time251            }252            messagebox.showinfo(“成功”, “景点已修改！”, parent&#x3D;window)253            window.destroy()254        else:255            messagebox.showwarning(“警告”, “请填写所有字段！”, parent&#x3D;window)256​257    def delete_attraction(self, index, parent_window):258        del self.attractions[index]259        messagebox.showinfo(“成功”, “景点已删除！”, parent&#x3D;parent_window)260        parent_window.destroy()261​262    def modify_attraction_by_name(self, attraction, parent_window):263        index &#x3D; next((i for i, a in enumerate(self.attractions) if a[‘name’] &#x3D;&#x3D; attraction[‘name’]), None)264        if index is not None:265            self.modify_attraction(index, parent_window)266​267    def delete_attraction_by_name(self, attraction, parent_window):268        index &#x3D; next((i for i, a in enumerate(self.attractions) if a[‘name’] &#x3D;&#x3D; attraction[‘name’]), None)269        if index is not None:270            self.delete_attraction(index, parent_window)271​272    def manage_routes(self):273        route_window &#x3D; tk.Toplevel(self.root)274        route_window.title(“路线管理”)275        route_window.geometry(“400x400”)276        self.center_window(route_window)277        route_window.grab_set()278​279        frame_top &#x3D; tk.Frame(route_window)280        frame_top.pack(pady&#x3D;10)281​282        tk.Label(frame_top, text&#x3D;”选择景点:”).grid(row&#x3D;0, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)283​284        self.selected_attractions &#x3D; []285        for i, attraction in enumerate(self.attractions):286            var &#x3D; tk.IntVar(value&#x3D;0)287            cb &#x3D; tk.Checkbutton(frame_top, text&#x3D;attraction[‘name’], variable&#x3D;var)288            cb.grid(row&#x3D;i + 1, column&#x3D;0, sticky&#x3D;’w’)289            self.selected_attractions.append(var)290​291        route_name_label &#x3D; tk.Label(frame_top, text&#x3D;”路线名称:”)292        route_name_entry &#x3D; tk.Entry(frame_top)293        route_name_label.grid(row&#x3D;len(self.attractions) + 2, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)294        route_name_entry.grid(row&#x3D;len(self.attractions) + 2, column&#x3D;1, padx&#x3D;5, pady&#x3D;5)295​296        add_route_button &#x3D; tk.Button(frame_top, text&#x3D;”添加路线”,297                                     command&#x3D;lambda entry&#x3D;route_name_entry: self.add_route(entry.get(), route_window))298        add_route_button.grid(row&#x3D;len(self.attractions) + 3, column&#x3D;0, columnspan&#x3D;2, pady&#x3D;10)299​300        view_routes_button &#x3D; tk.Button(route_window, text&#x3D;”查看路线”, command&#x3D;self.view_routes)301        view_routes_button.pack(pady&#x3D;10)302​303    def add_route(self, route_name, parent_window):304        if not route_name.strip():305            messagebox.showwarning(“警告”, “请输入路线名称！”, parent&#x3D;parent_window)306            return307​308        selected_indices &#x3D; [i for i, var in enumerate(self.selected_attractions) if var.get()]309        if not selected_indices:310            messagebox.showwarning(“警告”, “请选择至少一个景点！”, parent&#x3D;parent_window)311            return312​313        selected_attractions &#x3D; [self.attractions[i][‘name’] for i in selected_indices]314​315        new_route &#x3D; {316            ‘name’: route_name,317            ‘attractions’: selected_attractions318        }319​320        self.routes.append(new_route)321        messagebox.showinfo(“成功”, “路线已添加！”, parent&#x3D;parent_window)322        parent_window.destroy()323​324    def view_routes(self):325        view_window &#x3D; tk.Toplevel(self.root)326        view_window.title(“查看路线”)327        view_window.geometry(“400x300”)328        self.center_window(view_window)329        view_window.grab_set()  330​331        for route in self.routes:332            route_info &#x3D; f”路线名称: {route[‘name’]}\n景点: {‘, ‘.join(route[‘attractions’])}”333            tk.Label(view_window, text&#x3D;route_info).pack(pady&#x3D;5)334​335    def calculate_costs(self):336        cost_window &#x3D; tk.Toplevel(self.root)337        cost_window.title(“费用结算”)338        cost_window.geometry(“400x300”)339        self.center_window(cost_window)340        cost_window.grab_set()  341​342        frame_top &#x3D; tk.Frame(cost_window)343        frame_top.pack(pady&#x3D;10)344​345        tk.Label(frame_top, text&#x3D;”选择路线:”).grid(row&#x3D;0, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)346​347        self.selected_routes &#x3D; []348        for i, route in enumerate(self.routes):349            var &#x3D; tk.IntVar(value&#x3D;0)350            cb &#x3D; tk.Checkbutton(frame_top, text&#x3D;route[‘name’], variable&#x3D;var)351            cb.grid(row&#x3D;i + 1, column&#x3D;0, sticky&#x3D;’w’)352            self.selected_routes.append(var)353​354        calculate_button &#x3D; tk.Button(frame_top, text&#x3D;”计算费用”, command&#x3D;lambda: self.calculate_total_cost(cost_window))355        calculate_button.grid(row&#x3D;len(self.routes) + 2, column&#x3D;0, columnspan&#x3D;2, pady&#x3D;10)356​357    def calculate_total_cost(self, window):358        selected_indices &#x3D; [i for i, var in enumerate(self.selected_routes) if var.get()]359        if not selected_indices:360            messagebox.showwarning(“警告”, “请选择至少一条路线！”, parent&#x3D;window)361            return362​363        total_cost &#x3D; 0364        try:365            for i in selected_indices:366                route &#x3D; self.routes[i]367                for attraction_name in route[‘attractions’]:368                    attraction &#x3D; next((a for a in self.attractions if a[‘name’] &#x3D;&#x3D; attraction_name), None)369                    if attraction:370                        total_cost +&#x3D; float(attraction[‘ticket_price’])371                    else:372                        messagebox.showwarning(“警告”, “未找到该景点的门票价格！”, parent&#x3D;window)373                        return374        except Exception as e:375            messagebox.showerror(“错误”, f”计算费用时发生错误: {str(e)}”, parent&#x3D;window)376            return377​378        messagebox.showinfo(“总费用”, f”所选路线的总费用为: {total_cost}元”, parent&#x3D;window)379        window.destroy()380​381    def generate_report(self):382        report_window &#x3D; tk.Toplevel(self.root)383        report_window.title(“报告生成”)384        report_window.geometry(“400x300”)385        self.center_window(report_window)386        report_window.grab_set()387        frame_top &#x3D; tk.Frame(report_window)388        frame_top.pack(pady&#x3D;10)389        tk.Label(frame_top, text&#x3D;”选择路线:”).grid(row&#x3D;0, column&#x3D;0, padx&#x3D;5, pady&#x3D;5)390​391        self.report_selected_routes &#x3D; []392        for i, route in enumerate(self.routes):393            var &#x3D; tk.IntVar(value&#x3D;0)394            cb &#x3D; tk.Checkbutton(frame_top, text&#x3D;route[‘name’], variable&#x3D;var)395            cb.grid(row&#x3D;i + 1, column&#x3D;0, sticky&#x3D;’w’)396            self.report_selected_routes.append(var)397​398        save_button &#x3D; tk.Button(frame_top, text&#x3D;”保存报告”, command&#x3D;lambda: self.save_report(report_window))399        save_button.grid(row&#x3D;len(self.routes) + 2, column&#x3D;0, columnspan&#x3D;2, pady&#x3D;10)400​401    def save_report(self, window):402        selected_indices &#x3D; [i for i, var in enumerate(self.report_selected_routes) if var.get()]403        if not selected_indices:404            messagebox.showwarning(“警告”, “请选择至少一条路线！”, parent&#x3D;window)405            return406​407        filename &#x3D; filedialog.asksaveasfilename(defaultextension&#x3D;”.txt”,408                                                filetypes&#x3D;[(“Text files”, “<em>.txt”), (“All files”, “</em>.<em>“)],409                                                parent&#x3D;window)410​411        if filename:412            with open(filename, ‘w’) as file:413                for i in selected_indices:414                    route &#x3D; self.routes[i]415                    file.write(f”路线名称: {route[‘name’]}\n景点:\n”)416                    for attraction_name in route[‘attractions’]:417                        attraction &#x3D; next(a for a in self.attractions if a[‘name’] &#x3D;&#x3D; attraction_name)418                        file.write(419                            f”- 名称: {attraction[‘name’]}\n  位置: {attraction[‘location’]}\n  描述: {attraction[‘description’]}\n  “420                            f”门票价格: {attraction[‘ticket_price’]}元\n  开放时间: {attraction[‘play_time’]}小时\n”)421                    file.write(“\n”)422​423            messagebox.showinfo(“成功”, “报告已保存！”, parent&#x3D;window)424        window.destroy()425​426    def save_data(self):427        data &#x3D; {428            ‘attractions’: self.attractions,429            ‘routes’: self.routes430        }431​432        filename &#x3D; filedialog.asksaveasfilename(defaultextension&#x3D;”.json”,433                                                filetypes&#x3D;[(“JSON files”, “</em>.json”), (“All files”, “<em>.</em>“)])434        if filename:435            with open(filename, ‘w’) as file:436                json.dump(data, file, ensure_ascii&#x3D;False, indent&#x3D;4)437​438            messagebox.showinfo(“成功”, “数据已保存！”)439​440    def load_data(self):441        filename &#x3D; filedialog.askopenfilename(filetypes&#x3D;[(“JSON files”, “<em>.json”), (“All files”, “</em>.*”)])442        if filename:443            choice &#x3D; messagebox.askyesno(“确认”, “您希望覆盖现有数据还是添加到现有数据？\n点击’是’覆盖，点击’否’添加。”)444            with open(filename, ‘r’) as file:445                data &#x3D; json.load(file)446            if choice:447                self.attractions &#x3D; data.get(‘attractions’, [])448                self.routes &#x3D; data.get(‘routes’, [])449            else:450                self.attractions.extend(data.get(‘attractions’, []))451                self.routes.extend(data.get(‘routes’, []))452            messagebox.showinfo(“成功”, “数据已加载！”)453​454if <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“:455    root &#x3D; tk.Tk()456    app &#x3D; TravelManagementSystem(root)457    root.mainloop()python</li>
</ul>
<p>创建test文件尝试，特殊路径符。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250218200654870.png"></p>
<p>如果想一次性创建多个层级的目录，如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250218201240142.png"></p>
<p>会报错，因为上级目录one并不存在，所以无法创建two目录</p>
<p>此时可以通过-p选项，将一整个链条都创建完成</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250218201723944.png"></p>
<p>注意：创建文件夹需要修改权限，请确保操作均在HOME文件目录内，不要再HOME外操作涉及到权限问题，HOME外无法完成</p>
<h3 id="6-文件操作（touch、cat、more、cp、mv）"><a href="#6-文件操作（touch、cat、more、cp、mv）" class="headerlink" title="6.文件操作（touch、cat、more、cp、mv）"></a>6.文件操作（touch、cat、more、cp、mv）</h3><h4 id="（1）touch创建文件"><a href="#（1）touch创建文件" class="headerlink" title="（1）touch创建文件"></a>（1）touch创建文件</h4><p>语法：touch Linux路径</p>
<ul>
<li>touch命令无选项，参数必填，表示要创建的文件路径，相对、绝对、特殊路径符均可以使用</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250218203720157.png"></p>
<p>通过观察可以知道文件夹的颜色为深色，文件为白色。但是仅通过颜色判断不够准确，建议使用ls -l，查看文件和文件夹。</p>
<h4 id="（2）cat命令查看文件内容"><a href="#（2）cat命令查看文件内容" class="headerlink" title="（2）cat命令查看文件内容"></a>（2）cat命令查看文件内容</h4><p>在有了文件后，可以通过cat命令查看文件的内容</p>
<p>语法：cat Linux路径</p>
<ul>
<li>cat同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li>
</ul>
<p>基于vi编辑器先在txt文件中编辑好内容，使用cat命令查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221163319900.png"></p>
<h4 id="（3）more命令查看文件内容"><a href="#（3）more命令查看文件内容" class="headerlink" title="（3）more命令查看文件内容"></a>（3）more命令查看文件内容</h4><p>和cat的不同之处：</p>
<ul>
<li>cat是直接将内容全部显示出来</li>
<li>more支持翻页，如果文件内容过多，可以一页一页的展示</li>
</ul>
<p>语法：more Linux路径</p>
<ul>
<li>同样没有选项，只有必填参数，参数表示：被查看的文件路径，相对、绝对、特殊路径符都可以使用</li>
<li>在查看过程中，通过空格翻页</li>
<li>通过q退出查看</li>
</ul>
<p>（4）cp命令复制文件文件夹</p>
<p>cp命令可以用于复制文件\文件夹，cp命令来自英文单词：copy</p>
<p>语法：cp [-r] 参数1 参数2</p>
<ul>
<li>-r选项，可选，用于复制文件夹使用，表示递归</li>
<li>参数1，Linux路径，表示被复制的文件或文件夹</li>
<li>参数2，Linux路径，表示要复制去的地方</li>
</ul>
<p>在test1文件夹中新建一个test2文件夹，并将test1文件夹内的hello.txt复制到test2文件夹中</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221164410505-1740127505166-1.png"></p>
<h4 id="（5）mv命令移动文件或文件夹"><a href="#（5）mv命令移动文件或文件夹" class="headerlink" title="（5）mv命令移动文件或文件夹"></a>（5）mv命令移动文件或文件夹</h4><p>mv命令可以用于移动文件或文件夹，mv命令来自英文单词：move</p>
<p>语法：mv 参数1 参数2</p>
<ul>
<li>参数1，Linux路径，表示被移动的文件或文件夹</li>
<li>参数2，Linux路径，表示要移动去的地方，如果目标不存在，则进行改名，确保目标存在</li>
</ul>
<p>在test1文件夹中新建test3文件夹，并将test1文件夹中的hello.txt移动到test3文件夹中。（相同效果对文件夹也有效，只需要在cp 后面加上 -r）</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221164928437.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221171025784.png"></p>
<p>在test3文件夹中新建文件hello1.txt，并编写文件输入“ zai xue xi bu yao da rao”，使用mv命令 mv hello.txt hello1.txt ，后会出现提示确认否，输入yes确认后，会发现hello.txt不见了，只剩下了hello1.txt，查看hello1.txt中的内容，显示的是”tang x tang”，可以发现hello1.txt中的内容被hello.txt的内容覆盖，换言之，hello.txt文件的文件名，<font color="red">改名</font>为了hello1.txt。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221165832517.png"></p>
<p>（6）rm命令删除文件夹、文件</p>
<p>rm命令来自英文单词：remove</p>
<p>语法：rm [-r -f] 参数1 参数2……参数n</p>
<ul>
<li>同cp命令一样，-r选项用于删除文件夹</li>
<li>-f表示force，强制删除（不糊i弹出提示确认信息）<ul>
<li>普通用户删除内容不会弹出提示，只有root管理用用户删除内容会有提示</li>
<li>所以一般普通用户用不到-f选项</li>
</ul>
</li>
<li>参数1、参数2……、参数n表示要删除的文件或文件夹路径，按照空格隔开</li>
</ul>
<p>将test1文件夹中的test4文件夹删除</p>
<p><img src="/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA.assets/image-20250221171254034-1740129226994-4.png"></p>
<h5 id="删除文件、文件夹-通配符"><a href="#删除文件、文件夹-通配符" class="headerlink" title="删除文件、文件夹 - 通配符"></a>删除文件、文件夹 - 通配符</h5><p>rm命令支持通配符*，用来做模糊匹配</p>
<ul>
<li>符号*表示通配符，即匹配任意内容（包含空），示例：</li>
<li>test*，表示匹配任何以test开头的内容</li>
<li>*test，表示匹配任何以test结尾的内容</li>
<li>*test *，表示匹配任何包含test的内容</li>
<li>删除文件夹，必须使用-r选项才可以</li>
<li>强制删除，-f选项</li>
<li>普通用户可以输入su - root，并输入密码临时切换到root用户体验</li>
<li>通过输入exit命令，退回普通用户。（临时用root，用完记得退出）</li>
</ul>
<p>将test1文件夹中以test开头的文件夹全部删除，在提示是否删除test2文件夹时没有输入yes所以test2文件夹被保留，但test2文件夹中的内容都被删除了</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221171930804.png"></p>
<p><font color="red">注意：rm是一个危险的命令，特别是在处于root（超级管理员）用户的时候，请谨慎使用。如下命令，千万不要再root管理员用户下执行（效果等同于在Windows上执行C盘格式化）：</font></p>
<p><font color="red">rm -rf &#x2F;</font></p>
<p><font color="red">rm -rf &#x2F;*</font></p>
<h3 id="7-查找命令（which、find）"><a href="#7-查找命令（which、find）" class="headerlink" title="7.查找命令（which、find）"></a>7.查找命令（which、find）</h3><h4 id="（1）which查看命令的程序文件位置"><a href="#（1）which查看命令的程序文件位置" class="headerlink" title="（1）which查看命令的程序文件位置"></a>（1）which查看命令的程序文件位置</h4><p>前面学习的Linux命令，其实它们的本体就是一个个的二进制可执行程序，和Windows系统中的.exe文件，是一个意思。</p>
<p>可以通过which命令，查看所使用的一系列命令的程序文件存放在哪儿</p>
<p>语法：which 要查找的命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221191206787.png"></p>
<h4 id="（2）find命令按文件名查找文件"><a href="#（2）find命令按文件名查找文件" class="headerlink" title="（2）find命令按文件名查找文件"></a>（2）find命令按文件名查找文件</h4><p>类似图形化系统提供的搜索功能，搜索指定文件</p>
<p>在Linux系统中，可以通过find命令去搜索指定的文件。</p>
<p>语法：find 起始路径 -name “被查找文件名”</p>
<p>查找hello.txt文件和查找test文件夹</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221191939509.png"></p>
<h5 id="find命令-通配符"><a href="#find命令-通配符" class="headerlink" title="find命令 通配符"></a>find命令 通配符</h5><p>语法：find 起始路径 -name “被查找文件名”</p>
<p>被查找文件名，支持使用通配符*来做模糊查询</p>
<ul>
<li>符号*表示通配符，即匹配人愿意内容（包含空），示例：</li>
<li>test*，表示匹配任何以test开头的内容</li>
<li>*test，表示匹配任何以test结尾的内容</li>
<li>*test *，表示匹配任何包含test的内容</li>
</ul>
<h5 id="find命令-按文件大小查找文件"><a href="#find命令-按文件大小查找文件" class="headerlink" title="find命令 按文件大小查找文件"></a>find命令 按文件大小查找文件</h5><p>语法：find 起始路径 -size +或者-n[KMG]</p>
<ul>
<li>+、-表示大于和小于</li>
<li>n表示大小数字</li>
<li>kMG表示大小单位，k（小写字母）表示kb，M表示MB，G表示GB</li>
</ul>
<p>示例：</p>
<ul>
<li>查找小于10KB的文件：find &#x2F; -size -10k</li>
<li>查找大于100MB的文件：find &#x2F; -size +100M</li>
<li>查找大于1GB的文件：find &#x2F; -size +1G</li>
</ul>
<h3 id="8-grep、wc和管道符"><a href="#8-grep、wc和管道符" class="headerlink" title="8.grep、wc和管道符"></a>8.grep、wc和管道符</h3><h4 id="（1）grep命令-通过关键字过滤文件行"><a href="#（1）grep命令-通过关键字过滤文件行" class="headerlink" title="（1）grep命令 通过关键字过滤文件行"></a>（1）grep命令 通过关键字过滤文件行</h4><p>通过grep命令，从文件中通过关键字过滤文件行</p>
<p>语法：grep [-n] 关键字 文件路径</p>
<ul>
<li>选项-n，可选，表示在结果中显示匹配的行的行号</li>
<li>参数，关键字，必填，表示过滤的关键字，带有空格或其他特殊符号，建议使用“ ”将关键字包围起来</li>
<li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li>
</ul>
<p>下图为操作示例</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221194017857.png"></p>
<h4 id="（2）wc命令-数量统计"><a href="#（2）wc命令-数量统计" class="headerlink" title="（2）wc命令 数量统计"></a>（2）wc命令 数量统计</h4><p>通过wc命令统计文件的行数、单词数量等</p>
<p>语法：wc [-c -m -l -w] 文件路径</p>
<ul>
<li>选项，-c，统计bytes数量</li>
<li>选项，-m，统计字符数量</li>
<li>选项，-l，统计行数</li>
<li>选项，-w，统计单词数量</li>
<li>参数，文件路径，被统计的文件，可作为内容输入端口</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221200417678.png"></p>
<h4 id="（2）管道符"><a href="#（2）管道符" class="headerlink" title="（2）管道符"></a>（2）管道符</h4><p>新的特殊符号：|</p>
<p>含义：将管道符左边命令的结果，作为右边命令的输入</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221200641715.png"></p>
<p>如上图：</p>
<ul>
<li>cat hello.txt的输出结果（文件内容）</li>
<li>作为右边grep命令的输入（被过滤文件）</li>
</ul>
<h3 id="9-echo、tail和重定向符"><a href="#9-echo、tail和重定向符" class="headerlink" title="9.echo、tail和重定向符"></a>9.echo、tail和重定向符</h3><h4 id="（1）echo命令-在命令行内输出指定内容"><a href="#（1）echo命令-在命令行内输出指定内容" class="headerlink" title="（1）echo命令 在命令行内输出指定内容"></a>（1）echo命令 在命令行内输出指定内容</h4><p>语法：echo 输出内容</p>
<ul>
<li>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用“ ”包围</li>
<li>带有空格或\等特殊符号，建议使用双引号包围<ul>
<li>如果不包围的化，空格后很容易被识别为参数2，尽管echo不受影响，但是要养成习惯</li>
</ul>
</li>
</ul>
<p>在终端上显示：Holle Linux</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221201543727.png"></p>
<h5 id="反引号"><a href="#反引号" class="headerlink" title="反引号&#96;"></a>反引号&#96;</h5><p>将命令用反引号（通常也称之为飘号）&#96; 将其包围，被包围的内容，蒋辉作为命令执行，而非普通字符</p>
<p>如下图，本意是想将当前工作目录路径输出，但是pwd被当作普通字符被输出了，通过使用&#96;将其包围，就会被作为命令执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221202100907.png"></p>
<h4 id="（2）重定向符-和"><a href="#（2）重定向符-和" class="headerlink" title="（2）重定向符 &gt;和&gt;&gt;"></a>（2）重定向符 &gt;和&gt;&gt;</h4><p>特殊符号，重定向符：&gt;和&gt;&gt;</p>
<ul>
<li>&gt;，将左侧命令的结果，覆盖写入到符号右侧指定的文件中</li>
<li>&gt;&gt;，将左侧命令的结果，追加写入到符号右侧指定的文件中</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250221203410477.png"></p>
<h4 id="（3）tail命令-查看尾部内容-跟踪最新更改"><a href="#（3）tail命令-查看尾部内容-跟踪最新更改" class="headerlink" title="（3）tail命令 查看尾部内容 跟踪最新更改"></a>（3）tail命令 查看尾部内容 跟踪最新更改</h4><p>语法：tail [-f -num] Linux路径</p>
<ul>
<li>参数，Linux路径，表示被跟踪的文件路径</li>
<li>选项，-f，表示持续跟踪，结束使用ctrl+c</li>
<li>选项，-num，表示查看尾部多少行，不填默认10行，将num替换成数字</li>
</ul>
<p>持续跟踪的操作流程</p>
<p>输入命令后，复制标签建立新窗口，在新窗口对被跟踪文件的操作，会在原窗口显示，比如在hello.txt文件中添加新的字符等。</p>
<h3 id="10-vi编辑器"><a href="#10-vi编辑器" class="headerlink" title="10.vi编辑器"></a>10.vi编辑器</h3><h4 id="（1）基本了解"><a href="#（1）基本了解" class="headerlink" title="（1）基本了解"></a>（1）基本了解</h4><p>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</p>
<p>同图形化界面中的文本编辑器一样，vi是命令行下对文本文件编辑器的绝佳选择。</p>
<p><font color="red">vim是vi的加强版本，兼容vi的所有指令，不仅能编辑文本，而且还具有shell程序编辑的功能，可以不同颜色的字体来辨别语语法的正确性，极大的方便了程序的设计和编辑性。</font></p>
<h4 id="（2）三种工作模式"><a href="#（2）三种工作模式" class="headerlink" title="（2）三种工作模式"></a>（2）三种工作模式</h4><h5 id="1）命令模式（Command-mode）"><a href="#1）命令模式（Command-mode）" class="headerlink" title="1）命令模式（Command mode）"></a>1）命令模式（Command mode）</h5><p>​	命令模式下，锁敲的按键编辑器都理解为命令，以命令驱动执行不同的功能。此模式下，不能自由进行文本编辑。</p>
<h5 id="2）输入模式（Insert-mode）"><a href="#2）输入模式（Insert-mode）" class="headerlink" title="2）输入模式（Insert mode）"></a>2）输入模式（Insert mode）</h5><p>​	也就是所有的编辑模式、插入模式。此模式下，可以对文件内容进行自由编辑。</p>
<h5 id="3）底线命令模式（Last-line-mode）"><a href="#3）底线命令模式（Last-line-mode）" class="headerlink" title="3）底线命令模式（Last line mode）"></a>3）底线命令模式（Last line mode）</h5><p>​	以：开始，通常用于文件的保存、退出。</p>
<p>语法：（推荐使用vim，它兼容全部的vi功能）</p>
<p>vi 文件路径</p>
<p>vim 文件路径</p>
<ul>
<li>如果文件路径表示的文件不存在，那么此命令会用于编辑新文件</li>
<li>如果文件路径表示的文件存在，那么此命令用于编辑已有文件</li>
</ul>
<p><img src="/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA.assets/image-20250220173127758-1740043953051-1.png" alt="工作模式"></p>
<p>快速体验：</p>
<p>通过vi&#x2F;vim命令编辑文件，会打开一个新窗口，此时这个窗口就是：命令模式窗口</p>
<p>命令模式窗口时vi编辑器的入口和出口，如上图</p>
<ul>
<li>进入vi编辑器会进入命令模式</li>
<li>进入命令模式输入键盘指令，可以进入输入模式</li>
<li>输入模式需要退回到命令模式，然后通过命令可以进入底线命令模式</li>
</ul>
<p>快速体验操作：</p>
<p>1.使用 vi hello.txt，新建一个新文件，执行后进入的是命令模式</p>
<p>2.在命令模式内，按键盘i，进入输入模式</p>
<p>3.再输入模式内输入：tang x tang</p>
<p>4.输入完成后，按esc回退到命令模式</p>
<p>5.在命令模式内，按键盘：，进入底线命令模式</p>
<p>6.在底线命令输入：wq，保存文件并退出vi编辑器</p>
<p>通过ls查看是否存在、创建是否成功，通过cat命令查看文件内容。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250220174659079.png"></p>
<p>在命令模式下的常见快捷键</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">命令</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">命令模式</td>
<td align="left">i</td>
<td align="left">在当前光标位置进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">a</td>
<td align="left">在当前光标位置 之后 进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">I</td>
<td align="left">在当前行的 开头 进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">A</td>
<td align="left">在当前行的 结尾 进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">o</td>
<td align="left">在当前光标 下一行 进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">O</td>
<td align="left">在当前光标 上一行 进入输入模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">esc</td>
<td align="left">在任何情况下输入esc都能回到命令模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">0</td>
<td align="left">移动光标到当前行的开头</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">$</td>
<td align="left">移动光标到当前行的结尾</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">&#x2F;</td>
<td align="left">进入搜索模式</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">n</td>
<td align="left">向下继续搜索</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">N</td>
<td align="left">向上继续搜索</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">dd</td>
<td align="left">删除光标所在行的内容</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">ndd</td>
<td align="left">n是数字，表示删除当前光标向下n行</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">yy</td>
<td align="left">复制当前行</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">nyy</td>
<td align="left">n是数字，表示复制当前行和下面的n行</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">p</td>
<td align="left">粘贴复制的内容</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">u</td>
<td align="left">撤销修改</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">ctrl+r</td>
<td align="left">反向撤销修改</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">gg</td>
<td align="left">跳到首行</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">G</td>
<td align="left">跳到行尾</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">dG</td>
<td align="left">从当前行开始，向下全部删除</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">dgg</td>
<td align="left">从当前行开始，向上全部删除</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">d$</td>
<td align="left">从当前光标开始，删除到本行的结尾</td>
</tr>
<tr>
<td align="left">命令模式</td>
<td align="left">d0</td>
<td align="left">从当前光标开始，删除到本行的开头</td>
</tr>
</tbody></table>
<p>底线命令模式，支持如下命令：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>底线命令模式</td>
<td>:wq</td>
<td>保存并退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td>:q</td>
<td>仅退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td>:q!</td>
<td>强制退出</td>
</tr>
<tr>
<td>底线命令模式</td>
<td>:w</td>
<td>仅保存</td>
</tr>
<tr>
<td>底线命令模式</td>
<td>:set nu</td>
<td>显示行号</td>
</tr>
<tr>
<td>底线命令模式</td>
<td>:set paste</td>
<td>设置粘贴模式</td>
</tr>
</tbody></table>
<h3 id="11-权限"><a href="#11-权限" class="headerlink" title="11.权限"></a>11.权限</h3>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>VMware</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机</title>
    <url>/2025/02/20/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="📚专业术语"><a href="#📚专业术语" class="headerlink" title="📚专业术语"></a>📚专业术语</h2><p>.iso：是电脑上光盘镜像（CD Mirror）的存储格式之一，因为其是i根据ISO-9660有关CD-ROM文件系统标准存储的文件，许哦一通常在电脑中以后缀,iso命名，俗称iso镜像文件。</p>
<p>镜像文件：镜像文件可以类比为图书馆的一本书的副本。一本珍贵的书，想要确保即使在原书损坏或丢失的情况下，书的内容仍然可以得到保留和使用。为此，制作了这本书的精确复制品，这个复制品包含了原书的所有页面和文字，但它可能是以特殊的格式存储的，比如扫描后的PDF文件或者一系列图片。</p>
<h2 id="🖥创建新的虚拟机"><a href="#🖥创建新的虚拟机" class="headerlink" title="🖥创建新的虚拟机"></a>🖥创建新的虚拟机</h2><h3 id="1-Window系统"><a href="#1-Window系统" class="headerlink" title="1.Window系统"></a>1.Window系统</h3><p>点击软件首页的创建新的虚拟机，进入新建导向</p>
<p>选择自定义（高级）然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206165405761.png"></p>
<p>硬件兼容性选择软件版本，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206182831247.png"></p>
<p>选择安装程序光盘映像文件（iso），选择安装好的光盘映像文件，可以去微软官网上去下载，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206182926495.png"></p>
<p>完成windows简易安装信息，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206182950623.png"></p>
<p>对新建的虚拟机进行命名，名字注意区分其他并易懂，还有保存位置，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183009197.png"></p>
<p>选择虚拟机的固件类型，即引导设备，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183034037.png"></p>
<p>选择虚拟机处理器配置，处理器数量、每个处理器的内核数量，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183051953.png"></p>
<p>设置虚拟机的内存，不要太大也不要太小，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183110891.png"></p>
<p>选择网络模式，使用网络地址转换（NAT），然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183132574.png"></p>
<p>选择I&#x2F;O控制器类型，按照新建向导的推荐选择，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206183147255.png"></p>
<p>选择磁盘类型，按照新建向导的推荐选择，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250207122431324.png"></p>
<p>选择磁盘容量，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250207122452975.png"></p>
<p>确定号新建的虚拟机的设置信息，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250207122514411.png"></p>
<p>至此，Windows10虚拟机创建成功，等待启动然后设置，激活系统。</p>
<h3 id="2-Linux系统"><a href="#2-Linux系统" class="headerlink" title="2.Linux系统"></a><strong>2.Linux系统</strong></h3><p>点击软件首页的创建新的虚拟机，进入新建导向</p>
<p>选择自定义（高级）然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206163543615.png"></p>
<p>保持默认不变，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206163649773.png"></p>
<p>选择稍后安装操作系统，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206164001987.png"></p>
<p>在选择客户机i操作系统时选择Linux系统，版本选择自己准备的ISO文件的版本，一定要匹配，然后单击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206164041840.png"></p>
<p>给本虚拟机命名，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206164349880.png"></p>
<p>处理器配置，为虚拟机指定处理器数量，设置为2，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206164527143.png"></p>
<p>设置内存，一般两个G，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206164616967.png"></p>
<p>后续一直保持默认推荐，然后点击下一步</p>
<p>确认新建虚拟机的基本信息，然后点击下一步</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206165452662.png"></p>
<p>至此虚拟机的创建已完成，然后检查一下网络配置</p>
<p>点击编辑&gt;虚拟网络编辑器，查看VMnet8，子网的ip地址是否和NAT设置中的ip地址前三位一致。正常来说是默认配置好的。只是检查以下，不是乱去设置。</p>
<p>接下来去给<strong>虚拟机配置镜像</strong>。</p>
<p>点击编辑虚拟机设置&gt;CD&#x2F;DVD&gt;选择使用镜像文件，点击浏览找到提前下载好的镜像文件，然后点确定，完成后点击开启虚拟机。</p>
<p>然后点击install CentOS，选项变白就是选中了</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206170409114.png"></p>
<p>然后选中想要的语言，选择简体中文就行,点击继续</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206170558494.png"></p>
<p>进入安装信息摘要基本不用改，完成以下安装位置确认，然后点击安装。设置Root密码。创建用户根据个人需要，就是权限比较低的用户。</p>
<p>至此安装成功，点击重启就行。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206171032438.png"></p>
<p>注意进入后输入用户和密码，密码是不会显示的，输完后回车就行，出现root@localhost就是成功了。</p>
<p>输入cd &#x2F;，再输入ll，查看所有文件。(注意cd 后面要有一个空格)</p>
<p>接下来配置虚拟机的网络。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-02-06%20171537.jpg"></p>
<p>手动输入，以下路径，虚拟机内无法复制粘贴</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206171841943.png"></p>
<p>然后找到ifcfg-ens33，打开它编辑</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206171953000.png" alt="image-20250206171953000"></p>
<p>使用vi ifcfg-ens33，进入修改。按i，进入修改模式，将BOOTPROTO&#x3D;dhcp（默认），ONBOOT修改为yes。然后按esc退出修改模式。输入:wq，回车强制保存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250206172438904.png"></p>
<p>接下来就是去重启网络，service network restart，然后测试是否能访问外网，ping一下百度，出现连接网速表示成功，ctrl+c结束。</p>
<p>后续参考视频【【2024最新】Vmware虚拟机安装Linux系统及配置网络超详细教学安装Centos使用Vmare安装附带安装包及镜像】<a href="https://www.bilibili.com/video/BV1MriFeaEci?vd_source=cbd0e7aa3299fa0fcc330c5ee16869bc">https://www.bilibili.com/video/BV1MriFeaEci?vd_source=cbd0e7aa3299fa0fcc330c5ee16869bc</a></p>
<h2 id="📺操作系统的操作模式"><a href="#📺操作系统的操作模式" class="headerlink" title="📺操作系统的操作模式"></a>📺操作系统的操作模式</h2><p>对操作系统的使用，有2种使用形式：</p>
<ul>
<li><p>图形化页面使用操作系统</p>
</li>
<li><p>以命令的形式使用操作系统</p>
</li>
</ul>
<p>不论是Windows系统还是Linux系统或是MacOS系统，以获得图形化反馈的形式去使用操作系统。</p>
<ul>
<li><p>图形化：使用操作系统提供的图形化页面，以获得图形化反馈形式去使用操作系统。</p>
</li>
<li><p>命令行：使用操作系统提供的各类命令，以获得字符反馈的形式去使用操作系统。</p>
</li>
</ul>
<p>无论是企业开发亦或是个人开发，使用Linux擦欧总系统，多数都是使用的：命令行。</p>
<p>这是因为：</p>
<ul>
<li>Linux从诞生至今，在图形化页面的优化上，并未重点发力。所以LInux操作系统的图形化页面：不好用、不稳定。</li>
<li>在开发中，使用命令行形式，效率更高，更加直观，并且资源占用低、程序运行更稳定。</li>
</ul>
<h2 id="💻网络连接的三种模式"><a href="#💻网络连接的三种模式" class="headerlink" title="💻网络连接的三种模式"></a>💻网络连接的三种模式</h2><h3 id="1-桥接模式：直接连接物理网络"><a href="#1-桥接模式：直接连接物理网络" class="headerlink" title="1.桥接模式：直接连接物理网络"></a>1.桥接模式：直接连接物理网络</h3><p>使用主机中的物理网卡VMnet0，有线网卡或者无线网卡，可以连接主机，并且可以访问局域内的计算机，如果主机可以连接外网，虚拟机也可以连接外网，此时物理主机相当于一个交换机，把所有桥接模式的虚拟机都连接在同一个交换机上，自己在这个局域网中。注意：容易造成IP冲突。</p>
<h3 id="2-NAT模式：用于共享主机的IP地址"><a href="#2-NAT模式：用于共享主机的IP地址" class="headerlink" title="2.NAT模式：用于共享主机的IP地址"></a>2.NAT模式：用于共享主机的IP地址</h3><p>使用的是虚拟机的网卡VMnet8，可以连接主机，也可以来连接外网，虚拟机IP地址经过NAT转换，与物理机IP地址不在同一网段，所以不能访问局域网内的计算机。</p>
<h3 id="3-仅主机模式：与主机共享的专用网络"><a href="#3-仅主机模式：与主机共享的专用网络" class="headerlink" title="3.仅主机模式：与主机共享的专用网络"></a>3.仅主机模式：与主机共享的专用网络</h3><p>使用的是虚拟机中的VMnet1，可以连接到主机，不能访问局域网内的计算机，也不能连接外网，当我们要组成一个与物理网络相隔离的虚拟网络时可以选择仅主机模式。</p>
<h2 id="📼虚拟机克隆"><a href="#📼虚拟机克隆" class="headerlink" title="📼虚拟机克隆"></a>📼虚拟机克隆</h2><p>如果已经安装了一台linux操作系统，还想再更多的，没必要再重新安装，只需要克隆就行。</p>
<h3 id="1-直接拷贝一份安装好的虚拟机文件"><a href="#1-直接拷贝一份安装好的虚拟机文件" class="headerlink" title="1.直接拷贝一份安装好的虚拟机文件"></a>1.直接拷贝一份安装好的虚拟机文件</h3><p>将虚拟机文件拷贝到另一个盘的文件夹下，文件名可以重命名，也可以保留原名。通过VMware的打开文件，打开拷贝虚拟机文件。</p>
<h3 id="2-使用VMware的克隆操作"><a href="#2-使用VMware的克隆操作" class="headerlink" title="2.使用VMware的克隆操作"></a>2.使用VMware的克隆操作</h3><p>注意：克隆时，需要先关闭正在运行的linux系统。</p>
<p>虚拟机&gt;右键至管理&gt;克隆</p>
<p>克隆类型有两种：创建链接克隆、创建完整克隆。</p>
<p>创建链接克隆，是对原虚拟机的引用，所需要的存储磁盘空间较少，访问的是原虚拟机，是同一个系统。</p>
<p>创建完整克隆：是原虚拟机当前状态的完整副本，此选项使得虚拟机完全独立，需要较多的存储磁盘空间。</p>
<h2 id="📷虚拟机快照"><a href="#📷虚拟机快照" class="headerlink" title="📷虚拟机快照"></a>📷虚拟机快照</h2><p>如果在使用虚拟机系统的时候，想回到原先的某一个状态，也就是说担心有些操作造成系统异常，需要回到原先某个正常运行的状态，VMware提供了一个这样的功能，就叫做快照管理。</p>
<p>推荐关机操作，没关机也可以就是会时间久一点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250210163939993.png"></p>
]]></content>
      <tags>
        <tag>VMware</tag>
        <tag>软件</tag>
        <tag>Linux系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora的使用</title>
    <url>/2025/01/24/Typora%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[史上最全Typora教程—-程序员必学软件之一-CSDN博客](<a href="https://blog.csdn.net/m0_62648611/article/details/133713273#:~:text=%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8Typora%E6%95%99%E7%A8%8B----%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E5%AD%A6%E8%BD%AF%E4%BB%B6%E4%B9%8B%E4%B8%80">https://blog.csdn.net/m0_62648611/article/details/133713273#:~:text=史上最全Typora教程----程序员必学软件之一</a> 1 1. 标题 一级标题：Ctrl%2B1 或%23 二级标题：Ctrl%2B2 或%23%23,代码 插入不确定编程语言代码，快捷键：CTRL%2Bshift%2Bk 插入确定语言代码， &#96;&#96;&#96; 语言名称 如： … 更多项目)</p>
<p>存在待补充</p>
<h2 id="Typora是什么？"><a href="#Typora是什么？" class="headerlink" title="Typora是什么？"></a>Typora是什么？</h2><p>​		Typora是一款由Abner Lee开发的轻量级Markdown编辑器，适用于OS X、Windows和Linux三种操作系统，是一款免费软件。与其他Markdown编辑器不同的是，Typora没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式</p>
<span id="more"></span>


<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a><strong>1.标题</strong></h4><p>快捷键，Ctrl+数字（1、2、3、4、5、6），一共六个数字由大到小六个标题等级。</p>
<h4 id="2-文本"><a href="#2-文本" class="headerlink" title="2.文本"></a><strong>2.文本</strong></h4><h6 id="2-1-分割线"><a href="#2-1-分割线" class="headerlink" title="2.1 分割线"></a>2.1 分割线</h6><p>三个+++、***、或—，如下：</p>
<hr>
<h6 id="2-2-下划线"><a href="#2-2-下划线" class="headerlink" title="2.2 下划线"></a>2.2 下划线</h6><p>Ctrl+U或&lt; u &gt;标签包住文本，如：<u>kedai</u></p>
<h6 id="2-3-删除线"><a href="#2-3-删除线" class="headerlink" title="2.3 删除线"></a>2.3 删除线</h6><p>Alt+Shift+5或使用一对 “ ~ “符号包括文本，如：<del>kedai</del></p>
<h6 id="2-4-斜体"><a href="#2-4-斜体" class="headerlink" title="2.4 斜体"></a>2.4 斜体</h6><p>Ctrl+l、或使用一对 “ _ “符号包括文本，如：<em>kedai</em></p>
<h6 id="2-5-粗体"><a href="#2-5-粗体" class="headerlink" title="2.5 粗体"></a>2.5 粗体</h6><p>Ctrl+B、使用一对 “ ** “符号包括文本、或使用一对 “ __ “符号包括文本，如：<strong>kedai</strong></p>
<h6 id="2-6-粗体倾斜"><a href="#2-6-粗体倾斜" class="headerlink" title="2.6 粗体倾斜"></a>2.6 粗体倾斜</h6><p>使用一对三个“ * ” 符号包括文本，如：<em><strong>kedai</strong></em></p>
<h6 id="2-7-设置字体颜色及大小"><a href="#2-7-设置字体颜色及大小" class="headerlink" title="2.7 设置字体颜色及大小"></a>2.7 设置字体颜色及大小</h6><p>&lt; font size&#x3D;2 color&#x3D;”yellow” &gt;设置字体大小为2，颜色为黄色&lt; &#x2F;font  &gt; ，如：<font size=2 color="yellow">kedai</font> </p>
<h6 id="2-8-设置字体高亮"><a href="#2-8-设置字体高亮" class="headerlink" title="2.8 设置字体高亮"></a>2.8 设置字体高亮</h6><p>使用一对“ &#x3D;&#x3D; ”符号包括文本，如：&#x3D;&#x3D;kedai&#x3D;&#x3D;</p>
<h6 id="2-9-文本对齐"><a href="#2-9-文本对齐" class="headerlink" title="2.9 文本对齐"></a>2.9 文本对齐</h6><p>&lt; p align&#x3D;”lift” &gt;左对齐&lt; &#x2F;p &gt;</p>
<p align="lift">左对齐</p>

<p>&lt; p align&#x3D;”center” &gt;居中对齐&lt; &#x2F;p &gt;</p>
<p align="center" >居中对齐</p >

<p>&lt; p align&#x3D;”right” &gt;左对齐&lt; &#x2F;p &gt;</p>
<p align="right" >右对齐</p >

<h4 id="3-插入"><a href="#3-插入" class="headerlink" title="3.插入"></a><strong>3.插入</strong></h4><h6 id="3-1链接文字"><a href="#3-1链接文字" class="headerlink" title="3.1链接文字"></a>3.1链接文字</h6><p>① 当链接地址为外部地址时，格式：[ 链接文字 ] (src“描述链接”) ，其中的描述可以写也可以不写。快捷键为Ctrl+K，用Ctrl+鼠标左键点击进入链接。如：<a href="https://taobao.com/">这是一个淘宝链接</a></p>
<p>② 当链接地址为本地地址时，其中本地地址可以是相对地址和绝对地址</p>
<ul>
<li><p>绝对地址 格式：[ 绝对地址 ] (src “本地地址链接”)，用Ctrl+鼠标左键点击进入链接，上传远程后是没有效果的。</p>
</li>
<li><p>相对地址 格式：[ 相对地址\ ] ( src “&#x2F;标题.png”)，其中.&#x2F;代表.md文件所在的地址…&#x2F;表示的是.md文件的上级地址。</p>
</li>
</ul>
<h6 id="3-2图片"><a href="#3-2图片" class="headerlink" title="3.2图片"></a>3.2图片</h6><p>一共有四种方式</p>
<p>①外部链接 </p>
<p>格式：！[ alt ] (src)，快捷键：Ctrl+Shift+l</p>
<p>和链接文件、文档差不多，指示在前面加了一个！。alt：是图片的注释（可以为空），src：既可以是本地图片的绝对&#x2F;相对路径。</p>
<p>②html标签 </p>
<p>格式：&lt; img src&#x3D;”.&#x2F;图片演示.png” alt&#x3D;”替代文本” title&#x3D;”图片标题” width&#x3D;”200” height&#x3D;”200” &gt;</p>
<p>width和height设置大小，align设置位置，style中margin设置外边距、border设置边框</p>
<p>③本地文件 </p>
<p>格式：！[ alt ] (src)</p>
<p>直接拖拽、复制就行，也可以进行图片链接。拖拽和复制本质上和第一种图片链接是一样的。但是Typora默认的是绝对地址，图片没有复制到.md文件同一目录下。如果移动了.md文件或者图片位置，都会丢失图片。</p>
<p>④ TYpora支持从剪贴板中粘贴图片，但是因为 Markdown 文件是纯文本文件，所以用户无法在 Markdown 文件中直接插入图片文件，而是通过在 Markdown 文件中引用文件路径或者 URL 的方式插入图片，所以默认情况下，Typora 会先将文件保存到一个固定的目录，在 Windows 上，是保存到~\AppData\Roaming\Typora\typora-user-images\目录下。</p>
<p>所以需要修改设置（文件 &gt; 偏好设置 &gt; 图像 &gt; 对本地位置的图片应用上述规则 &gt; 下拉勾选其中一个）</p>
<p>第一个选项 [无特殊操作]，是默认选项。</p>
<p>第二个选项 [复制图片到当前文件夹（.&#x2F;）]，意思就是在插入图片时，将图片复制到正在编辑的Markdown文件所在的目录下。</p>
<p>第三个选项 [复制图片到.&#x2F;filename.assets文件夹]，意思是在插入图片时，会在当前目录下创建一个名为“{filename.asset}”的文件夹，然后把图片保存在这个文件夹下，其中${filename}&#96;指的是当前你正在编辑的Markdown文件的文件名。</p>
<p>第四个选项 [上传图片]，就是在你插入图片时，使用图片上传服务将图片上传到服务器。</p>
<p>第五个选项 [复制到指定路径]，选择该选项后，会出现一个输入框输入保存图片的路径，这里也就是使用${filrname}来指代当前编辑的Markdowan文件的文件名，也可以点击右边的文件夹按钮在弹出的对话框中选择一个路径。</p>
<p>因为如果在 Markdown 文件中使用了图片，那说明这张图片和写的东西是有关联的，那最好把图片和 Markdown 文件放在一起，这样也便于以后查找。还要注意的是，如果选择了[复制图片到当前文件夹（.&#x2F;）]，那么要把下面的[优先使用相对路径]选项勾选上，这样，Typora 在引用图片时就会使用相对路径，以后即使移动 Markdown 文件到别的目录下，只要图片随着 Markdown 文件一起移动， Typora 就永远都能找到这张图片。再配合[上传图片]，就能使 Markdown 文件的维护成本最小化。</p>
<h6 id="3-3表格"><a href="#3-3表格" class="headerlink" title="3.3表格"></a>3.3表格</h6><p>插入表格可以使用代码的方式插入，但是感觉太麻烦了。采用快捷键Ctrl+T</p>
<h4 id="4-上传图片-详细说明"><a href="#4-上传图片-详细说明" class="headerlink" title="4.[上传图片] 详细说明"></a><strong>4.[上传图片] 详细说明</strong></h4><p>如果src是 URL 的话，你在分享的时候只要分享一个 Markdown 文件就可以了，只要能联网，Markdown 的渲染引擎就能根据 URL 找到你引用的图片。</p>
<p>要想把本地的图片路径转换成 URL，就得把图片上传到网络上某个位置，然后拿到这个图片的 URL。使用[Typora + 第三方图片上传服务]就可以自动完成这一操作。</p>
<p><strong>⚠警告：</strong></p>
<p><u><em>Typora是通过调用第三方的软件实现图片上传的，它本身并不会上传图片，提供存储图片服务的也是第三方的云存储服务，它们并不属于Typora。所以在使用上传图片功能的时候，要注意这些第三方服务的许可证书、用户协议、服务稳定性以及可靠性。</em></u></p>
<p><u><em>在偏好设置中开启上传图片的功能后，Typora 会将要上传的图片发送给第三方图片上传软件，然后他们会把你的图片上传到第三方（甚至是第四方）图床，Typora 不会控制这个过程，也无法保证这个过程的顺利，所以一定要选择一个可靠的服务来保证数据的安全。</em></u></p>
<p><u><em>除了隐私和可靠性问题，你还需注意，有些服务在保存图片时可能会设置过期时间；有些服务没有提供 [删除] 的功能，即使你不小心上传了敏感图片；有些服务遵守的不是你所在国家的法律，可能会封禁一些特定国家的特定类型的图片或者用户等等。</em></u></p>
<p><u><em>总而言之，在选择某个图片上传应用及服务之前，一定要仔细阅读他们的用户手册。</em></u></p>
<p>配置：</p>
<p>在偏好设置面板中可以开启并配置图片上传服务，Typora支持以下图片上传服务：</p>
<ul>
<li>PicGo.app (macOS &#x2F; Windows &#x2F; Linux, 只有简体中文版)</li>
<li>PicGo (命令行应用) (Windows &#x2F; Linux)</li>
<li>自定义 (macOS &#x2F; Windows &#x2F; Linux)</li>
</ul>
<p>在选择了其中一个上传服务后，你需要下载并安装相应的应用，做一些简单的配置，比如你想使用那个云存储服务来保存上传的图片，然后点击 [验证图片上传选项]，验证Typora使用当前服务和配置是否能上传本地图片。</p>
<p>点击 [验证图片上传选项] 按钮后，Typora会尝试使用当前服务和配置上传图片，如果出现 [验证成功] 的对话框，说明图片上传服务可以用了。如果显示的时 [验证失败] 的对话框，有可能时你电脑上还没有安装相应的服务或者网络问题，可以根据对话框中的提示进行检查。</p>
<p><strong><u>Typora + PicGo + Gitee&#x2F;GitHub 搭建个人图床，实现图片上传。</u></strong></p>
<p>Typora 的作用</p>
<p>具有对图片路径进行管理和转换的功能。当用户在 Typora 中插入图片时，它可以将图片的本地路径转换为符合 Markdown 语法的链接形式。而且 Typora 可以与 PicGo 进行集成，将图片上传的操作集成到其操作流程中，使得用户在撰写文档插入图片时，能够直接调用 PicGo 进行图片上传，而无需额外切换到其他工具进行上传操作。</p>
<p>PicGo 的作用</p>
<p>PicGo 是一个专门用于图片上传的工具，它支持多种图床平台，其核心原理是通过调用不同图床平台的 API，将本地图片数据以二进制流等形式发送到对应的图床服务器上。_在与 Typora 和 Gitee&#x2F;GitHub 配合时，PicGo 充当了桥梁的角色。_当在 Typora 中触发图片上传操作时，PicGo 会获取到图片的本地路径和相关信息，然后根据用户在 PicGo 中配置的 Gitee 或 GitHub 图床参数，将图片数据按照相应平台的要求进行格式化和封装，再通过 HTTP 请求等方式将图片上传到 Gitee 或 GitHub 的仓库中。上传成功后，PicGo 会获取到图片在 Gitee 或 GitHub 上的访问链接，并将这个链接返回给 Typora，以便 Typora 将其插入到 Markdown 文档中，实现图片的引用。</p>
<p>Gitee&#x2F;GitHub 的作用</p>
<p>GitHub 本质上是代码托管平台，但它们也可以用于存储图片等静态资源。它们提供了版本控制、仓库管理等功能，用户可以在上面创建仓库来存储各种文件。当 PicGo 将图片上传到  GitHub 仓库时，实际上是利用了这些平台的文件存储功能。这些平台会为每个上传的文件分配一个唯一的存储位置，并生成一个对应的访问链接。这个链接遵循平台的特定规则，通过这个链接，用户可以在互联网上访问到存储在  GitHub 仓库中的图片资源。同时， GitHub 都有一定的免费存储空间和流量额度，这使得用户可以在一定范围内免费使用它们来搭建个人图床，存储和分享自己的图片。</p>
<p><strong>步骤：</strong></p>
<h5 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a><strong>配置GitHub</strong></h5><p>创建一个新的仓库用来保存图片。</p>
<p>选择<u>Add a README file</u>。注意确保选择”<u>Public</u>“，否则之后再外部访问图床中的图片，会由于没有权限导致访问失败。</p>
<p>在个人设置中，选择“<u>Developer settings</u>”。</p>
<p>随后，选择“<u>Personal access tokens</u>”，并选择其中下方的“<u>Tokens (classic)</u>”；随后，选择右上角“<u>Generate new token</u>”，并再选择“<u>Generate new token (classic)</u>”。</p>
<p>随后，在弹出的配置界面中，首先填写“<u>Note</u>”，这个是当前token的注释，也用一个和图片有关的名称来填写即可；随后，配置token的有效期。其实我们可以将有效期选择为永久，但是<u>GitHub</u>官方强烈不推荐这种<u>永久</u>期限的token，因此可以选择 <u>90</u>天，之后过期了我们继续来设置新的有效期就好。随后，配置勾选项，我这里是将全部的勾选项都选中了，但是其实只要保证 <u>repo</u> 开头的勾选项选中即可。</p>
<p>接下来，即可看到此时token的序号已经获取了，如下图所示。这里大家一定需要<u>保存一下当前的序号</u>，之后就看不到这个序号了。</p>
<p>至此，我们就完成了GitHub上的配置操作。</p>
<h5 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a><strong>配置PicGo</strong></h5><p>将图片上传到GitHub中。下载地址：<a href="https://picgo.github.io/PicGo-Doc/">PicGo</a></p>
<p>随后，<u>安装PicGo</u>并打开，如下图所示。其中，我们需要在“<u>图床设置</u>”中找到“<u>GitHub</u>”，并配置各项信息。其中，<u>仓库名</u>就是我们前面创建的<u>Repository的名称</u>；Token就是前面我们获取的token序号；存储路径这里我们可以空着，如果大家需要指定将图片存储到仓库中的某个路径下，就在这里设置即可；分支名由于github网站的调整，仓库的默认分支名称需要修改为<u>main</u>。随后的自定义域名，可以填写<a href="https://cdn.jsdelivr.net/gh/%E2%80%9C%E7%94%A8%E6%88%B7%E5%90%8D%E2%80%9D/%E2%80%9C%E4%BB%93%E5%BA%93%E5%90%8D%E2%80%9D@master%E3%80%82">https://cdn.jsdelivr.net/gh/“用户名”/“仓库名”@master。</a></p>
<h5 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a><strong>配置Typora</strong></h5><p>在“<u>文件</u>”中选择“<u>偏好设置…</u>”，随后选择“<u>图像</u>”，下拉选择“<u>上传图片</u>”，勾选“<u>对本地位置的图片应用上述规则</u>”、“<u>插入是自动转义图片URL</u>”。</p>
<p>随后，选择“<u>验证图片上传选项</u>”，如果出现验证成功窗口，则表明成功配置完毕。</p>
<h5 id="上传方式"><a href="#上传方式" class="headerlink" title="上传方式"></a><strong>上传方式</strong></h5><p><strong>全局设置</strong></p>
<p>在偏好设置面板中，[插入图片时…] 下方的下拉框中，选择 [上传图片] 选项，Typora就会在你插入图片时自动上传。如果只想上传本地图片，那么就只勾选 [对本地位置的图片应用上述规则] ，如果插入的图片本来就位于网络上，但是你想再上传一遍图床，那就把 [对网络位置的图片应用上述规则] 也勾选上。</p>
<p><strong>针对每一个文件单独设置</strong></p>
<p>手下需要勾选上偏好设置面板中的 [允许根据YAML设置自动上传图片] ，然后，如果你的Markdown文件再TYAML中包含如下配置：</p>
<p><code>typora-copy-image-to: upload</code></p>
<p>当插入图片时，Typora会使用这个选项自动上传图片。</p>
<p>或者可以在菜单栏中点击 格式 &gt; 图像 &gt; 当插入本地图片时…  插入YAML配置，开启这个功能。</p>
<p><strong>上传指定的图片</strong></p>
<p>可以在Typora中，右击点击要上传的图片，选择 [上传图片] 。</p>
<p><strong>上传所有本地图片</strong></p>
<p>如果文件中含有大量的本地图片，想要一次性都上传，可以点击菜单栏中的 格式 &gt; 图像 &gt; 上传所有本地图片 。</p>
<h4 id="5-快捷键"><a href="#5-快捷键" class="headerlink" title="5.快捷键"></a><strong>5.快捷键</strong></h4><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>新建一个新的窗口</td>
<td>Ctrl+N</td>
</tr>
<tr>
<td>创建一个新的窗口</td>
<td>Ctrl+Shift+N</td>
</tr>
<tr>
<td>打开资源管理器（初始在.md文件）</td>
<td>Ctrl+O</td>
</tr>
<tr>
<td>快速打开近期使用过的Markdown文件搜索框</td>
<td>Ctrl+P</td>
</tr>
<tr>
<td>保存</td>
<td>Ctrl+S</td>
</tr>
<tr>
<td>保存为（另存为）</td>
<td>Ctrl+Shift+S</td>
</tr>
<tr>
<td>打开偏好设置界面</td>
<td>Ctrl+,</td>
</tr>
<tr>
<td>关闭当前窗口</td>
<td>Ctrl+W</td>
</tr>
<tr>
<td>开始一个新段落</td>
<td>Enter</td>
</tr>
<tr>
<td>开始一个新行</td>
<td>Shift+Enter</td>
</tr>
<tr>
<td>复制选中的文本为Markdown语言</td>
<td>Ctrl+Shift+C</td>
</tr>
<tr>
<td>将复制的内容以纯文本的格式粘贴</td>
<td>Ctrl+Shift+V</td>
</tr>
<tr>
<td>在段落内选中一句\在表内选中一行</td>
<td>Ctrl+L</td>
</tr>
<tr>
<td>删除表中的一行</td>
<td>Ctrl+Shift+Backspace</td>
</tr>
<tr>
<td>选中一个段元格</td>
<td>Ctrl+E</td>
</tr>
<tr>
<td>选择一个单元格</td>
<td>Ctrl+D</td>
</tr>
<tr>
<td>跳转到文章最顶部</td>
<td>Ctrl+Home</td>
</tr>
<tr>
<td>跳转到文章底部</td>
<td>Ctrl+End</td>
</tr>
<tr>
<td>跳转到光标所在位置</td>
<td>Ctrl+J</td>
</tr>
<tr>
<td>删除一个单词</td>
<td>Ctrl+Shift+D</td>
</tr>
<tr>
<td>查找</td>
<td>Ctrl+F</td>
</tr>
<tr>
<td>查找已经查找的的上一个单词</td>
<td>Shift+F3\Shift+Enter</td>
</tr>
<tr>
<td>查找当前查找的的下一个单词</td>
<td>F3\Enter</td>
</tr>
<tr>
<td>替换</td>
<td>Ctrl+H</td>
</tr>
<tr>
<td>设置文本为标题1-6</td>
<td>Ctrl+ 1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6</td>
</tr>
<tr>
<td>设置文本为段落</td>
<td>Ctrl+0</td>
</tr>
<tr>
<td>给标题升1级</td>
<td>Ctrl+&#x3D;</td>
</tr>
<tr>
<td>给标题降1级</td>
<td>Ctrl±</td>
</tr>
<tr>
<td>插入表</td>
<td>Ctrl+T</td>
</tr>
<tr>
<td>插入代码块</td>
<td>Ctrl+Shift+k</td>
</tr>
<tr>
<td>插入数学符号的文本</td>
<td>Ctrl+Shift+M</td>
</tr>
<tr>
<td>插入引用代码</td>
<td>Ctrl+Shift+Q</td>
</tr>
<tr>
<td>插入有序列表</td>
<td>Ctrl+Shift+[</td>
</tr>
<tr>
<td>插入无序列表</td>
<td>Ctrl+Shift+]</td>
</tr>
<tr>
<td>缩进</td>
<td>Tab \ Ctrl+[</td>
</tr>
<tr>
<td>取消缩进</td>
<td>Shift+Tab \ Ctrl+]</td>
</tr>
<tr>
<td>加粗字体</td>
<td>Ctrl+B</td>
</tr>
<tr>
<td>文本删除线</td>
<td>Alt+Shift+5</td>
</tr>
<tr>
<td>斜体</td>
<td>Ctrl+I</td>
</tr>
<tr>
<td>标记为代码</td>
<td>Ctrl+Shift+5</td>
</tr>
<tr>
<td>插入超链接</td>
<td>Ctrl+K</td>
</tr>
<tr>
<td>插入图片链接</td>
<td>Ctrl+Shift+I</td>
</tr>
<tr>
<td>消除文本格式</td>
<td>Ctrl+\</td>
</tr>
<tr>
<td>切换侧边栏</td>
<td>Ctrl+Shift+L</td>
</tr>
<tr>
<td>切换成出大纲</td>
<td>Ctrl+Shift+1</td>
</tr>
<tr>
<td>切换到文件栏</td>
<td>Ctrl+Shift+2</td>
</tr>
<tr>
<td>展示文件目录</td>
<td>Ctrl+Shift+3</td>
</tr>
<tr>
<td>切换成源码格式（Markdown）</td>
<td>Ctrl+&#x2F;</td>
</tr>
<tr>
<td>专注模式</td>
<td>F8</td>
</tr>
<tr>
<td>打字机模式</td>
<td>F9</td>
</tr>
<tr>
<td>全屏模式</td>
<td>F11</td>
</tr>
<tr>
<td>扩大</td>
<td>Ctrl+Shift+&#x3D;</td>
</tr>
<tr>
<td>缩小</td>
<td>Ctrl+Shift±</td>
</tr>
<tr>
<td>重置大小（好像windows有快捷键冲突）</td>
<td>Ctrl+Shift+0</td>
</tr>
<tr>
<td>在两个打开的文件进行切换</td>
<td>Ctrl+Tab</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github 部署博客</title>
    <url>/2025/01/23/hexo-github-%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>静态博客：是指没有后端数据库的博客，所有文章都是以文件的形式存储，是一种纯前端的博客框架。</p>
<hr>
<h1 id="一、准备工具"><a href="#一、准备工具" class="headerlink" title="一、准备工具"></a><strong>一、准备工具</strong></h1><p>Hexo是通过Node.js生成的。</p>
<h2 id="1-下载并安装Node-js"><a href="#1-下载并安装Node-js" class="headerlink" title="1.下载并安装Node.js"></a><strong>1.下载并安装Node.js</strong></h2><p>win+R  #进入终端</p>
<p>node -v  #查看node版本，v20.18.0，显示版本号，则说明安装成功</p>
<h2 id="2-安装Hexo框架"><a href="#2-安装Hexo框架" class="headerlink" title="2.安装Hexo框架"></a><strong>2.安装Hexo框架</strong></h2><p>Node.js的包管理器，称为npm。</p>
<p>发布者将自己的代码发布（npm publish）到代码仓库（registry），使用者将自己需要的包写入package.json文件中，到代码仓库中把代码下载（npm install）下来。</p>
<p>win+R进入终端</p>
<p>npm -v  #查看npm版本，11.0.0</p>
<p>由于npm代码仓库的服务器在国外，由于Great Firewall的缘故，下载速度可能不尽如人意，这时你可以使用淘宝的npm代码仓库，通过cnpm来操作下载速度会得到很大提升，但包的版本不一定是最新的。</p>
<p>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>  #通过npm安装cnpm</p>
<p>cnpm -v  #查看cnpm版本</p>
<p>npm install -g hexo-cli  #安装hexo框架</p>
<p>hexo -v  #查看版本</p>
<h2 id="3-安装git工具"><a href="#3-安装git工具" class="headerlink" title="3.安装git工具"></a><strong>3.安装git工具</strong></h2><p>下载网址<a href="https://git-scm.com/downloads/win">https://git-scm.com/downloads/win</a></p>
<p>安装版本</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250224192736510.png" alt="安装版本号"></p>
<p>配置用户名和邮箱</p>
<p>很重要，因为每一个都会使用这些信息，它们会写入道每一次提交中，不可更改。</p>
<p>签名的作用是区分操作者的身份，用户的签名信息在每一个版本的提交信息能够看到，以此确认本次提交的是谁做的。Git首次安装必须设置一下用户签名，否则无法提交代码。这里设置用户签名和将来登录GitLab（或者其他代码托管中心）的账号没有任何关系。</p>
<p>在桌面任意位置右键，点击Git bash here，在弹出界面中输入</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-02-24%20200214.jpg"></p>
<p>输入git config –global –list 命令，检查配置好没有</p>
<p>安装完成后，确保将 git 的可执行文件所在的目录添加到系统的环境变量中。</p>
<p>安装路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250224200256455.png"></p>
<p>设置环境变量</p>
<p>系统变量中Path，编辑E:\git\Git\cmd</p>
<h1 id="二、搭建仓库"><a href="#二、搭建仓库" class="headerlink" title="二、搭建仓库"></a><strong>二、搭建仓库</strong></h1><h2 id="github"><a href="#github" class="headerlink" title="github"></a><strong>github</strong></h2><h3 id="1-搭建仓库"><a href="#1-搭建仓库" class="headerlink" title="1.搭建仓库"></a><strong>1.搭建仓库</strong></h3><p>在<a href="https://github.com/%E7%BD%91%E5%9D%80%E5%87%86%E5%A4%87%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7">https://github.com/网址准备一个账号</a></p>
<p>新建一个仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250224200319395.png"></p>
<p>仓库名（Repository name）是要和github的名字一样，例如github名字叫aaa，仓库名字就必须是aaa.github.io，不能是bbb.github.io之类的。</p>
<p>Repository name ： tangxtang1119.github.io</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/image-20250224200335806.png"></p>
<p>勾选Public和Add a README file</p>
<p>然后点击创建Create repository</p>
<h1 id="三、配置ssh-key"><a href="#三、配置ssh-key" class="headerlink" title="三、配置ssh key"></a><strong>三、配置ssh key</strong></h1><h2 id="github-1"><a href="#github-1" class="headerlink" title="github"></a><strong>github</strong></h2><h4 id="1-生成SSH-Keys"><a href="#1-生成SSH-Keys" class="headerlink" title="1.生成SSH Keys"></a><strong>1.生成SSH Keys</strong></h4><p>进入任意文件夹，右键空白处然后点Git bash here,输入</p>
<p>ssh-keygen -t rsa -C “邮件地址”（注意是大写C）</p>
<p>生成SSH Keys</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/wps3.jpg"> </p>
<p>连续敲4次Enter</p>
<p>然后进入C:\Users\tangxtang.ssh，用记事本打开id_rsa.pub，全选复制这串代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/wps4.jpg"> </p>
<p>id_rsa ：私钥文件</p>
<p>id_rsa.pub：公钥文件</p>
<p>打开github</p>
<p>进入用户设置，找到SSH and GPG keys</p>
<p>选择New SSH Key新建SSH keys，名称随意，在下面粘贴代码</p>
<p>然后创建</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/wps5.jpg"> </p>
<h4 id="2-测试SSH-Key配置"><a href="#2-测试SSH-Key配置" class="headerlink" title="2.测试SSH Key配置"></a><strong>2.测试SSH Key配置</strong></h4><p>在git bash 输入</p>
<p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p>
<p>最后提示ssh: connect to host github.com port 22: Connection refused这个错误提示的是连接github.com，访问<a href="https://zhida.zhihu.com/search?content_id=203985854&content_type=Article&match_order=1&q=22%E7%AB%AF%E5%8F%A3&zhida_source=entity">22端口</a>被拒绝了。</p>
<p>尝试连接github的443端口，在C:\Users\tangxtang.ssh\config文件里新建记事本，添加以下内容：</p>
<p>Host github.com</p>
<pre><code> Hostname ssh.github.com
</code></pre>
<p> Port 443</p>
<p>如果没有config文件就新建一个即可。</p>
<p>如果执行命令ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#103;&#x69;&#116;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>，还是报错，就执行命令</p>
<p>ssh -T -p 443 <a href="mailto:git@ssh.github.com，">git@ssh.github.com</a></p>
<p>如果提示Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide <a href="https://zhida.zhihu.com/search?content_id=203985854&content_type=Article&match_order=2&q=shell+access&zhida_source=entity">shell access</a>. 就表示一切正常了。</p>
<h1 id="四、本地部署"><a href="#四、本地部署" class="headerlink" title="四、本地部署"></a><strong>四、本地部署</strong></h1><h4 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1.创建目录"></a><strong>1.创建目录</strong></h4><p>由于Hexo的所有文章都是以文件的形式存储在目录下的，</p>
<p>新建一个目录，文件名设置为first-blog，再次目录下继续操作。路径：</p>
<p>E:\myself\self-blog\first-blog</p>
<h4 id="2-初始化博客"><a href="#2-初始化博客" class="headerlink" title="2.初始化博客"></a><strong>2.初始化博客</strong></h4><p>hexo init</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/wps6.jpg"> </p>
<h4 id="3-新建文章"><a href="#3-新建文章" class="headerlink" title="3.新建文章"></a><strong>3.新建文章</strong></h4><p>hexo new  “BlogName”（BlogName是你的文章名称）</p>
<p>会在source&#x2F;_posts目录下生成BlogName.md文件，可以vim或其他的Markdown编辑器进行修改。</p>
<h4 id="4-生成博客静态文件"><a href="#4-生成博客静态文件" class="headerlink" title="4.生成博客静态文件"></a><strong>4.生成博客静态文件</strong></h4><p>hexo g（g表示generate），生成博客静态文件</p>
<p>每次修改文章后。都需要通过hexo clean清理一下</p>
<p>然后通过hexo g重新生成</p>
<p>最后也不要忘了通过hexo s重新启动Hexo</p>
<h4 id="5-启动博客"><a href="#5-启动博客" class="headerlink" title="5.启动博客"></a><strong>5.启动博客</strong></h4><p>hexo s（s代表server，默认端口号是4000）</p>
<h1 id="四、如何让把个人博客部署到远端"><a href="#四、如何让把个人博客部署到远端" class="headerlink" title="四、如何让把个人博客部署到远端"></a><strong>四、如何让把个人博客部署到远端</strong></h1><p>进入博客文件夹，用记事本打开——config.yml</p>
<p>拉到最后将deploy后面的全删掉，复制粘贴以下这段：</p>
<p> type: git</p>
<p> repository:</p>
<p> branch: main</p>
<p>注意缩进格式：每行前面都有两个空格不要删了，每个冒号后面都有个空格也不要删</p>
<p>去GitHub之前生成的仓库页面，点击code，复制https链接</p>
<p>将其粘贴到记事本中的repository：后面</p>
<p>然后保存退出</p>
<p>回到博客文件夹，git bash</p>
<p>安装自动部署发布工具</p>
<p>npm install hexo-deployer-git –save</p>
<p>执行命令时报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/tangxtang1119/Pictures@master/wps7.jpg"> </p>
<p>尝试方法：</p>
<p>cnpm install hexo-deployer-git –save</p>
<p>（cnpm会创建文件夹的引用，而npm不会，具体原因不明白）</p>
<p>更改后，上传出现报错</p>
<h4 id="解决报错的地方就是22端口问题，就是连接超时。"><a href="#解决报错的地方就是22端口问题，就是连接超时。" class="headerlink" title="解决报错的地方就是22端口问题，就是连接超时。"></a><strong>解决报错的地方就是22端口问题，就是连接超时。</strong></h4><p>解决办法：</p>
<p>手动修改hosts文件修改访问github.com的IP地址</p>
<h5 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a><strong>修改hosts文件</strong></h5><p>文件位置C:\Windows\System32\drivers\etc\hosts，修改用户权限，开放修改和写入的权限，再编辑hosts文件。添加github.com的IP地址和域名。如下：</p>
<p>140.82.112.3    github.com</p>
<p>151.101.1.194    github.global.ssl.fastly.net</p>
<p>151.101.65.194   github.global.ssl.fastly.net</p>
<p>151.101.129.194   github.global.ssl.fastly.net</p>
<p>151.101.193.194   github.global.ssl.fastly.net</p>
<p>185.199.108.153   assets-cdn.github.com</p>
<p>185.199.109.153   assets-cdn.github.com</p>
<p>185.199.110.153   assets-cdn.github.com</p>
<p>185.199.111.153   assets-cdn.github.com</p>
<h5 id="刷新DNS解析缓存并验证"><a href="#刷新DNS解析缓存并验证" class="headerlink" title="刷新DNS解析缓存并验证"></a><strong>刷新DNS解析缓存并验证</strong></h5><p>在我们访问一个域名（网址）时，系统首先会从本地DNS缓存中读取该域名所对应的IP地址。如果系统无法在DNS缓存中找到对应的IP地址，则去查询DNS服务器，获取该域名的解析结果，并将解析结果缓存到本地DNS缓存中，以便下次访问该域名时可以快速地获取IP地址。</p>
<p>1.刷新DNS解析缓存</p>
<p>ipconfig &#x2F;flushdns命令可以清除所有的DNS缓存，让系统重新去查询DNS服务器，获取最新的解析结果。</p>
<ol start="2">
<li>验证</li>
</ol>
<p>在浏览器中输入网址：github.com，成功访问</p>
<h1 id="五、如何给个人博客更换主题"><a href="#五、如何给个人博客更换主题" class="headerlink" title="五、如何给个人博客更换主题"></a><strong>五、如何给个人博客更换主题</strong></h1><h4 id="GitHub-克隆仓库"><a href="#GitHub-克隆仓库" class="headerlink" title="GitHub 克隆仓库"></a><a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020"><strong>GitHub</strong></a> <strong>克隆仓库</strong></h4><p>国内直接从 <a href="https://so.csdn.net/so/search?q=GitHub&spm=1001.2101.3001.7020">GitHub</a> 克隆仓库的速度可能非常慢容易失败，影响开发效率。本文将分享几种加速 git clone 的方法，显著提升克隆速度。</p>
<p>方法：使用 ghproxy 代理服务(推荐)</p>
<p>ghproxy 是一个 GitHub 镜像代理服务，它会将你的请求先发送到代理服务器，然后由代理服务器快速地从 GitHub 获取数据，并返回给你。这种方式能够显著提升 git clone 的速度。</p>
<p>在<a href="https://hexo.io/themes/%E5%AE%98%E7%BD%91%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E5%96%9C%E6%AC%A2%E7%9A%84%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2">https://hexo.io/themes/官网选择自己喜欢的主题更换</a></p>
<p>使用 ghproxy 代理进行 git clone</p>
<p>通过以下命令使用 ghproxy 代理来加速克隆操作：</p>
<p>git clone <a href="https://mirror.ghproxy.com/https://github.com/USERNAME/REPOSITORY">https://mirror.ghproxy.com/https://github.com/USERNAME/REPOSITORY</a></p>
<p>例如，克隆一个名为 dockerfiles 的仓库，可以使用如下命令：</p>
<p>git clone <a href="https://mirror.ghproxy.com/https:/github.com/stilleshan/dockerfiles">https://mirror.ghproxy.com/https://github.com/stilleshan/dockerfiles</a></p>
<p>下载后把文件移动到themes文件夹中。</p>
<p>解决部署到 Github Page 后无 CSS 样式的问题</p>
<p>方法很简单，在 hexo 根目录下 _config.yml配置文件中，找到对 URL 部分的配置，其他配置选项不动，仅修改 url 选项，如下：</p>
<p># URL</p>
<p>##Set your site url here. For example, if you use GitHub Page, set url as ‘<a href="https://username.github.io/project">https://username.github.io/project</a>‘</p>
<p>url: <a href="https://eternaldeath.github.io/%E4%BD%A0%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D/">https://eternaldeath.github.io/你的仓库名/</a></p>
<p>url 放置完整的路径，如果你是在 Github Page 上部署自己的博客，那么则无需添加“你的仓库名”部分，如果你是对某个仓库创建的 Github Page，则需要加上你的仓库名</p>
<h4 id="创建页面（导航栏列表项）"><a href="#创建页面（导航栏列表项）" class="headerlink" title="创建页面（导航栏列表项）"></a><strong>创建页面（导航栏列表项）</strong></h4><p>列表项名：类别 </p>
<p>hexo new page categories </p>
<p>然后将以下代码粘贴到文件中：</p>
<p>&#x2F;source&#x2F;categories&#x2F;index.md </p>
<p>-–</p>
<p>title: categories </p>
<p>type: categories </p>
<p>layout: “categories” </p>
<p>-–</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
